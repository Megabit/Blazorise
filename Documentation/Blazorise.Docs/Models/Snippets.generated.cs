//-----------------------------------------------------------------------
// This file is autogenerated by Blazorise.Docs.Compiler
// Any changes to this file will be overwritten on build
// <auto-generated />
//-----------------------------------------------------------------------

namespace Blazorise.Docs.Models
{
    public static partial class Snippets
    {
        public const string BeginnersGuideToCreateBlazoriseApp_CounterExample = @"<Heading Size=""HeadingSize.Is1"">Counter with Blazorise</Heading>

<Paragraph>Current count: @currentCount</Paragraph>

<Button Color=""Color.Primary"" Clicked=""IncrementCount"">Click me</Button>

@code {
    int currentCount = 0;

    void IncrementCount()
    {
        currentCount++;
    }
}";

        public const string BeginnersGuideToCreateBlazoriseApp_ServicesExample = @"using Blazorise;
using Blazorise.Bootstrap5;
using Blazorise.Icons.FontAwesome;
using BlazoriseSampleApplication;
using Microsoft.AspNetCore.Components.Web;
using Microsoft.AspNetCore.Components.WebAssembly.Hosting;

namespace Company.WebApplication1
{
    public class Program
    {
        public static async Task Main( string[] args )
        {
            var builder = WebAssemblyHostBuilder.CreateDefault( args );
            builder.RootComponents.Add<App>( ""#app"" );
            builder.RootComponents.Add<HeadOutlet>( ""head::after"" );

            builder.Services.AddScoped( sp => new HttpClient { BaseAddress = new Uri( builder.HostEnvironment.BaseAddress ) } );

            builder.Services
                .AddBlazorise( options =>
                {
                    options.Immediate = true;
                } )
                .AddBootstrap5Providers()
                .AddFontAwesomeIcons();

            await builder.Build().RunAsync();
        }
    }
}";

        public const string BeginnersGuideToCreateBlazoriseApp_StaticFilesExample = @"<!DOCTYPE html>
<html lang=""en"">

<head>
    <meta charset=""utf-8"" />
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"" />
    <title>BlazoriseSampleApplication</title>
    <base href=""/"" />
    <link href=""css/bootstrap/bootstrap.min.css"" rel=""stylesheet"" />

    <link href=""_content/Blazorise/blazorise.css"" rel=""stylesheet"" />
    <link href=""_content/Blazorise.Bootstrap5/blazorise.bootstrap5.css"" rel=""stylesheet"" />

    <link href=""css/app.css"" rel=""stylesheet"" />
    <link href=""BlazoriseSampleApplication.styles.css"" rel=""stylesheet"" />
</head>

<body>
    <div id=""app"">Loading...</div>

    <div id=""blazor-error-ui"">
        An unhandled error has occurred.
        <a href="""" class=""reload"">Reload</a>
        <a class=""dismiss"">ðŸ—™</a>
    </div>
    <script src=""_framework/blazor.webassembly.js""></script>
</body>

</html>";

        public const string BeginnersGuideToCreateBlazoriseApp_UsingsExample = @"@using Blazorise";

        public const string ValidationWithDataAnnotations_FormExample = @"@using ValidationWithDataAnnotations.Models

<Row>
    <Column>
        <Validations @ref=""@ValidationsRef"" Mode=""ValidationMode.Manual"" Model=""@EmployeeModel"" ValidateOnLoad=""false"">
            <Fields>
                <Validation>
                    <Field ColumnSize=""ColumnSize.IsHalf"">
                        <FieldLabel>First Name</FieldLabel>
                        <FieldBody>
                            <TextEdit @bind-Text=""@EmployeeModel.FirstName"">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation>
                    <Field ColumnSize=""ColumnSize.IsHalf"">
                        <FieldLabel>Last Name</FieldLabel>
                        <FieldBody>
                            <TextEdit @bind-Text=""@EmployeeModel.LastName"">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
            </Fields>
            <Fields>
                <Validation>
                    <Field ColumnSize=""ColumnSize.IsHalf"">
                        <FieldLabel>Email Address</FieldLabel>
                        <FieldBody>
                            <TextEdit @bind-Text=""@EmployeeModel.Email"" Role=""TextRole.Email"">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation>
                    <Field ColumnSize=""ColumnSize.IsHalf"">
                        <FieldLabel>Date of Birth</FieldLabel>
                        <FieldBody>
                            <DatePicker @bind-Date=""@EmployeeModel.DateOfBirth"">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </DatePicker>
                        </FieldBody>
                    </Field>
                </Validation>
            </Fields>
            <Fields>
                <Validation>
                    <Field ColumnSize=""ColumnSize.IsHalf"">
                        <FieldLabel>Years of Experience</FieldLabel>
                        <FieldBody>
                            <NumericPicker @bind-Value=""@EmployeeModel.YearsOfExperience"">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </NumericPicker>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation>
                    <Field ColumnSize=""ColumnSize.IsHalf"">
                        <FieldLabel>Gender</FieldLabel>
                        <FieldBody>
                            <Select @bind-SelectedValue=""@EmployeeModel.Gender"">
                                <ChildContent>
                                    <SelectItem TValue=""string""></SelectItem>
                                    @foreach ( var g in Gender.GetGenders() )
                                    {
                                        <SelectItem TValue=""string"" Value=""@g.Code"">@g.Name</SelectItem>
                                    }
                                </ChildContent>
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </Select>
                        </FieldBody>
                    </Field>
                </Validation>
            </Fields>
            <Validation>
                <Field>
                    <FieldLabel>Address</FieldLabel>
                    <FieldBody>
                        <TextEdit @bind-Text=""@EmployeeModel.Address.Street"">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </FieldBody>
                </Field>
            </Validation>
            <Fields>
                <Validation>
                    <Field ColumnSize=""ColumnSize.IsHalf"">
                        <FieldLabel>City</FieldLabel>
                        <FieldBody>
                            <Select @bind-SelectedValue=""@EmployeeModel.Address.City"">
                                <ChildContent>
                                    <SelectItem TValue=""string""></SelectItem>
                                    @foreach ( var c in City.GetCities() )
                                    {
                                        <SelectItem TValue=""string"" Value=""@c.Code"">@c.Name</SelectItem>
                                    }
                                </ChildContent>
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </Select>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation>
                    <Field ColumnSize=""ColumnSize.IsHalf"">
                        <FieldLabel>Zip</FieldLabel>
                        <FieldBody>
                            <TextEdit @bind-Text=""@EmployeeModel.Address.Zip"">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
            </Fields>
            <Validation>
                <Field>
                    <FieldLabel>Country</FieldLabel>
                    <FieldBody>
                        <Select @bind-SelectedValue=""@EmployeeModel.Address.Country"">
                            <ChildContent>
                                <SelectItem TValue=""string""></SelectItem>
                                @foreach ( var c in Country.GetCountries() )
                                {
                                    <SelectItem TValue=""string"" Value=""@c.Code"">@c.Name</SelectItem>
                                }
                            </ChildContent>
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </Select>
                    </FieldBody>
                </Field>
            </Validation>
        </Validations>
        <Button Color=""Color.Primary"" Clicked=""@OnSaveClicked"">
            Validate and Submit
        </Button>
    </Column>
</Row>
@code {
    [Inject] IMessageService MessageService { get; set; }

    Validations ValidationsRef { get; set; }

    Employee EmployeeModel { get; set; } = new Employee();

    async Task OnSaveClicked()
    {
        if ( await ValidationsRef.ValidateAll() )
        {
            await MessageService.Info( ""Thank you for filling the form."" );

            await ValidationsRef.ClearAll();
        }
    }
}";

        public const string ValidationWithDataAnnotations_MessageProviderExample = @"<Router AppAssembly=""@typeof(App).Assembly"">
    <Found Context=""routeData"">
        <RouteView RouteData=""@routeData"" DefaultLayout=""@typeof(MainLayout)"" />
        <FocusOnNavigate RouteData=""@routeData"" Selector=""h1"" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout=""@typeof(MainLayout)"">
            <p role=""alert"">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

<MessageAlert />";

        public const string ValidationWithDataAnnotations_ModelsExample = @"public class Employee
{
    [Required]
    public string FirstName { get; set; }

    [Required]
    public string LastName { get; set; }

    [Required]
    [EmailAddress]
    public string Email { get; set; }

    [Required]
    public string Gender { get; set; }

    [Required]
    public DateTime? DateOfBirth { get; set; }

    [Required]
    public decimal? YearsOfExperience { get; set; }

    public Address Address { get; set; } = new Address();
}

public class Address
{
    [Required]
    public string Street { get; set; }

    [Required]
    public string City { get; set; }

    [Required]
    public string Zip { get; set; }

    [Required]
    public string Country { get; set; }
}

public class Country
{
    public string Name { get; set; }

    public string Code { get; set; }

    public static IEnumerable<Country> GetCountries()
    {
        return new List<Country>
        {
            new() { Name = ""Croatia"", Code = ""HR"" },
            new() { Name = ""United Kingdom"", Code = ""UK"" },
            new() { Name = ""United States"", Code = ""US"" },
        };
    }
}

public class City
{
    public string Name { get; set; }

    public string Code { get; set; }

    public string CountryCode { get; set; }

    public static IEnumerable<City> GetCities()
    {
        return new List<City>
        {
            new() { Name = ""San Francisco"", CountryCode = ""US"", Code=""US-101"" },
            new() { Name = ""Los Angeles"", CountryCode = ""US"", Code=""US-102"" },
            new() { Name = ""Boston"", CountryCode = ""US"", Code=""US-103"" },
            new() { Name = ""Portland"", CountryCode = ""US"", Code=""US-104"" },
            new() { Name = ""Split"", CountryCode = ""HR"", Code=""HR-101"" },
            new() { Name = ""Zagreb"", CountryCode = ""HR"", Code=""HR-102"" },
            new() { Name = ""Dubrovnik"", CountryCode = ""HR"", Code=""HR-103"" },
            new() { Name = ""London"", CountryCode = ""UK"", Code=""UK-101"" },
            new() { Name = ""Glasgow"", CountryCode = ""UK"", Code=""UK-102"" },
            new() { Name = ""Liverpool"", CountryCode = ""UK"", Code=""UK-103"" }
        };
    }
}

public class Gender
{
    public string Name { get; set; }

    public string Code { get; set; }

    public static IEnumerable<Gender> GetGenders()
    {
        return new List<Gender>
        {
            new() { Name = ""Male"", Code = ""A"" },
            new() { Name = ""Female"", Code = ""B"" },
            new() { Name = ""Non-binary"", Code = ""C"" },
            new() { Name = ""Transgender"", Code = ""D"" },
            new() { Name = ""Intersex"", Code = ""E"" },
            new() { Name = ""I prefer not to say"", Code = ""F"" },
        };
    }
}";

        public const string UsingTheSelectComponent_SelectComponentWithComplexTypeExample = @"<Row>
    <Column>
        <Field>
            <Select TValue=""int"" SelectedValueChanged=""@(value => selectedEmployee = employeeData.First(emp => emp.Id == value))"">
                @foreach ( var employee in employeeData )
                {
                    <SelectItem @key=""employee.Id"" Value=""@employee.Id"">@employee.Name</SelectItem>
                }
            </Select>
        </Field>
    </Column>
</Row>
<Row>
    <Column>
        Selected Employee is : @selectedEmployee.Name
    </Column>
</Row>

@code {
    public Employee selectedEmployee;
    public class Employee
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    public List<Employee> employeeData;

    protected override void OnInitialized()
    {
        employeeData = new()
        {
            new (){ Id = 11500, Name = ""John"" },
            new (){ Id = 11566, Name = ""Julia"" },
            new (){ Id = 11612, Name = ""Maria"" },
            new (){ Id = 10989, Name = ""Peter"" }
        };
        selectedEmployee = employeeData.First();
        base.OnInitialized();
    }
}";

        public const string UsingTheSelectComponent_SelectComponentWithEnumTypeExample = @"@using System.Text.Json.Serialization

<Row>
    <Column>
        <Field>
            <Select TValue=""Day"" @bind-SelectedValue=""@selectedDay"">
                @foreach ( var enumValue in Enum.GetValues<Day>() )
                {
                    <SelectItem @key=""enumValue"" Value=""@enumValue"">@enumValue</SelectItem>
                }
            </Select>
        </Field>
    </Column>
</Row>
<Row>
    <Column>
        Selected Day is : @selectedDay.ToString(""g"")
    </Column>
</Row>

@code {
    public Day selectedDay;

    [Flags]
    [JsonConverter( typeof( System.Text.Json.Serialization.JsonStringEnumConverter ) )]
    public enum Day
    {
        None = 0,
        Sunday = 1,
        Monday = 2,
        Tuesday = 4,
        Wednesday = 8,
        Thursday = 16,
        Friday = 32,
        Saturday = 64
    }
}";

        public const string UsingTheSelectComponent_SelectComponentWithNullableTypeExample = @"<Row>
    <Column>
        <Field>
            <Select TValue=""int?"" @bind-SelectedValue=""@selectedEmployeeId"">
                <SelectItem Value=""(int?)null""></SelectItem>
                <SelectItem Value=""11500"">John</SelectItem>
                <SelectItem Value=""11566"">Julia</SelectItem>
                <SelectItem Value=""11612"">Maria</SelectItem>
                <SelectItem Value=""10989"">Peter</SelectItem>
            </Select>
        </Field>
    </Column>
</Row>

<Row>
    <Column>
        Selected Employee Id is : @(selectedEmployeeId.HasValue ? selectedEmployeeId.Value : ""empty"")
    </Column>
</Row>

@code {
    private int? selectedEmployeeId = null;
}";

        public const string UsingTheSelectComponent_SelectComponentWithPrimitiveTypeExample = @"<Row>
    <Column>
        <Field>
            <Select TValue=""int"">
                <SelectItem Value=""11500"">John</SelectItem>
                <SelectItem Value=""11566"">Julia</SelectItem>
                <SelectItem Value=""11612"">Maria</SelectItem>
                <SelectItem Value=""10989"">Peter</SelectItem>
            </Select>
        </Field>
    </Column>
</Row>";

        public const string BasicAccordionExample = @"<Accordion>
    <Collapse Visible=""@collapse1Visible"">
        <CollapseHeader>
            <Heading Size=""HeadingSize.Is5"">
                <AccordionToggle>Switch 1</AccordionToggle>
            </Heading>
        </CollapseHeader>
        <CollapseBody>
            Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS.
        </CollapseBody>
    </Collapse>
    <Collapse Visible=""@collapse2Visible"">
        <CollapseHeader>
            <Heading Size=""HeadingSize.Is5"">
                <AccordionToggle>Switch 2</AccordionToggle>
            </Heading>
        </CollapseHeader>
        <CollapseBody>
            Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS.
        </CollapseBody>
    </Collapse>
    <Collapse Visible=""@collapse3Visible"">
        <CollapseHeader>
            <Heading Size=""HeadingSize.Is5"">
                <AccordionToggle>Switch 3</AccordionToggle>
            </Heading>
        </CollapseHeader>
        <CollapseBody>
            Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS.
        </CollapseBody>
    </Collapse>
</Accordion>
@code {
    bool collapse1Visible = true;
    bool collapse2Visible = false;
    bool collapse3Visible = false;
}";

        public const string ButtonAddonExample = @"<Addons>
    <Addon AddonType=""AddonType.Body"">
        <TextEdit Placeholder=""Recipient's username"" />
    </Addon>
    <Addon AddonType=""AddonType.End"">
        <Button Color=""Color.Secondary"">Button</Button>
    </Addon>
</Addons>";

        public const string DropdownAddonExample = @"<Addons>
    <Addon AddonType=""AddonType.Start"">
        <Dropdown>
            <DropdownToggle Color=""Color.Primary"">Dropdown</DropdownToggle>
            <DropdownMenu>
                <DropdownItem>Action</DropdownItem>
                <DropdownItem>Another action</DropdownItem>
                <DropdownItem>Something else here</DropdownItem>
                <DropdownDivider />
                <DropdownItem>Separated link</DropdownItem>
            </DropdownMenu>
        </Dropdown>
    </Addon>
    <Addon AddonType=""AddonType.Body"">
        <TextEdit />
    </Addon>
</Addons>";

        public const string MultipleAddonsExample = @"<Addons>
    <Addon AddonType=""AddonType.Start"">
        <AddonLabel>Start</AddonLabel>
    </Addon>
    <Addon AddonType=""AddonType.Body"">
        <TextEdit Placeholder=""Placeholder"" />
    </Addon>
    <Addon AddonType=""AddonType.End"">
        <AddonLabel>End</AddonLabel>
    </Addon>
</Addons>";

        public const string StaticAddonExample = @"<Addons>
    <Addon AddonType=""AddonType.Start"">
        <AddonLabel>@@</AddonLabel>
    </Addon>
    <Addon AddonType=""AddonType.Body"">
        <TextEdit Placeholder=""Username"" />
    </Addon>
</Addons>";

        public const string AlertUseProgrammaticallyExample = @"<Alert @ref=""myAlert"" Color=""Color.Success"">
    <AlertMessage>
        Alert test.
    </AlertMessage>
</Alert>

<Button Clicked=""@OnButtonClick"" Color=""Color.Primary"">Show alert</Button>

@code{
    Alert myAlert;

    Task OnButtonClick()
    {
        return myAlert.Show();
    }
}";

        public const string AlertUseWithBindExample = @"<Alert Color=""Color.Success"" @bind-Visible=""@visible"">
    <AlertMessage>
        Alert test.
    </AlertMessage>
</Alert>

<Button Clicked=""@OnButtonClick"" Color=""Color.Primary"">Toggle alert</Button>

@code {
    bool visible = true;

    Task OnButtonClick()
    {
        visible = !visible;

        return Task.CompletedTask;
    }
}";

        public const string AlertWithContentExample = @"<Alert Color=""Color.Info"" @bind-Visible=""@visible"">
    <Heading Size=""HeadingSize.Is4"" TextColor=""TextColor.Success"">
        Big one!
        <CloseButton />
    </Heading>
    <Paragraph>
        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Cras mattis consectetur purus sit amet fermentum.
    </Paragraph>
    <Paragraph>
        <Button Color=""Color.Info"">Wanna do this</Button>
        <Button Color=""Color.Light"">Or do this</Button>
    </Paragraph>
</Alert>
@code {
    bool visible = true;
}";

        public const string BasicAlertExample = @"<Alert Color=""Color.Success"" Visible>
    <AlertMessage>Well done!</AlertMessage>
    <AlertDescription>You successfully read this important alert message.</AlertDescription>
</Alert>";

        public const string CloseAlertExample = @"<Alert Color=""Color.Success"" @bind-Visible=""@visible"">
    <AlertDescription>
        Lorem ipsum dolor sit amet, consectetur adipisicing elit.
    </AlertDescription>
    <AlertMessage>
        Alert Link.
    </AlertMessage>
    <CloseButton />
</Alert>
@code {
    bool visible = true;
}";

        public const string BadgeColorsExample = @"<Badge Color=""Color.Primary"">Primary</Badge>
<Badge Color=""Color.Secondary"">Secondary</Badge>
<Badge Color=""Color.Success"">Success</Badge>
<Badge Color=""Color.Danger"">Danger</Badge>
<Badge Color=""Color.Warning"">Warning</Badge>
<Badge Color=""Color.Info"">Info</Badge>
<Badge Color=""Color.Light"">Light</Badge>
<Badge Color=""Color.Dark"">Dark</Badge>";

        public const string BasicBadgeExample = @"<Badge Color=""Color.Primary"">Hello</Badge>";

        public const string CloseBadgeExample = @"<Badge Color=""Color.Primary"" CloseClicked=""@(()=>Console.WriteLine(""closed""))"">Primary</Badge>";

        public const string IconBadgeExample = @"<Badge Color=""Color.Success"">
    <Tooltip Text=""Confirmed"">
        <Icon Name=""IconName.Check"" aria-label=""Confirmed"" />
    </Tooltip>
</Badge>
<Badge Color=""Color.Danger"">
    <Tooltip Text=""Cancelled"">
        <Icon Name=""IconName.Times"" aria-label=""Cancelled"" />
    </Tooltip>
</Badge>";

        public const string PillBadgeExample = @"<Badge Color=""Color.Primary"" Pill>Pending</Badge>
<Badge Color=""Color.Success"" Pill>Confirmed</Badge>
<Badge Color=""Color.Danger"" Pill>Denied</Badge>
<Badge Color=""Color.Secondary"" Pill>On hold</Badge>";

        public const string TopBarExample = @"<Bar Breakpoint=""Breakpoint.Desktop""
     Background=""Background.Light""
     ThemeContrast=""ThemeContrast.Light"">
    <BarBrand>
        Brandname
    </BarBrand>
    <BarToggler />
    <BarMenu>
        <BarStart>
            <BarItem>
                <BarLink To=""#home"">Home</BarLink>
            </BarItem>
            <BarItem>
                <BarLink To=""#docs"">Documentation</BarLink>
            </BarItem>
            <BarItem>
                <BarDropdown>
                    <BarDropdownToggle>Dropdown</BarDropdownToggle>
                    <BarDropdownMenu>
                        <BarDropdownItem>Action</BarDropdownItem>
                        <BarDropdownDivider />
                        <BarDropdownItem>Another action</BarDropdownItem>
                    </BarDropdownMenu>
                </BarDropdown>
            </BarItem>
        </BarStart>
        <BarEnd>
            <BarItem>
                <Button Color=""Color.Primary"">Sign up</Button>
                <Button Color=""Color.Secondary"">Log in</Button>
            </BarItem>
        </BarEnd>
    </BarMenu>
</Bar>";

        public const string VerticalBarExternalExample = @"<Layout Sider>
    <LayoutSider>
        <LayoutSiderContent>
            <Bar @ref=""@sidebar"" Mode=""BarMode.VerticalInline""
                 Breakpoint=""Breakpoint.Desktop""
                 Background=""Background.Light""
                 ThemeContrast=""ThemeContrast.Light"">
                <BarItem>Example</BarItem>
            </Bar>
        </LayoutSiderContent>
    </LayoutSider>
    <Layout>
        <LayoutHeader Fixed>
            <Bar Mode=""BarMode.Horizontal""
                 Background=""Background.Light""
                 ThemeContrast=""ThemeContrast.Light"">
                <BarToggler Bar=""@sidebar"" />
                <BarBrand>
                    <BarItem>
                        <BarLink To=""#"">
                            <BarIcon IconName=""IconName.Dashboard"" />
                            Example
                        </BarLink>
                    </BarItem>
                </BarBrand>
                <BarMenu>
                    <BarItem>Example</BarItem>
                </BarMenu>
                <BarToggler />
            </Bar>
        </LayoutHeader>
    </Layout>
</Layout>

@code {
    private Bar sidebar;
}";

        public const string VerticalBarInlineExample = @"<Bar Mode=""BarMode.VerticalInline""
     Breakpoint=""Breakpoint.Desktop""
     Background=""Background.Light""
     ThemeContrast=""ThemeContrast.Light"">
    <BarToggler />
    <BarBrand>
        <BarItem>
            <BarLink To=""#"">
                <BarIcon IconName=""IconName.Dashboard"" />
                Example
            </BarLink>
        </BarItem>
    </BarBrand>
    <BarMenu>
        <BarItem>Example</BarItem>
    </BarMenu>
</Bar>";

        public const string VerticalBarNestedDropdownsExample = @"<Bar Breakpoint=""Breakpoint.Desktop""
     Background=""Background.Light""
     ThemeContrast=""ThemeContrast.Light"">
    <BarMenu>
        <BarStart>
            <BarItem>
                <BarDropdown>
                    <BarDropdownToggle>
                        Top-level toggler
                    </BarDropdownToggle>
                    <BarDropdownMenu>
                        <BarDropdownItem>
                            Top-level item
                        </BarDropdownItem>
                        <BarDropdown>
                            <BarDropdownToggle>
                                Nested toggler
                            </BarDropdownToggle>
                            <BarDropdownMenu>
                                <BarDropdownItem>
                                    Nested item
                                </BarDropdownItem>
                            </BarDropdownMenu>
                        </BarDropdown>
                    </BarDropdownMenu>
                </BarDropdown>
            </BarItem>
        </BarStart>
    </BarMenu>
</Bar>";

        public const string VerticalBarPopoutExample = @"<Bar Mode=""BarMode.VerticalInline""
     Breakpoint=""Breakpoint.Desktop""
     Background=""Background.Light""
     ThemeContrast=""ThemeContrast.Light"">
    <BarBrand>
        <BarItem>
            <BarLink To=""#"">
                <BarIcon IconName=""IconName.Dashboard"" />
                Blazorise Demo
            </BarLink>
        </BarItem>
    </BarBrand>
    <BarToggler Mode=""BarTogglerMode.Popout"" />
    <BarMenu>
        <BarItem>Popout!</BarItem>
    </BarMenu>
</Bar>";

        public const string VerticalBarRightAlignedExample = @"<Layout Sider>
    <LayoutSider>
        <LayoutSiderContent>
            <Bar Mode=""BarMode.VerticalInline"" CollapseMode=""BarCollapseMode.Small""
                 Breakpoint=""Breakpoint.Desktop""
                 Background=""Background.Light""
                 ThemeContrast=""ThemeContrast.Light"">
                <BarBrand>
                    <BarItem>
                        <BarLink To=""#"">
                            <BarIcon IconName=""IconName.Dashboard"" />
                            Example
                        </BarLink>
                    </BarItem>
                </BarBrand>
                <BarMenu>
                    <BarStart>
                        <BarItem>
                            <BarDropdown RightAligned>
                                <BarDropdownToggle>
                                    <BarIcon IconName=""IconName.Edit"" />
                                    Toggle
                                </BarDropdownToggle>
                                <BarDropdownMenu>
                                    <BarDropdownItem>Action</BarDropdownItem>
                                    <BarDropdownItem>Another action</BarDropdownItem>
                                </BarDropdownMenu>
                            </BarDropdown>
                        </BarItem>
                    </BarStart>
                </BarMenu>
            </Bar>
        </LayoutSiderContent>
    </LayoutSider>
</Layout>";

        public const string VerticalBarSideBarExample = @"<Bar Mode=""BarMode.VerticalInline""
     CollapseMode=""BarCollapseMode.Small""
     Breakpoint=""Breakpoint.Desktop""
     NavigationBreakpoint=""Breakpoint.Tablet""
     ThemeContrast=""ThemeContrast.Dark"">
    <BarBrand>
        <BarItem>
            <BarLink To=""#"">
                <BarIcon IconName=""IconName.Dashboard"" />
                Blazorise Demo
            </BarLink>
        </BarItem>
    </BarBrand>
    <BarMenu>
        <BarStart>
            <BarItem>
                <BarLink To=""#home"">
                    <BarIcon IconName=""IconName.Dashboard"" />
                    Home
                </BarLink>
            </BarItem>
            <BarItem>
                <BarLink To=""#docs"">Documentation</BarLink>
            </BarItem>
            <BarItem>
                <BarDropdown>
                    <BarDropdownToggle>
                        <BarIcon IconName=""IconName.Edit"" />
                        Dropdown
                    </BarDropdownToggle>
                    <BarDropdownMenu>
                        <BarDropdownItem>Action</BarDropdownItem>
                        <BarDropdownItem>Another action</BarDropdownItem>
                    </BarDropdownMenu>
                </BarDropdown>
            </BarItem>
        </BarStart>
    </BarMenu>
</Bar>";

        public const string BreadcrumbAutoExample = @"<Breadcrumb Mode=""BreadcrumbMode.Auto"">
    <BreadcrumbItem>
        <BreadcrumbLink To=""#"">Home</BreadcrumbLink>
    </BreadcrumbItem>
    <BreadcrumbItem>
        <BreadcrumbLink To=""#"">Account</BreadcrumbLink>
    </BreadcrumbItem>
    <BreadcrumbItem>
        <BreadcrumbLink To=""#"">Settings</BreadcrumbLink>
    </BreadcrumbItem>
</Breadcrumb>";

        public const string BreadcrumbManualExample = @"<Breadcrumb>
    <BreadcrumbItem>
        <BreadcrumbLink To=""#"">Home</BreadcrumbLink>
    </BreadcrumbItem>
    <BreadcrumbItem>
        <BreadcrumbLink To=""#"">Library</BreadcrumbLink>
    </BreadcrumbItem>
    <BreadcrumbItem Active>
        <BreadcrumbLink To=""#"">Data</BreadcrumbLink>
    </BreadcrumbItem>
</Breadcrumb>";

        public const string ActiveButtonExample = @"<Button Color=""Color.Primary"" Active>Primary</Button>
<Button Color=""Color.Secondary"" Active>Secondary</Button>";

        public const string BlockButtonExample = @"<Button Color=""Color.Primary"" Block>Blocked primary</Button>
<Button Color=""Color.Secondary"" Block>Blocked secondary</Button>";

        public const string ButtonExample = @"<Button Color=""Color.Primary"">Click me</Button>";

        public const string ButtonGroupExample = @"<Buttons>
    <Button Color=""Color.Secondary"">LEFT</Button>
    <Button Color=""Color.Secondary"">CENTER</Button>
    <Button Color=""Color.Secondary"">RIGHT</Button>
</Buttons>";

        public const string ButtonInDialogsBestPracticeExample = @"<Fields>
    <Field ColumnSize=""ColumnSize.IsHalf"">
        <FieldLabel>First name</FieldLabel>
        <FieldBody>
            <TextEdit Text=""John"" />
        </FieldBody>
    </Field>
    <Field ColumnSize=""ColumnSize.IsHalf"">
        <FieldLabel>Last name</FieldLabel>
        <FieldBody>
            <TextEdit Text=""Smith"" />
        </FieldBody>
    </Field>
    <Field ColumnSize=""ColumnSize.IsFull"">
        <FieldLabel>Email address</FieldLabel>
        <FieldBody>
            <TextEdit Text=""john.smith@example.com"" />
        </FieldBody>
    </Field>
    <Field Flex=""Flex.JustifyContent.Between"">
        <Button Color=""Color.Danger"">Delete</Button>
        <Div>
            <Button Color=""Color.Secondary"">Cancel</Button>
            <Button Color=""Color.Primary"">Create account</Button>
        </Div>
    </Field>
</Fields>";

        public const string ButtonInFormBestPracticeExample = @"<Fields>
    <Field ColumnSize=""ColumnSize.IsHalf"">
        <FieldLabel>First name</FieldLabel>
        <FieldBody>
            <TextEdit Text=""John"" />
        </FieldBody>
    </Field>
    <Field ColumnSize=""ColumnSize.IsHalf"">
        <FieldLabel>Last name</FieldLabel>
        <FieldBody>
            <TextEdit Text=""Smith"" />
        </FieldBody>
    </Field>
    <Field ColumnSize=""ColumnSize.IsFull"">
        <FieldLabel>Email address</FieldLabel>
        <FieldBody>
            <TextEdit Text=""john.smith@example.com"" />
        </FieldBody>
    </Field>
    <Field>
        <Button Color=""Color.Primary"">Create account</Button>
        <Button Color=""Color.Secondary"">Cancel</Button>
    </Field>
</Fields>";

        public const string ButtonUsageExample = @"<Button Color=""Color.Primary"" Clicked=""@OnButtonClicked"">Click me</Button>
<Span>
    Clicked @counter times
</Span>
@code {
    int counter;

    Task OnButtonClicked()
    {
        counter++;

        return Task.CompletedTask;
    }
}";

        public const string ColorButtonsExample = @"<Button Color=""Color.Primary"">Primary</Button>
<Button Color=""Color.Secondary"">Secondary</Button>
<Button Color=""Color.Success"">Success</Button>
<Button Color=""Color.Warning"">Warning</Button>
<Button Color=""Color.Danger"">Danger</Button>
<Button Color=""Color.Info"">Info</Button>
<Button Color=""Color.Light"">Light</Button>
<Button Color=""Color.Dark"">Dark</Button>
<Button>None</Button>";

        public const string DisabledButtonExample = @"<Button Color=""Color.Primary"" Disabled>Primary</Button>
<Button Color=""Color.Secondary"" Disabled>Secondary</Button>";

        public const string LinkButtonExample = @"<Button Color=""Color.Primary"" Type=""ButtonType.Link"" To=""#"">Primary link</Button>
<Button Color=""Color.Secondary"" Type=""ButtonType.Link"" To=""#"" Target=""Target.Blank"">Secondary link</Button>";

        public const string LoadingButtonExample = @"<Button Color=""Color.Primary"" Loading>Primary</Button>
<Button Color=""Color.Primary"" Clicked=""@ShowLoading"" Loading=""@isLoading"">
    <LoadingTemplate>
        This is a custom loading template
    </LoadingTemplate>
    <ChildContent>
        Click to load
    </ChildContent>
</Button>
@code{
    private bool isLoading;

    private async Task ShowLoading()
    {
        isLoading = true;

        await Task.Delay( TimeSpan.FromSeconds( 3 ) );

        isLoading = false;
    }
}";

        public const string OutlineButtonExample = @"<Button Color=""Color.Primary"" Outline>Primary</Button>
<Button Color=""Color.Secondary"" Outline>Secondary</Button>
<Button Color=""Color.Success"" Outline>Success</Button>
<Button Color=""Color.Warning"" Outline>Warning</Button>
<Button Color=""Color.Danger"" Outline>Danger</Button>
<Button Color=""Color.Info"" Outline>Info</Button>
<Button Color=""Color.Light"" Outline>Light</Button>
<Button Color=""Color.Dark"" Outline>Dark</Button>
<Button Outline>None</Button>";

        public const string SizeButtonsExample = @"<Button Color=""Color.Primary"" Size=""Size.Large"">Large</Button>
<Button Color=""Color.Primary"">Normal</Button>
<Button Color=""Color.Primary"" Size=""Size.Small"">Small</Button>";

        public const string SubmitButtonExample = @"<Form>
    <Field Horizontal>
        <FieldLabel ColumnSize=""ColumnSize.Is2"">Name</FieldLabel>
        <FieldBody ColumnSize=""ColumnSize.Is10"">
            <TextEdit Placeholder=""Some text value..."" />
        </FieldBody>
    </Field>
    <Field>
        <Button Color=""Color.Primary"" Type=""ButtonType.Submit"" PreventDefaultOnSubmit>Submit</Button>
    </Field>
</Form>";

        public const string ToolbarButtonsExample = @"<Buttons Role=""ButtonsRole.Toolbar"">
    <Buttons Margin=""Margin.Is2.FromEnd"">
        <Button Color=""Color.Primary"">Primary</Button>
        <Button Color=""Color.Secondary"">Secondary</Button>
        <Button Color=""Color.Info"">Info</Button>
    </Buttons>
    <Buttons>
        <Button Color=""Color.Danger"">Danger</Button>
        <Button Color=""Color.Warning"">Warning</Button>
    </Buttons>
    <Buttons Margin=""Margin.Is2.OnX"">
        <Button Color=""Color.Success"">Success</Button>
    </Buttons>
</Buttons>";

        public const string CardBackgroundExample = @"<Card Background=""Background.Success"" WhiteText>
    <CardBody>
        <CardTitle Size=""3"">
            Card title
        </CardTitle>
        <CardText>
            With supporting text below as a natural lead-in to additional content.
        </CardText>
        <Button Color=""Color.Primary"" Margin=""Margin.Is2.FromTop"">
            Read more <Icon Name=""IconName.ArrowRight"" />
        </Button>
    </CardBody>
</Card>";

        public const string CardButtonExample = @"<Card>
    <CardBody>
        <CardTitle Size=""3"">
            Card title
        </CardTitle>
        <CardText>
            This is some text within a card body. Jelly lemon drops tiramisu chocolate cake cotton candy soufflÃ© oat cake sweet roll. Sugar plum marzipan dragÃ©e topping cheesecake chocolate bar. Danish muffin icing donut.
        </CardText>
        <Button Color=""Color.Primary"" Margin=""Margin.Is2.FromTop"">
            Read more <Icon Name=""IconName.ArrowRight"" />
        </Button>
    </CardBody>
</Card>";

        public const string CardDeckExample = @"<CardDeck>
    <Card>
        <CardImage Source=""/img/gallery/2.jpg"" Alt=""Card image cap 3""></CardImage>
        <CardBody>
            <CardTitle Size=""5"">Card title 1</CardTitle>
            <CardText>
                This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
            </CardText>
            <Button Color=""Color.Primary"">Button</Button>
        </CardBody>
    </Card>
    <Card>
        <CardImage Source=""/img/gallery/3.jpg"" Alt=""Card image cap 9""></CardImage>
        <CardBody>
            <CardTitle Size=""5"">Card title 2</CardTitle>
            <CardText>
                This card has supporting text below as a natural lead-in to additional content.
            </CardText>
            <Button Color=""Color.Primary"">Button</Button>
        </CardBody>
    </Card>
    <Card>
        <CardImage Source=""/img/gallery/4.jpg"" Alt=""Card image cap 12""></CardImage>
        <CardBody>
            <CardTitle Size=""5"">Card title 3</CardTitle>
            <CardText>
                This is a wider card with supporting text below as a natural lead-in to additional content. This card has even longer content than the first to show that equal height action.
            </CardText>
            <Button Color=""Color.Primary"">Button</Button>
        </CardBody>
    </Card>
</CardDeck>";

        public const string CardExample = @"<Card>
    <CardBody>
        <CardTitle Size=""3"">
            Card title
        </CardTitle>
        <CardText>
            This is some text within a card body. Jelly lemon drops tiramisu chocolate cake cotton candy soufflÃ© oat cake sweet roll. Sugar plum marzipan dragÃ©e topping cheesecake chocolate bar. Danish muffin icing donut.
        </CardText>
    </CardBody>
</Card>";

        public const string CardImageExample = @"<Card>
    <CardImage Source=""/img/gallery/2.jpg"" Alt=""Placeholder image"" />
    <CardBody>
        <CardTitle Size=""3"">
            Card title
        </CardTitle>
        <CardText>
            This is some text within a card body. Jelly lemon drops tiramisu chocolate cake cotton candy soufflÃ© oat cake sweet roll. Sugar plum marzipan dragÃ©e topping cheesecake chocolate bar. Danish muffin icing donut.
        </CardText>
        <Button Color=""Color.Primary"" Margin=""Margin.Is2.FromTop"">
            Read more <Icon Name=""IconName.ArrowRight"" />
        </Button>
    </CardBody>
</Card>";

        public const string CarouselExample = @"<Carousel @bind-SelectedSlide=""@selectedSlide"">
    <CarouselSlide Name=""1"">
        <Image Source=""img/gallery/1.jpg"" Text=""Lights image"" Display=""Display.Block"" Width=""Width.Is100"" />
    </CarouselSlide>
    <CarouselSlide Name=""2"">
        <Image Source=""img/gallery/2.jpg"" Text=""Keyboard image"" Display=""Display.Block"" Width=""Width.Is100"" />
    </CarouselSlide>
    <CarouselSlide Name=""3"">
        <Image Source=""img/gallery/3.jpg"" Text=""Road image"" Display=""Display.Block"" Width=""Width.Is100"" />
    </CarouselSlide>
</Carousel>
@code{
    private string selectedSlide = ""2"";
}";

        public const string CheckExample = @"<Check TValue=""bool"">Check me out</Check>";

        public const string CheckWithBindExample = @"<Check TValue=""bool"" @bind-Checked=""@rememberMe"">Remember Me</Check>

@code{
    bool rememberMe;
}";

        public const string CheckWithEventExample = @"<Check TValue=""bool"" Checked=""@rememberMe"" CheckedChanged=""@OnRememberMeChanged"">Remember Me</Check>

@code{
    bool rememberMe;

    void OnRememberMeChanged( bool value )
    {
        rememberMe = value;
    }
}";

        public const string AutoCloseExample = @"<Alert @bind-Visible=""@visible"">
    I can be closed!
    <CloseButton AutoClose=""true"" />
</Alert>
@code {
    bool visible = true;
}";

        public const string ManualCloseExample = @"<Alert Visible=""@visible"">
    I can be closed!
    <CloseButton Clicked=""@OnClicked"" />
</Alert>
@code {
    bool visible = true;

    Task OnClicked()
    {
        visible = false;

        return Task.CompletedTask;
    }
}";

        public const string WithOtherComponentsExample = @"@if ( visible )
{
    <Div>
        Now you see me...
        <CloseButton Clicked=""@OnClicked"" />
    </Div>
}
@code {
    bool visible = true;

    Task OnClicked()
    {
        visible = false;

        return Task.CompletedTask;
    }
}";

        public const string BasicColorEditExample = @"<ColorEdit @bind-Color=""@colorValue"" />

@code {
    string colorValue = ""#ff0000"";
}";

        public const string BasicColorPickerExample = @"<ColorPicker Color=""#ff0000"" />";

        public const string ColorEditDisabledExample = @"<ColorEdit Color=""#888888"" Disabled />";

        public const string ColorEditSizeExample = @"<Field>
    <ColorEdit Color=""#888888"" Size=""Size.Small"" />
</Field>
<Field>
    <ColorEdit Color=""#444444"" Size=""Size.Large"" />
</Field>";

        public const string BasicDateEditExample = @"<DateEdit TValue=""DateTime?"" />";

        public const string BasicDatePickerExample = @"<DatePicker TValue=""DateTime?"" />";

        public const string DateEditDateTimeExample = @"<DateEdit TValue=""DateTime?"" InputMode=""DateInputMode.DateTime"" />";

        public const string DateEditShowPickerExample = @"<Field>
    <Button Color=""Color.Primary"" Clicked=""@(()=>dateEditRef.ShowPicker())"">
        Show Picker
    </Button>
</Field>
<Field>
    <DateEdit @ref=""@dateEditRef"" TValue=""DateTime"" />
</Field>

@code {
    DateEdit<DateTime> dateEditRef;
}";

        public const string DateEditWithBindExample = @"<DateEdit TValue=""DateTime?"" @bind-Date=""@selectedDate"" />

@code{
    DateTime? selectedDate;
}";

        public const string DateEditWithEventExample = @"<DateEdit TValue=""DateTime?"" Date=""@selectedDate"" DateChanged=""@OnDateChanged"" />

@code{
    DateTime? selectedDate;

    void OnDateChanged( DateTime? date )
    {
        selectedDate = date;
    }
}";

        public const string DatePickerDisabledDatesExample = @"<DatePicker TValue=""DateTime?"" DisabledDates=""@disabledDates"" />

@code {
    DateTime?[] disabledDates = new DateTime?[] {
        DateTime.Now.AddDays(-1),
        DateTime.Now.AddDays(2),
    };
}";

        public const string DatePickerFormatBestPracticeExample = @"<Field>
    <FieldLabel>Start date</FieldLabel>
    <FieldBody>
        <DatePicker TValue=""DateTime?"" Placeholder=""DD/MM/YYYY"" />
    </FieldBody>
    <FieldHelp>Format: DD/MM/YYYY</FieldHelp>
</Field>";

        public const string DatePickerWithIconExample = @"<Addons>
    <Addon AddonType=""AddonType.Body"">
        <DatePicker @ref=""@datePicker"" TValue=""DateTime?"" />
    </Addon>
    <Addon AddonType=""AddonType.End"">
        <Button Color=""Color.Light"" Clicked=""@(()=>datePicker.ToggleAsync())"">
            <Icon Name=""IconName.CalendarDay"" />
        </Button>
    </Addon>
</Addons>
@code{
    DatePicker<DateTime?> datePicker;
}";

        public const string InlineDatePickerExample = @"<DatePicker TValue=""DateTime?"" Inline />";

        public const string MultipleDatePickerExample = @"<DatePicker TValue=""DateTime?"" InputMode=""DateInputMode.Date"" SelectionMode=""DateInputSelectionMode.Multiple"" />";

        public const string RangeDatePickerExample = @"<DatePicker TValue=""DateTime?"" InputMode=""DateInputMode.Date"" SelectionMode=""DateInputSelectionMode.Range"" />";

        public const string DashedDividerExample = @"<Paragraph>
    What language is thine, O sea?
</Paragraph>

<Divider DividerType=""DividerType.Dashed"" />

<Paragraph>
    The language of eternal question.
</Paragraph>";

        public const string DottedDividerExample = @"<Paragraph>
    What language is thy answer, O sky?
</Paragraph>

<Divider DividerType=""DividerType.Dotted"" />

<Paragraph>
    The language of eternal silence.
</Paragraph>";

        public const string SolidDividerExample = @"<Paragraph>
    I sit at my window this morning where the world like a passer-by stops for a moment, nods to me and goes.
</Paragraph>

<Divider />

<Paragraph>
    There little thoughts are the rustle of leaves; they have their whisper of joy in my mind.
</Paragraph>";

        public const string TextContentDividerExample = @"<Paragraph>
    What a world of merriment their melody foretells !
</Paragraph>

<Divider DividerType=""DividerType.TextContent"" Text=""Edgar Allan Poe"" />

<Paragraph>
    How they tinkle, tinkle, tinkle, In the icy air of night !
</Paragraph>";

        public const string BasicDragDropExample = @"<DropContainer TItem=""DropItem"" Items=""@items"" ItemsFilter=""@((item, dropZone) => item.Group == dropZone)"" ItemDropped=""@ItemDropped"" Flex=""Flex.Wrap.Grow.Is1"">
    <ChildContent>
        <DropZone TItem=""DropItem"" Name=""Basket"" Border=""Border.Rounded"" Background=""Background.Light"" Padding=""Padding.Is3"" Margin=""Margin.Is3"" Flex=""Flex.Grow.Is1"">
            <Heading Size=""HeadingSize.Is4"" Margin=""Margin.Is3.FromBottom"">Basket</Heading>
        </DropZone>
        <DropZone TItem=""DropItem"" Name=""Fruit"" DropAllowed=""@((item) => item.Fruit)"" Border=""Border.Rounded"" Background=""Background.Light"" Padding=""Padding.Is3"" Margin=""Margin.Is3"" Flex=""Flex.Grow.Is1"">
            <Heading Size=""HeadingSize.Is4"" Margin=""Margin.Is3.FromBottom"">Fruit</Heading>
        </DropZone>
        <DropZone TItem=""DropItem"" Name=""Vegetable"" DropAllowed=""@((item) => !item.Fruit)"" Border=""Border.Rounded"" Background=""Background.Light"" Padding=""Padding.Is3"" Margin=""Margin.Is3"" Flex=""Flex.Grow.Is1"">
            <Heading Size=""HeadingSize.Is4"" Margin=""Margin.Is3.FromBottom"">Vegetable</Heading>
        </DropZone>
    </ChildContent>
    <ItemTemplate>
        <Card Shadow=""Shadow.Default"" Margin=""Margin.Is3.OnY"">
            <CardBody>
                <Image Source=""@context.Image"" Text=""DragDrop image example"" Style=""width:48px;height:48px;"" />
                @context.Name
            </CardBody>
        </Card>
    </ItemTemplate>
</DropContainer>
@code {
    public class DropItem
    {
        public string Name { get; init; }

        public string Group { get; set; }

        public string Image { get; set; }

        public bool Fruit { get; set; }
    }

    private List<DropItem> items = new()
    {
        new DropItem() { Name = ""Apple"", Group = ""Basket"", Image = ""img/fruit/apple.png"", Fruit = true },
        new DropItem() { Name = ""Bananas"", Group = ""Basket"", Image = ""img/fruit/bananas.png"", Fruit = true },
        new DropItem() { Name = ""Lemon"", Group = ""Fruit"", Image = ""img/fruit/lemon.png"", Fruit = true },
        new DropItem() { Name = ""Broccoli"", Group = ""Basket"", Image = ""img/fruit/broccoli.png"" },
        new DropItem() { Name = ""Strawberry"", Group = ""Fruit"", Image = ""img/fruit/strawberry.png"", Fruit = true },
        new DropItem() { Name = ""Cherry"", Group = ""Basket"", Image = ""img/fruit/cherry.png"", Fruit = true },
        new DropItem() { Name = ""Cabbage"", Group = ""Vegetable"", Image = ""img/fruit/cabbage.png"" },
    };

    private Task ItemDropped( DraggableDroppedEventArgs<DropItem> dropItem )
    {
        dropItem.Item.Group = dropItem.DropZoneName;
        return Task.CompletedTask;
    }
}";

        public const string DragDropReorderingExample = @"@*<DropContainer TItem=""DropItem"" Items=""@items"" ItemsFilter=""@((item, dropZone) => item.Group == dropZone)"" ItemDropped=""@ItemDropped"" Flex=""Flex.Wrap.Grow.Is1"">
    <ChildContent>
        @for ( int i = 1; i < 4; i++ )
        {
            var dropzone = i.ToString();

            <Card>
                <CardBody>
                    <ListGroup>
                        <Heading Size=""HeadingSize.Is4"" Margin=""Margin.Is3.FromBottom"">Drop Zone @dropzone</Heading>
                        <DropZone TItem=""DropItem"" Name=""@dropzone"" AllowReorder Padding=""Padding.Is3"" Margin=""Margin.Is3"" Flex=""Flex.Grow.Is1"" />
                    </ListGroup>
                </CardBody>
            </Card>
        }
    </ChildContent>
    <ItemTemplate>
        <ListGroupItem>
            @context.Name
        </ListGroupItem>
    </ItemTemplate>
</DropContainer>*@

<DropContainer TItem=""DropItem"" Items=""@items"" ItemsFilter=""@((item, dropZone) => item.Group == dropZone)"" ItemDropped=""@ItemDropped"" Flex=""Flex.Wrap.Grow.Is1"">
    <ChildContent>
        @for ( int i = 1; i < 4; i++ )
        {
            var dropzone = i.ToString();

            <DropZone TItem=""DropItem"" Name=""@dropzone"" AllowReorder Padding=""Padding.Is3"" Margin=""Margin.Is3"" Flex=""Flex.Grow.Is1"">
                <Heading Size=""HeadingSize.Is4"" Margin=""Margin.Is3.FromBottom"">Drop Zone @dropzone</Heading>
            </DropZone>
        }
    </ChildContent>
    <ItemTemplate>
        <Card Shadow=""Shadow.Default"" Margin=""Margin.Is3.OnY"">
            <CardBody>
                @context.Name
            </CardBody>
        </Card>
    </ItemTemplate>
</DropContainer>
@code {
    public class DropItem
    {
        public string Name { get; init; }

        public string Group { get; set; }
    }

    private List<DropItem> items = new()
    {
        new DropItem() { Name = ""Item 1"", Group = ""1"" },
        new DropItem() { Name = ""Item 2"", Group = ""1"" },
        new DropItem() { Name = ""Item 3"", Group = ""1"" },
        new DropItem() { Name = ""Item 4"", Group = ""2"" },
        new DropItem() { Name = ""Item 5"", Group = ""2"" },
    };

    private Task ItemDropped( DraggableDroppedEventArgs<DropItem> dropItem )
    {
        dropItem.Item.Group = dropItem.DropZoneName;
        return Task.CompletedTask;
    }
}";

        public const string DropdownExample = @"<Dropdown>
    <DropdownToggle Color=""Color.Primary"">
        Dropdown
    </DropdownToggle>
    <DropdownMenu>
        <DropdownItem>Action</DropdownItem>
        <DropdownDivider />
        <DropdownItem>Another Action</DropdownItem>
    </DropdownMenu>
</Dropdown>";

        public const string DropdownScrollMenuExample = @"<Dropdown Display=""Display.InlineBlock"">
    <DropdownToggle Color=""Color.Primary"">Menu</DropdownToggle>
    <DropdownMenu MaxMenuHeight=""100px"">
        <DropdownItem>Action</DropdownItem>
        <DropdownItem>Action 2</DropdownItem>
        <DropdownItem>Action 3</DropdownItem>
        <DropdownDivider />
        <DropdownItem>Another Action</DropdownItem>
        <DropdownItem>Another Action 2</DropdownItem>
    </DropdownMenu>
</Dropdown>";

        public const string NestedDropdownDirectionExample = @"<Dropdown>
    <DropdownToggle Color=""Color.Primary"">Level 1</DropdownToggle>
    <DropdownMenu>
        <DropdownItem>Item 1.1</DropdownItem>
        <Dropdown Direction=""Direction.Up"">
            <DropdownToggle>Level 2</DropdownToggle>
            <DropdownMenu>
                <DropdownItem>Item 2.1</DropdownItem>
                <DropdownItem>Item 2.2</DropdownItem>
                <Dropdown Direction=""Direction.Down"">
                    <DropdownToggle>Level 3</DropdownToggle>
                    <DropdownMenu>
                        <DropdownItem>Item 3.1</DropdownItem>
                        <DropdownItem>Item 3.2</DropdownItem>
                        <Dropdown Direction=""Direction.Start"">
                            <DropdownToggle>Level 4</DropdownToggle>
                            <DropdownMenu>
                                <DropdownItem>Item 4.1</DropdownItem>
                                <DropdownItem>Item 4.2</DropdownItem>
                            </DropdownMenu>
                        </Dropdown>
                    </DropdownMenu>
                </Dropdown>
            </DropdownMenu>
        </Dropdown>
    </DropdownMenu>
</Dropdown>";

        public const string NestedDropdownExample = @"<Dropdown>
    <DropdownToggle Color=""Color.Primary"">Level 1</DropdownToggle>
    <DropdownMenu>
        <DropdownItem>Item 1.1</DropdownItem>
        <Dropdown>
            <DropdownToggle>Level 2</DropdownToggle>
            <DropdownMenu>
                <DropdownItem>Item 2.1</DropdownItem>
                <DropdownItem>Item 2.2</DropdownItem>
                <Dropdown>
                    <DropdownToggle>Level 3</DropdownToggle>
                    <DropdownMenu>
                        <DropdownItem>Item 3.1</DropdownItem>
                        <DropdownItem>Item 3.2</DropdownItem>
                        <Dropdown>
                            <DropdownToggle>Level 4</DropdownToggle>
                            <DropdownMenu>
                                <DropdownItem>Item 4.1</DropdownItem>
                                <DropdownItem>Item 4.2</DropdownItem>
                            </DropdownMenu>
                        </Dropdown>
                    </DropdownMenu>
                </Dropdown>
            </DropdownMenu>
        </Dropdown>
    </DropdownMenu>
</Dropdown>";

        public const string ShowMenuExample = @"<Dropdown @ref=""dropdown"" Display=""Display.InlineBlock"">
    <DropdownToggle Color=""Color.Primary"">Menu</DropdownToggle>
    <DropdownMenu>
        <DropdownItem>Action</DropdownItem>
        <DropdownDivider />
        <DropdownItem>Another Action</DropdownItem>
    </DropdownMenu>
</Dropdown>

<Button Clicked=""@ShowMenu"" Color=""Color.Secondary"">Show Menu</Button>
@code {
    Dropdown dropdown;

    Task ShowMenu()
    {
        return dropdown.Show();
    }
}";

        public const string SplitDropdownExample = @"<Dropdown>
    <Button Color=""Color.Primary"">Split Dropdown</Button>
    <DropdownToggle Color=""Color.Primary"" Split />
    <DropdownMenu>
        <DropdownItem>Action</DropdownItem>
        <DropdownDivider />
        <DropdownItem>Another Action</DropdownItem>
    </DropdownMenu>
</Dropdown>";

        public const string BasicFieldExample = @"<Field>
    <TextEdit Placeholder=""Name"" />
</Field>";

        public const string BasicFieldsExample = @"<Fields>
    <Field ColumnSize=""ColumnSize.Is6.OnDesktop"">
        <FieldLabel>City</FieldLabel>
        <TextEdit />
    </Field>
    <Field ColumnSize=""ColumnSize.Is4.OnDesktop"">
        <FieldLabel>State</FieldLabel>
        <Select TValue=""string"">
        </Select>
    </Field>
    <Field ColumnSize=""ColumnSize.Is2.OnDesktop"">
        <FieldLabel>Zip</FieldLabel>
        <TextEdit />
    </Field>
</Fields>";

        public const string FieldHiddenExample = @"<Field Visibility=""Visibility.Invisible"">
    <TextEdit />
</Field>";

        public const string FieldWithDisabledExample = @"<Field>
    <FieldLabel>Disabled</FieldLabel>
    <TextEdit Text=""Value"" Disabled />
</Field>";

        public const string FieldWithHelpExample = @"<Fields>
    <Field>
        <FieldLabel>Phone number</FieldLabel>
        <TextEdit>
            <FieldHelp>Include country and area prefixes</FieldHelp>
        </TextEdit>
    </Field>
    <Field>
        <FieldLabel>Password</FieldLabel>
        <TextEdit>
            <FieldHelp>Password strength: <Text TextColor=""TextColor.Danger"">weak</Text></FieldHelp>
        </TextEdit>
    </Field>
</Fields>";

        public const string FieldWithLabelExample = @"<Field>
    <FieldLabel>Email address</FieldLabel>
    <TextEdit Placeholder=""Enter email"" />
</Field>";

        public const string FieldWithReadOnlyExample = @"<Field>
    <FieldLabel>Read-Only</FieldLabel>
    <TextEdit Text=""Value"" ReadOnly />
</Field>";

        public const string HorizontalFieldExample = @"<Field Horizontal>
    <FieldLabel ColumnSize=""ColumnSize.Is2"">Name</FieldLabel>
    <FieldBody ColumnSize=""ColumnSize.Is10"">
        <TextEdit Placeholder=""Some text value..."" />
    </FieldBody>
</Field>
<Field Horizontal>
    <FieldLabel ColumnSize=""ColumnSize.Is2"">Check me</FieldLabel>
    <FieldBody ColumnSize=""ColumnSize.Is10"" Margin=""Margin.IsAuto"">
        <Check TValue=""bool"" />
    </FieldBody>
</Field>";

        public const string FigureExample = @"<Figure Size=""FigureSize.Is256x256"">
    <FigureImage Source=""img/empty-256x256.png"" AlternateText=""empty-256x256"" />
    <FigureCaption>A caption for the above image.</FigureCaption>
</Figure>";

        public const string FigureRoundedExample = @"<Figure Size=""FigureSize.Is256x256"">
    <FigureImage Source=""img/empty-256x256.png"" AlternateText=""empty-256x256"" Rounded />
    <FigureCaption>A caption for the above image.</FigureCaption>
</Figure>";

        public const string DirectoryFileEditExample = @"<Field>
    <FileEdit Changed=""@OnChanged"" Directory />
</Field>

@code {
    Task OnChanged( FileChangedEventArgs e )
    {
        return Task.CompletedTask;
    }
}";

        public const string ExtensionsLimitFileEditExample = @"<!-- Accept all image formats by IANA media type wildcard-->
<Field>
    <FileEdit Filter=""image/*"" />
</Field>

<!-- Accept specific image formats by IANA type -->
<Field>
    <FileEdit Filter=""image/jpeg, image/png, image/gif"" />
</Field>

<!-- Accept specific image formats by extension -->
<Field>
    <FileEdit Filter="".jpg, .png, .gif"" />
</Field>";

        public const string FileEditShowPickerExample = @"<Field>
    <Button Color=""Color.Primary"" Clicked=""@(()=>fileEditRef.ShowPicker())"">
        Show Picker
    </Button>
</Field>
<Field>
    <FileEdit @ref=""@fileEditRef"" />
</Field>

@code {
    FileEdit fileEditRef;
}";

        public const string FilePickerCustomExample = @"@using System.IO

<Field>
    <FilePicker @ref=""filePickerCustom""
                Multiple
                Upload=""OnFileUpload""
                ShowMode=""FilePickerShowMode.List"">
        <FileTemplate>
            <Div Flex=""Flex.JustifyContent.Between"">
                <Div>
                    <Heading Size=""HeadingSize.Is5"">@context.File.Name</Heading>
                    <Paragraph>@FilePicker.GetFileSizeReadable(context.File)</Paragraph>
                </Div>
                <Div>
                    @if ( context.File.Status == FileEntryStatus.Ready )
                    {
                        <Icon TextColor=""TextColor.Primary"" Name=""IconName.FileUpload"" />
                    }
                    else if ( context.File.Status == FileEntryStatus.Uploading )
                    {
                        <Icon TextColor=""TextColor.Warning"" Name=""IconName.Bolt"" />
                    }
                    else if ( context.File.Status == FileEntryStatus.Uploaded )
                    {
                        <Icon TextColor=""TextColor.Success"" Name=""IconName.CheckCircle"" />
                    }
                    else if ( context.File.Status == FileEntryStatus.Error )
                    {
                        <Icon TextColor=""TextColor.Danger"" Name=""IconName.TimesCircle"" />
                    }
                </Div>
            </Div>
            <Divider Margin=""Margin.Is0"" />
        </FileTemplate>
        <ButtonsTemplate>
            <Progress Value=""@filePickerCustom.GetProgressPercentage()"" />
            <Buttons>
                <Button Clicked=""@context.Clear"" Color=""Color.Warning""><Icon Name=""IconName.Clear"" /></Button>
                <Button Clicked=""@context.Upload"" Color=""Color.Primary""><Icon Name=""IconName.FileUpload"" /></Button>
            </Buttons>
        </ButtonsTemplate>
    </FilePicker>
</Field>

@code {
    private FilePicker filePickerCustom;

    async Task OnFileUpload( FileUploadEventArgs e )
    {
        try
        {
            using ( MemoryStream result = new MemoryStream() )
            {
                await e.File.OpenReadStream( long.MaxValue ).CopyToAsync( result ) ;
            }
        }
        catch ( Exception exc )
        {
            Console.WriteLine( exc.Message );
        }
        finally
        {
            this.StateHasChanged();
        }
    }
}";

        public const string FilePickerDirectoryExample = @"@using System.IO

<Field>
    <FilePicker Directory Multiple Upload=""OnFileUpload"" ShowMode=""FilePickerShowMode.List"" />
</Field>

@code {
    async Task OnFileUpload( FileUploadEventArgs e )
    {
        try
        {
            using ( MemoryStream result = new MemoryStream() )
            {
                await e.File.OpenReadStream( long.MaxValue ).CopyToAsync( result );
            }
        }
        catch ( Exception exc )
        {
            Console.WriteLine( exc.Message );
        }
        finally
        {
            this.StateHasChanged();
        }
    }
}";

        public const string FilePickerDropdownExample = @"@using System.IO

<Field>
    <FilePicker Multiple Upload=""OnFileUpload"" ShowMode=""FilePickerShowMode.Dropdown"" />
</Field>

@code {
    string fileContent;

    async Task OnFileUpload( FileUploadEventArgs e )
    {
        try
        {
            // A stream is going to be the destination stream we're writing to.
            using ( var stream = new MemoryStream() )
            {
                // Here we're telling the FileEdit where to write the upload result
                await e.File.WriteToStreamAsync( stream );

                // Once we reach this line it means the file is fully uploaded.
                // In this case we're going to offset to the beginning of file
                // so we can read it.
                stream.Seek( 0, SeekOrigin.Begin );

                // Use the stream reader to read the content of uploaded file,
                // in this case we can assume it is a textual file.
                using ( var reader = new StreamReader( stream ) )
                {
                    fileContent = await reader.ReadToEndAsync();
                }
            }
        }
        catch ( Exception exc )
        {
            Console.WriteLine( exc.Message );
        }
        finally
        {
            this.StateHasChanged();
        }
    }
}";

        public const string FilePickerListExample = @"@using System.IO

<Field>
    <FilePicker Multiple Upload=""OnFileUpload"" ShowMode=""FilePickerShowMode.List"" />
</Field>

@code {

    async Task OnFileUpload( FileUploadEventArgs e )
    {
        try
        {
            using ( MemoryStream result = new MemoryStream() )
            {
                await e.File.OpenReadStream( long.MaxValue ).CopyToAsync( result );
            }
        }
        catch ( Exception exc )
        {
            Console.WriteLine( exc.Message );
        }
        finally
        {
            this.StateHasChanged();
        }
    }
}";

        public const string MultipleDirectoryFileEditExample = @"<Field>
    <FileEdit Changed=""@OnChanged"" Directory Multiple />
</Field>

@code {
    Task OnChanged( FileChangedEventArgs e )
    {
        return Task.CompletedTask;
    }
}";

        public const string MultipleFileEditExample = @"<Field>
    <FileEdit Changed=""@OnChanged"" Multiple />
</Field>

@code {
    Task OnChanged( FileChangedEventArgs e )
    {
        return Task.CompletedTask;
    }
}";

        public const string OpenReadStreamFileEditExample = @"@using System.IO

<Field>
    <FileEdit Changed=""@OnChanged"" Written=""@OnWritten"" Progressed=""@OnProgressed"" />
</Field>

@code {
    async Task OnChanged( FileChangedEventArgs e )
    {
        try
        {
            var file = e.Files.FirstOrDefault();
            if ( file == null )
            {
                return;
            }

            using ( MemoryStream result = new MemoryStream() )
            {
                await file.OpenReadStream( long.MaxValue ).CopyToAsync( result );
            }
        }
        catch ( Exception exc )
        {
            Console.WriteLine( exc.Message );
        }
        finally
        {
            this.StateHasChanged();
        }
    }

    void OnWritten( FileWrittenEventArgs e )
    {
        Console.WriteLine( $""File: {e.File.Name} Position: {e.Position} Data: {Convert.ToBase64String( e.Data )}"" );
    }

    void OnProgressed( FileProgressedEventArgs e )
    {
        Console.WriteLine( $""File: {e.File.Name} Progress: {e.Percentage}"" );
    }
}";

        public const string ResetFileEditExample = @"<Field>
    <FileEdit @ref=""@fileEdit"" AutoReset=""false"" Changed=""@OnChanged"" />
</Field>
<Field>
    <Button Color=""Color.Primary"" Clicked=""Reset"">Reset</Button>
</Field>

@code {
    FileEdit fileEdit;

    Task OnChanged(FileChangedEventArgs e)
    {
        return Task.CompletedTask;
    }

    Task Reset()
    {
        return fileEdit.Reset().AsTask();
    }
}";

        public const string SingleFileEditExample = @"<Field>
    <FileEdit Changed=""@OnChanged"" />
</Field>

@code {
    Task OnChanged( FileChangedEventArgs e )
    {
        return Task.CompletedTask;
    }
}";

        public const string WriteToStreamFileEditExample = @"@using System.IO

<Field>
    <FileEdit Changed=""@OnChanged"" Written=""@OnWritten"" Progressed=""@OnProgressed"" />
</Field>

@code {
    string fileContent;

    async Task OnChanged( FileChangedEventArgs e )
    {
        try
        {
            foreach ( var file in e.Files )
            {
                // A stream is going to be the destination stream we're writing to.
                using ( var stream = new MemoryStream() )
                {
                    // Here we're telling the FileEdit where to write the upload result
                    await file.WriteToStreamAsync( stream );

                    // Once we reach this line it means the file is fully uploaded.
                    // In this case we're going to offset to the beginning of file
                    // so we can read it.
                    stream.Seek( 0, SeekOrigin.Begin );

                    // Use the stream reader to read the content of uploaded file,
                    // in this case we can assume it is a textual file.
                    using ( var reader = new StreamReader( stream ) )
                    {
                        fileContent = await reader.ReadToEndAsync();
                    }
                }
            }
        }
        catch ( Exception exc )
        {
            Console.WriteLine( exc.Message );
        }
        finally
        {
            this.StateHasChanged();
        }
    }

    void OnWritten( FileWrittenEventArgs e )
    {
        Console.WriteLine( $""File: {e.File.Name} Position: {e.Position} Data: {Convert.ToBase64String( e.Data )}"" );
    }

    void OnProgressed( FileProgressedEventArgs e )
    {
        Console.WriteLine( $""File: {e.File.Name} Progress: {e.Percentage}"" );
    }
}";

        public const string BasicFocusTrapExample = @"<Card>
    <CardBody>
        <Switch TValue=""bool"" @bind-Checked=""@focusTrapActive"">Active</Switch>
    </CardBody>
    <CardBody>
        <FocusTrap Active=""@focusTrapActive"">
            <Field Horizontal>
                <FieldLabel ColumnSize=""ColumnSize.IsFull.OnTablet.Is2.OnDesktop"">First Name</FieldLabel>
                <FieldBody ColumnSize=""ColumnSize.IsFull.OnTablet.Is10.OnDesktop"">
                    <TextEdit Autofocus />
                </FieldBody>
            </Field>
            <Field Horizontal>
                <FieldLabel ColumnSize=""ColumnSize.IsFull.OnTablet.Is2.OnDesktop"">Last Name</FieldLabel>
                <FieldBody ColumnSize=""ColumnSize.IsFull.OnTablet.Is10.OnDesktop"">
                    <TextEdit />
                </FieldBody>
            </Field>
            <Field Horizontal>
                <FieldLabel ColumnSize=""ColumnSize.IsFull.OnTablet.Is2.OnDesktop"">Address</FieldLabel>
                <FieldBody ColumnSize=""ColumnSize.IsFull.OnTablet.Is10.OnDesktop"">
                    <TextEdit />
                </FieldBody>
            </Field>
        </FocusTrap>
    </CardBody>
</Card>

@code {
    bool focusTrapActive = false;
}";

        public const string BasicContainerExample = @"<Container>
    <Alert Color=""Color.Primary"" Visible>
        Suspendisse vel quam malesuada, aliquet sem sit amet, fringilla elit. Morbi tempor tincidunt tempor. Etiam id turpis viverra, vulputate sapien nec, varius sem. Curabitur ullamcorper fringilla eleifend. In ut eros hendrerit est consequat posuere et at velit.
    </Alert>
</Container>";

        public const string BasicGridExample = @"<Row>
    <Column ColumnSize=""ColumnSize.Is12"">
        <Alert Color=""Color.Primary"" Visible>
            Is12
        </Alert>
    </Column>
</Row>
<Row>
    <Column ColumnSize=""ColumnSize.Is8"">
        <Alert Color=""Color.Primary"" Visible>
            Is8
        </Alert>
    </Column>
    <Column ColumnSize=""ColumnSize.Is4"">
        <Alert Color=""Color.Secondary"" Visible>
            Is4
        </Alert>
    </Column>
</Row>";

        public const string ContainerBreakpointExample = @"<Container Breakpoint=""Breakpoint.Tablet"">
    <Alert Color=""Color.Primary"" Visible>
        100% wide until tablet breakpoint
    </Alert>
</Container>
<Container Breakpoint=""Breakpoint.Desktop"">
    <Alert Color=""Color.Primary"" Visible>
        100% wide until desktop breakpoint
    </Alert>
</Container>
<Container Breakpoint=""Breakpoint.Widescreen"">
    <Alert Color=""Color.Primary"" Visible>
        100% wide until widescreen breakpoint
    </Alert>
</Container>
<Container Breakpoint=""Breakpoint.FullHD"">
    <Alert Color=""Color.Primary"" Visible>
        100% wide until full-hd breakpoint
    </Alert>
</Container>";

        public const string ContainerFluidExample = @"<Container Fluid>
    <Alert Color=""Color.Primary"" Visible>
        Suspendisse vel quam malesuada, aliquet sem sit amet, fringilla elit. Morbi tempor tincidunt tempor. Etiam id turpis viverra, vulputate sapien nec, varius sem. Curabitur ullamcorper fringilla eleifend. In ut eros hendrerit est consequat posuere et at velit.
    </Alert>
</Container>";

        public const string GridGutterExample = @"<Row HorizontalGutter=""32"" VerticalGutter=""16"">
    <Column ColumnSize=""ColumnSize.Is8"">
        <Alert Color=""Color.Primary"" Visible>
            I have padding
        </Alert>
    </Column>
    <Column ColumnSize=""ColumnSize.Is4"">
        <Alert Color=""Color.Secondary"" Visible>
            I also have padding
        </Alert>
    </Column>
</Row>";

        public const string GridOffsetExample = @"<Row>
    <Column ColumnSize=""ColumnSize.Is4"">
        <Alert Color=""Color.Primary"" Visible>
            Is4
        </Alert>
    </Column>
    <Column ColumnSize=""ColumnSize.Is4.WithOffset"">
        <Alert Color=""Color.Primary"" Visible>
            Is4.WithOffset
        </Alert>
    </Column>
</Row>
<Row>
    <Column ColumnSize=""ColumnSize.Is3.Is3.WithOffset"">
        <Alert Color=""Color.Primary"" Visible>
            Is3.Is3.WithOffset
        </Alert>
    </Column>
    <Column ColumnSize=""ColumnSize.Is3.Is3.WithOffset"">
        <Alert Color=""Color.Primary"" Visible>
            Is3.Is3.WithOffset
        </Alert>
    </Column>
</Row>";

        public const string BasicHighlighterExample = @"<Field>
    <FieldLabel>Search value</FieldLabel>
    <FieldBody>
        <TextEdit @bind-Text=""@searchValue"" />
    </FieldBody>
</Field>

<ListGroup>
    @foreach ( var sentence in sentences )
    {
        <ListGroupItem @key=""sentence"">
            <Highlighter Text=""@sentence"" HighlightedText=""@searchValue"" />
        </ListGroupItem>
    }
</ListGroup>
@code {
    string searchValue = ""item"";

    IEnumerable<string> sentences = new List<string>
    {
        ""This is the first item"",
        ""This is the second item"",
        ""This is the third item""
    };
}";

        public const string DynamicHighlighterExample = @"<Fields>
    <Field>
        <FieldLabel>Search value</FieldLabel>
        <FieldBody>
            <TextEdit @bind-Text=""@searchValue"" />
        </FieldBody>
    </Field>
    <Field>
        <FieldLabel>Until Next Boundary</FieldLabel>
        <FieldBody>
            <Switch @bind-Checked=""@untilNextBoundary""></Switch>
        </FieldBody>
    </Field>
    <Field>
        <FieldLabel>Case Sensitive</FieldLabel>
        <FieldBody>
            <Switch @bind-Checked=""@caseSensitive""></Switch>
        </FieldBody>
    </Field>
</Fields>

<Card>
    <CardBody>
        <Highlighter Text=""@sentence"" HighlightedText=""@searchValue"" UntilNextBoundary=""@untilNextBoundary"" CaseSensitive=""@caseSensitive"" />
    </CardBody>
</Card>
@code {
    string searchValue = ""y"";
    bool untilNextBoundary;
    bool caseSensitive;

    string sentence = ""\""There will be no foolish wand-waving or silly incantations in this class. As such, I don't expect many of you to appreciate the subtle science and exact art that is potion-making. However, for those select few who possess the predisposition, I can teach you how to bewitch the mind and ensnare the senses. I can tell you how to bottle fame, brew glory, and even put a stopper in death. Then again, maybe some of you have come to Hogwarts in possession of abilities so formidable that you feel confident enough to not pay attention!\"" â€” Severus Snape"";
}";

        public const string AliasInputMaskExample = @"<InputMask Alias=""datetime"" InputFormat=""dd/mm/yyyy"" OutputFormat=""ddmmyyyy"" />";

        public const string BasicInputMaskExample = @"<InputMask Mask=""99-9999999"" />";

        public const string BasicJumbotronExample = @"<Jumbotron Background=""Background.Light"" Margin=""Margin.Is4.FromBottom"">
    <JumbotronTitle Size=""JumbotronTitleSize.Is4"">Hello, world!</JumbotronTitle>
    <JumbotronSubtitle>
        This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured content or information.
    </JumbotronSubtitle>
    <Divider></Divider>
    <Paragraph>
        It uses utility classes for typography and spacing to space content out within the larger container.
    </Paragraph>
</Jumbotron>";

        public const string BasicLayoutExample = @"<Layout>
    <LayoutHeader>
        Header
    </LayoutHeader>
    <LayoutContent>
        Content
    </LayoutContent>
    <LayoutFooter>
        Footer
    </LayoutFooter>
</Layout>";

        public const string BasicLayoutStyledExample = @"<Layout TextAlignment=""TextAlignment.Center"" Style=""height: 300px;"">
    <LayoutHeader Style=""background: #7dbcea; color: white; line-height: 60px;"">
        Header
    </LayoutHeader>
    <LayoutContent Style=""background: rgba(16, 142, 233, 1); color: white; line-height: 120px;"">
        Content
    </LayoutContent>
    <LayoutFooter Style=""background: #7dbcea; color: white; line-height: 60px;"">
        Footer
    </LayoutFooter>
</Layout>";

        public const string LayoutWithSiderAndTopHeaderExample = @"<Layout>
    <LayoutHeader Fixed>
        Header
    </LayoutHeader>
    <Layout Sider>
        <LayoutSider>
            <LayoutSiderContent>
                Sider
            </LayoutSiderContent>
        </LayoutSider>
        <Layout>
            <LayoutContent>
                Content
            </LayoutContent>
        </Layout>
    </Layout>
</Layout>";

        public const string LayoutWithSiderAndTopHeaderStyledExample = @"<Layout TextAlignment=""TextAlignment.Center"">
    <LayoutHeader Fixed Style=""background: #7dbcea; color: white; line-height: 60px; z-index: 10;"">
        Header
    </LayoutHeader>
    <Layout Sider Style=""height: 240px;"">
        <LayoutSider Style=""flex: 0 0 100px; width: 100px; max-width: 100px; min-width: 100px; background: #3ba0e9; color: white; line-height: 120px;"">
            <LayoutSiderContent>
                Sider
            </LayoutSiderContent>
        </LayoutSider>
        <Layout>
            <LayoutContent Style=""background: rgba(16, 142, 233, 1); color: white; line-height: 120px;"">
                Content
            </LayoutContent>
        </Layout>
    </Layout>
</Layout>";

        public const string LayoutWithSiderExample = @"<Layout Sider>
    <LayoutSider>
        <LayoutSiderContent>
            Sider
        </LayoutSiderContent>
    </LayoutSider>
    <Layout>
        <LayoutHeader Fixed>
            Header
        </LayoutHeader>
        <LayoutContent>
            Content
        </LayoutContent>
    </Layout>
</Layout>";

        public const string LayoutWithSiderStyledExample = @"<Layout Sider TextAlignment=""TextAlignment.Center"">
    <LayoutSider Style=""flex: 0 0 100px; width: 100px; max-width: 100px; min-width: 100px; background: #3ba0e9; color: white; line-height: 120px;"">
        <LayoutSiderContent>
            Sider
        </LayoutSiderContent>
    </LayoutSider>
    <Layout Style=""height: 300px;"">
        <LayoutHeader Fixed Style=""background: #7dbcea; color: white; line-height: 60px; z-index: 10;"">
            Header
        </LayoutHeader>
        <LayoutContent Style=""background: rgba(16, 142, 233, 1); color: white; line-height: 120px;"">
            Content
        </LayoutContent>
    </Layout>
</Layout>";

        public const string AnchorLinkExample = @"<Link To=""#b-docs-page-title"">
    Link
</Link>";

        public const string BasicLinkExample = @"<Link To=""docs"">
    Link
</Link>";

        public const string CustomLinkTargetExample = @"<Link To=""some-url"" Target=""@(""example"")"">
    This link can lead to iframe
</Link>

<iframe name=""example"" src=""init_fixed.html""></iframe>";

        public const string LinkTargetExample = @"<Link To=""https://github.com/Megabit/Blazorise"" Target=""Target.Blank"">
    Blazorise
</Link>";

        public const string BasicListGroupExample = @"<ListGroup>
    <ListGroupItem>An item</ListGroupItem>
    <ListGroupItem>A second item</ListGroupItem>
    <ListGroupItem>A third item</ListGroupItem>
    <ListGroupItem>A fourth item</ListGroupItem>
    <ListGroupItem Disabled>A disabled item</ListGroupItem>
</ListGroup>";

        public const string ListGroupBadgesExample = @"<ListGroup Flush>
    <ListGroupItem Flex=""Flex.JustifyContent.Between.AlignItems.Center"">
        A list item
        <Badge Color=""Color.Primary"" Pill>14</Badge>
    </ListGroupItem>
    <ListGroupItem Flex=""Flex.JustifyContent.Between.AlignItems.Center"">
        A second list item
        <Badge Color=""Color.Primary"" Pill>2</Badge>
    </ListGroupItem>
    <ListGroupItem Flex=""Flex.JustifyContent.Between.AlignItems.Center"">
        A third list item
        <Badge Color=""Color.Primary"" Pill>1</Badge>
    </ListGroupItem>
</ListGroup>";

        public const string ListGroupContextualExample = @"<ListGroup>
    <ListGroupItem Color=""Color.Default"">Default</ListGroupItem>
    <ListGroupItem Color=""Color.Primary"">Primary</ListGroupItem>
    <ListGroupItem Color=""Color.Secondary"">Secondary</ListGroupItem>
    <ListGroupItem Color=""Color.Success"">Success</ListGroupItem>
    <ListGroupItem Color=""Color.Danger"">Danger</ListGroupItem>
    <ListGroupItem Color=""Color.Warning"">Warning</ListGroupItem>
    <ListGroupItem Color=""Color.Info"">Info</ListGroupItem>
    <ListGroupItem Color=""Color.Light"">Light</ListGroupItem>
    <ListGroupItem Color=""Color.Dark"">Dark</ListGroupItem>
</ListGroup>";

        public const string ListGroupContextualSelectableExample = @"<ListGroup Mode=""ListGroupMode.Selectable"">
    <ListGroupItem Name=""none"" Color=""Color.Default"">Default</ListGroupItem>
    <ListGroupItem Name=""primary"" Color=""Color.Primary"">Primary</ListGroupItem>
    <ListGroupItem Name=""secondary"" Color=""Color.Secondary"">Secondary</ListGroupItem>
    <ListGroupItem Name=""success"" Color=""Color.Success"">Success</ListGroupItem>
    <ListGroupItem Name=""danger"" Color=""Color.Danger"">Danger</ListGroupItem>
    <ListGroupItem Name=""warning"" Color=""Color.Warning"">Warning</ListGroupItem>
    <ListGroupItem Name=""info"" Color=""Color.Info"">Info</ListGroupItem>
    <ListGroupItem Name=""light"" Color=""Color.Light"">Light</ListGroupItem>
    <ListGroupItem Name=""dark"" Color=""Color.Dark"">Dark</ListGroupItem>
</ListGroup>";

        public const string ListGroupCustomContentExample = @"<ListGroup Flush>
    <ListGroupItem>
        <Div Flex=""Flex.JustifyContent.Between"" Width=""Width.Is100"">
            <Heading Size=""HeadingSize.Is5"" Margin=""Margin.Is1.FromBottom"">List group item heading</Heading>
            <Small>3 days ago</Small>
        </Div>
        <Paragraph Margin=""Margin.Is1.FromBottom"">Some placeholder content in a paragraph.</Paragraph>
        <Small>And some small print.</Small>
    </ListGroupItem>
    <ListGroupItem>
        <Div Flex=""Flex.JustifyContent.Between"" Width=""Width.Is100"">
            <Heading Size=""HeadingSize.Is5"" Margin=""Margin.Is1.FromBottom"">List group item heading</Heading>
            <Small TextColor=""TextColor.Muted"">3 days ago</Small>
        </Div>
        <Paragraph Margin=""Margin.Is1.FromBottom"">Some placeholder content in a paragraph.</Paragraph>
        <Small TextColor=""TextColor.Muted"">And some muted small print.</Small>
    </ListGroupItem>
    <ListGroupItem>
        <Div Flex=""Flex.JustifyContent.Between"" Width=""Width.Is100"">
            <Heading Size=""HeadingSize.Is5"" Margin=""Margin.Is1.FromBottom"">List group item heading</Heading>
            <Small TextColor=""TextColor.Muted"">3 days ago</Small>
        </Div>
        <Paragraph Margin=""Margin.Is1.FromBottom"">Some placeholder content in a paragraph.</Paragraph>
        <Small TextColor=""TextColor.Muted"">And some muted small print.</Small>
    </ListGroupItem>
</ListGroup>";

        public const string ListGroupFlushExample = @"<ListGroup Flush>
    <ListGroupItem>An item</ListGroupItem>
    <ListGroupItem>A second item</ListGroupItem>
    <ListGroupItem>A third item</ListGroupItem>
    <ListGroupItem>A fourth item</ListGroupItem>
    <ListGroupItem Disabled>A disabled item</ListGroupItem>
</ListGroup>";

        public const string ListGroupSelectableExample = @"<ListGroup Mode=""ListGroupMode.Selectable"" @bind-SelectedItem=""selectedItem"">
    <ListGroupItem Name=""first"">An item</ListGroupItem>
    <ListGroupItem Name=""second"">A second item</ListGroupItem>
    <ListGroupItem Name=""third"">A third item</ListGroupItem>
    <ListGroupItem Name=""fourth"">A fourth item</ListGroupItem>
    <ListGroupItem Name=""fifth"" Disabled>A disabled item</ListGroupItem>
</ListGroup>
@code {
    private string selectedItem = ""first"";
}";

        public const string BasicMemoEditExample = @"<MemoEdit Rows=""5"" />";

        public const string MemoEditAutoSizeExample = @"<MemoEdit Text=""@loremipsum"" AutoSize />

@code {
    string loremipsum = @""Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec vel semper libero. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae.

Proin volutpat, sapien ut facilisis ultricies, eros purus blandit velit, at ultrices mi libero quis ante. Curabitur scelerisque metus et libero convallis consequat. Pellentesque feugiat pulvinar nisl sed pellentesque."";
}";

        public const string MemoEditTabExample = @"<MemoEdit Rows=""5"" ReplaceTab TabSize=""4"" />";

        public const string MemoEditTextChangedModeExample = @"public void ConfigureServices( IServiceCollection services )
{
  services
    .AddBlazorise( options =>
    {
      options.Immediate = false;
    } );
}";

        public const string MemoEditTextDelayModeExample = @"public void ConfigureServices( IServiceCollection services )
{
  services
    .AddBlazorise( options =>
    {
      options.Debounce = true;
      options.DebounceInterval = 300;
    } );
}";

        public const string MemoEditWithBindExample = @"<MemoEdit @bind-Text=""@description"" />

@code{
    string description;
}";

        public const string MemoEditWithEventExample = @"<MemoEdit Text=""@description"" TextChanged=""@OnDescriptionChanged"" />

@code{
    string description;

    Task OnDescriptionChanged( string value )
    {
        description = value;

        return Task.CompletedTask;
    }
}";

        public const string BasicModalExample = @"<Button Color=""Color.Primary"" Clicked=""@ShowModal"">Show Modal</Button>

<Modal @ref=""modalRef"">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Employee edit</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Name</FieldLabel>
                <TextEdit Placeholder=""Enter name..."" />
            </Field>
            <Field>
                <FieldLabel>Surname</FieldLabel>
                <TextEdit Placeholder=""Enter surname..."" />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color=""Color.Secondary"" Clicked=""@HideModal"">Close</Button>
            <Button Color=""Color.Primary"" Clicked=""@HideModal"">Save Changes</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code{
    // reference to the modal component
    private Modal modalRef;

    private Task ShowModal()
    {
        return modalRef.Show();
    }

    private Task HideModal()
    {
        return modalRef.Hide();
    }
}";

        public const string ModalBindingExample = @"<Button Color=""Color.Primary"" Clicked=""@ShowModal"">Show Modal</Button>

<Span Margin=""Margin.Is3.FromStart"">Modal is visible: @modalVisible</Span>

<Modal @bind-Visible=""@modalVisible"">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Employee edit</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Name</FieldLabel>
                <TextEdit Placeholder=""Enter name..."" />
            </Field>
            <Field>
                <FieldLabel>Surname</FieldLabel>
                <TextEdit Placeholder=""Enter surname..."" />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color=""Color.Secondary"" Clicked=""@HideModal"">Close</Button>
            <Button Color=""Color.Primary"" Clicked=""@HideModal"">Save Changes</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code{
    private bool modalVisible;

    private Task ShowModal()
    {
        modalVisible = true;

        return Task.CompletedTask;
    }

    private Task HideModal()
    {
        modalVisible = false;

        return Task.CompletedTask;
    }
}";

        public const string ModalClosingExample = @"<Button Color=""Color.Primary"" Clicked=""@ShowModal"">Show Modal</Button>

<Modal @ref=""modalRef"" Closing=""@OnModalClosing"">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Closing modal</ModalTitle>
        </ModalHeader>
        <ModalBody>
            Click on the buttons to close the modal.
        </ModalBody>
        <ModalFooter>
            <Button Color=""Color.Secondary"" Clicked=""@CloseModal"">This will close the modal</Button>
            <Button Color=""Color.Primary"" Clicked=""@TryCloseModal"">This will not</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    // reference to the modal component
    private Modal modalRef;

    private bool cancelClose;

    private Task ShowModal()
    {
        return modalRef.Show();
    }

    private Task CloseModal()
    {
        cancelClose = false;

        return modalRef.Hide();
    }

    private Task TryCloseModal()
    {
        cancelClose = true;

        return modalRef.Hide();
    }

    private Task OnModalClosing( ModalClosingEventArgs e )
    {
        // just set Cancel to prevent modal from closing
        e.Cancel = cancelClose 
            || e.CloseReason != CloseReason.UserClosing;

        return Task.CompletedTask;
    }
}";

        public const string ModalFullscreenExample = @"<Button Color=""Color.Primary"" Clicked=""@ShowModal"">Show Modal</Button>

<Modal @ref=""modalRef"">
    <ModalContent Size=""ModalSize.Fullscreen"">
        <ModalHeader>
            <ModalTitle>Employee edit</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Name</FieldLabel>
                <TextEdit Placeholder=""Enter name..."" />
            </Field>
            <Field>
                <FieldLabel>Surname</FieldLabel>
                <TextEdit Placeholder=""Enter surname..."" />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color=""Color.Secondary"" Clicked=""@HideModal"">Close</Button>
            <Button Color=""Color.Primary"" Clicked=""@HideModal"">Save Changes</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code{
    // reference to the modal component
    private Modal modalRef;

    private Task ShowModal()
    {
        return modalRef.Show();
    }

    private Task HideModal()
    {
        return modalRef.Hide();
    }
}";

        public const string BasicNumericEditExample = @"<NumericEdit Value=""123"" />";

        public const string BasicNumericPickerExample = @"<NumericPicker Value=""123"" />";

        public const string NumericEditGenericExample = @"<NumericEdit TValue=""decimal?"" />";

        public const string NumericPickerCurrencyExample = @"<NumericPicker TValue=""decimal?"" CurrencySymbol=""$"" Value=""456"" />";

        public const string NumericPickerGenericExample = @"<NumericPicker TValue=""decimal?"" />";

        public const string NumericPickerIntegerExample = @"<NumericPicker @bind-Value=""@value"" />

@code{
    int value;
}";

        public const string NumericPickerMinMaxExample = @"<NumericPicker @bind-Value=""@value"" Min=""10"" Max=""20"" />

@code{
    decimal value = 15;
}";

        public const string NumericPickerMouseWheelExample = @"<NumericPicker @bind-Value=""@value"" ModifyValueOnWheel WheelOn=""NumericWheelOn.Hover"" />

@code {
    decimal value;
}";

        public const string NumericPickerStepExample = @"<NumericPicker @bind-Value=""@value"" Step=""10"" />

@code{
    decimal value;
}";

        public const string BasicPaginationExample = @"<Pagination>
    <PaginationItem Disabled=""@isActive.First()"" @onclick=""Previous"">
        <PaginationLink>
            <span aria-hidden=""true"">Â«</span>
        </PaginationLink>
    </PaginationItem>
    <PaginationItem Active=""@isActive[0]"">
        <PaginationLink Page=""1"" Clicked=""SetActive"">
            1
        </PaginationLink>
    </PaginationItem>
    <PaginationItem Active=""@isActive[1]"">
        <PaginationLink Page=""2"" Clicked=""SetActive"">
            2
        </PaginationLink>
    </PaginationItem>
    <PaginationItem Active=""@isActive[2]"">
        <PaginationLink Page=""3"" Clicked=""SetActive"">
            3
        </PaginationLink>
    </PaginationItem>
    <PaginationItem Disabled=""@isActive.Last()"" @onclick=""Next"">
        <PaginationLink>
            <span aria-hidden=""true"">Â»</span>
        </PaginationLink>
    </PaginationItem>
</Pagination>

@code
{
    private bool[] isActive = { false, true, false };

    private void Previous()
    {
        if (isActive[0])
            return;

        if (isActive[1])
        {
            SetActive(""1"");
            return;
        }

        if (isActive[2])
        {
            SetActive(""2"");
            return;
        }
    }

    private void Next()
    {
        if (isActive[0])
        {
            SetActive(""2"");
            return;
        }

        if (isActive[1])
        {
            SetActive(""3"");
            return;
        }

        if (isActive[2])
        {
            return;
        }
    }

    private void SetActive(string idx)
    {
        switch (idx)
        {
            case ""1"":
                isActive[0] = true;
                isActive[1] = false;
                isActive[2] = false;
                break;
            case ""2"":
                isActive[0] = false;
                isActive[1] = true;
                isActive[2] = false;
                break;
            case ""3"":
                isActive[0] = false;
                isActive[1] = false;
                isActive[2] = true;
                break;
            default:
                break;
        }

    }
}";

        public const string DynamicPaginationExample = @"<Pagination>
    <PaginationItem Disabled=""@IsPageNavigationDisabled(PREVIOUS)"" @onclick=""Previous"">
        <PaginationLink>
            <span aria-hidden=""true"">Â«</span>
        </PaginationLink>
    </PaginationItem>
    @{
        for (var i = 1; i <= pageItems; i++)
        {
            var pageNumberAsString = i.ToString();
            <PaginationItem @key=""pageNumberAsString"" Active=""@IsActive(pageNumberAsString)"">
                <PaginationLink Page=""@pageNumberAsString"" Clicked=""SetActive"">
                    @pageNumberAsString
                </PaginationLink>
            </PaginationItem>
        } 
    }
    <PaginationItem Disabled=""@IsPageNavigationDisabled(NEXT)"" @onclick=""Next"">
        <PaginationLink>
            <span aria-hidden=""true"">Â»</span>
        </PaginationLink>
    </PaginationItem>
</Pagination>

@code
{
    private const string PREVIOUS = ""previous"";
    private const string NEXT = ""next"";
    private string currentPage = ""2"";
    private int pageItems = 5;

    private bool IsActive(string page)
        => currentPage == page;

    private bool IsPageNavigationDisabled(string navigation )
    {
        if (navigation.Equals(PREVIOUS))
        {
            return currentPage.Equals(""1"");
        }
        else if (navigation.Equals(NEXT))
        {
            return currentPage.Equals(pageItems.ToString());
        }
        return false;
    }

    private void Previous()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if (currentPageAsInt > 1 )
        {
            currentPage = (currentPageAsInt - 1).ToString();
        }
    }

    private void Next()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if (currentPageAsInt < pageItems )
        {
            currentPage = (currentPageAsInt + 1).ToString();
        }
    }

    private void SetActive(string page)
        => currentPage = page;
}";

        public const string AnimatedProgressExample = @"<Progress Value=""75"" Animated Striped />";

        public const string BasicPageProgressExample = @"<PageProgress Visible Value=""25"" />";

        public const string BasicProgressExample = @"<Progress Value=""25"" />";

        public const string IndeterminatePageProgressExample = @"<PageProgress Visible />";

        public const string MultipleProgressExample = @"<Progress>
    <ProgressBar Value=""15"" />
    <ProgressBar Color=""Color.Success"" Value=""30"" />
    <ProgressBar Color=""Color.Info"" Value=""20"" />
</Progress>";

        public const string MultipleProgressHideValueExample = @"<Progress ShowValue=""false"">
    <ProgressBar Value=""15"" />
    <ProgressBar Color=""Color.Success"" Value=""30"" />
    <ProgressBar Color=""Color.Info"" Value=""20"" />
</Progress>";

        public const string BasicRadioGroupExample = @"<RadioGroup TValue=""string"" Name=""colors"">
    <Radio Value=""@(""red"")"">Red</Radio>
    <Radio Value=""@(""green"")"">Green</Radio>
    <Radio Value=""@(""blue"")"">Blue</Radio>
</RadioGroup>";

        public const string RadioGroupButtonsExample = @"<RadioGroup TValue=""string"" Name=""colors"" Buttons>
    <Radio Value=""@(""red"")"">Red</Radio>
    <Radio Value=""@(""green"")"">Green</Radio>
    <Radio Value=""@(""blue"")"">Blue</Radio>
</RadioGroup>";

        public const string RadioGroupWithBindExample = @"<RadioGroup TValue=""string"" Name=""colors"" @bind-CheckedValue=""@checkedValue"">
    <Radio Value=""@(""red"")"">Red</Radio>
    <Radio Value=""@(""green"")"">Green</Radio>
    <Radio Value=""@(""blue"")"">Blue</Radio>
</RadioGroup>

@code{
    string checkedValue = ""green"";
}";

        public const string RadioGroupWithEventExample = @"<RadioGroup TValue=""string""
            Name=""colors""
            CheckedValue=""@checkedValue""
            CheckedValueChanged=""@OnCheckedValueChanged"">
    <Radio Value=""@(""red"")"">Red</Radio>
    <Radio Value=""@(""green"")"">Green</Radio>
    <Radio Value=""@(""blue"")"">Blue</Radio>
</RadioGroup>

@code{
    string checkedValue = ""green"";

    Task OnCheckedValueChanged( string value )
    {
        checkedValue = value;

        return Task.CompletedTask;
    }
}";

        public const string StandaloneRadioExample = @"<Radio TValue=""string"" Group=""colors"" Value=""@(""red"")"">Red</Radio>
<Radio TValue=""string"" Group=""colors"" Value=""@(""green"")"">Green</Radio>
<Radio TValue=""string"" Group=""colors"" Value=""@(""blue"")"">Blue</Radio>";

        public const string BasicRatingExample = @"<Rating Color=""Color.Primary"" />";

        public const string RatingWithBindExample = @"<Rating Color=""Color.Primary"" @bind-SelectedValue=""@SelectedValue"" MaxValue=""10"" />

@code{
    int SelectedValue = 7;
}";

        public const string BasicRepeaterExample = @"<UnorderedList>
    <Repeater Items=""@items"" CollectionChanged=""@OnCollectionChanged"">
        <UnorderedListItem style=""@GetColor( context )"">@context</UnorderedListItem>
    </Repeater>
</UnorderedList>

@code{
    System.Collections.ObjectModel.ObservableCollection<int> items { get; } = new( Enumerable.Range( 1, 4 ) );

    Task OnCollectionChanged( System.Collections.Specialized.NotifyCollectionChangedEventArgs eventArgs )
    {
        // do something

        return Task.CompletedTask;
    }

    private static string GetColor( int number )
    {
        const string letters = ""0123456789ABCDEF"";

        var color = """";

        for ( var i = 0; i < 6; i++ )
        {
            color += letters[( 3 * number + i ) % letters.Length];
        }

        return $""color: #{color}"";
    }
}";

        public const string BasicSelectExample = @"<Select TValue=""int"">
    <SelectItem Value=""1"">One</SelectItem>
    <SelectItem Value=""2"">Two</SelectItem>
    <SelectItem Value=""3"">Three</SelectItem>
    <SelectItem Value=""4"">Four</SelectItem>
</Select>";

        public const string GroupSelectExample = @"<Select TValue=""int"">
    <SelectGroup Label=""Group 1"">
        <SelectItem Value=""1"">One</SelectItem>
        <SelectItem Value=""2"">Two</SelectItem>
    </SelectGroup>
    <SelectGroup Label=""Group 2"">
        <SelectItem Value=""3"">Three</SelectItem>
        <SelectItem Value=""4"">Four</SelectItem>
    </SelectGroup>
</Select>";

        public const string MultipleSelectExample = @"<Select TValue=""int"" Multiple>
    <SelectItem Value=""1"">One</SelectItem>
    <SelectItem Value=""2"">Two</SelectItem>
    <SelectItem Value=""3"">Three</SelectItem>
    <SelectItem Value=""4"">Four</SelectItem>
</Select>";

        public const string SelectWithBindExample = @"<Select @bind-SelectedValue=""@selectedValue"">
    <SelectItem Value=""1"">One</SelectItem>
    <SelectItem Value=""2"">Two</SelectItem>
    <SelectItem Value=""3"">Three</SelectItem>
    <SelectItem Value=""4"">Four</SelectItem>
</Select>

@code{
    int selectedValue;
}";

        public const string SelectWithEventExample = @"<Select TValue=""int"" SelectedValue=""@selectedValue"" SelectedValueChanged=""@OnSelectedValueChanged"">
    <SelectItem Value=""1"">One</SelectItem>
    <SelectItem Value=""2"">Two</SelectItem>
    <SelectItem Value=""3"">Three</SelectItem>
    <SelectItem Value=""4"">Four</SelectItem>
</Select>

@code{
    int selectedValue;

    Task OnSelectedValueChanged( int value )
    {
        selectedValue = value;
        Console.WriteLine( selectedValue );

        return Task.CompletedTask;
    }
}";

        public const string BasicSliderExample = @"<Slider TValue=""decimal"" Value=""25m"" Max=""100m"" />";

        public const string SliderMinMaxExample = @"<Paragraph>
    Current value: @value
</Paragraph>

<Field>
    <Slider @bind-Value=""@value"" Min=""20"" Max=""80"" />
</Field>

@code {
    int value = 60;
}";

        public const string SliderStepExample = @"<Paragraph>
    Current value: @value
</Paragraph>

<Field>
    <Slider @bind-Value=""@value"" Step=""5"" Max=""100"" />
</Field>

@code {
    int value = 40;
}";

        public const string BasicStepExample = @"<Steps SelectedStep=""@selectedStep"" SelectedStepChanged=""@OnSelectedStepChanged"">
    <Items>
        <Step Name=""step1"">Create campaign settings</Step>
        <Step Name=""step2"">Create an ad group</Step>
        <Step Name=""step3"">Create an add</Step>
        <Step Name=""step4"">
            <Marker>
                <Icon Name=""IconName.Flag"" />
            </Marker>
            <Caption>
                Finish
            </Caption>
        </Step>
    </Items>
    <Content>
        <StepPanel Name=""step1"">
            Content for step 1.
        </StepPanel>
        <StepPanel Name=""step2"">
            Content for step 2.
        </StepPanel>
        <StepPanel Name=""step3"">
            Content for step 3.
        </StepPanel>
        <StepPanel Name=""step4"">
            Content for finish.
        </StepPanel>
    </Content>
</Steps>
@code{
    string selectedStep = ""step1"";

    private Task OnSelectedStepChanged( string name )
    {
        selectedStep = name;

        return Task.CompletedTask;
    }
}";

        public const string StepNavigationAllowedExample = @"<Steps @ref=""stepsRef"" @bind-SelectedStep=""selectedStep"" NavigationAllowed=""NavigationAllowed"">
    <Items>
        <Step Name=""1"">Step 1</Step>
        <Step Name=""2"">Step 2</Step>
        <Step Name=""3"">Step 3</Step>
        <Step Name=""4"">Step 4</Step>
    </Items>
    <Content>
        <StepPanel Name=""1"">
            Step 1
        </StepPanel>
        <StepPanel Name=""2"">
            <Field>
                <FieldLabel>Email address</FieldLabel>
                <TextEdit @bind-Text=""email"" Placeholder=""Enter email"">
                    <FieldHelp>This field is required in order to procceed to the next step.</FieldHelp>
                </TextEdit>
            </Field>
        </StepPanel>
        <StepPanel Name=""3"">
            Step 3
        </StepPanel>
        <StepPanel Name=""4"">
            Step 4
        </StepPanel>
    </Content>
</Steps>
<Div Display=""Display.Flex"" Class=""justify-content-center"">
    <Button Color=""Color.Secondary"" Margin=""Margin.Is2.FromEnd"" Clicked=""() => stepsRef.PreviousStep()"">
        Previous
    </Button>
    <Button Color=""Color.Primary"" Clicked=""() => stepsRef.NextStep()"">
        Next
    </Button>
</Div>
@code {
    private Steps stepsRef;
    private string email;
    private string selectedStep = ""2"";

    private bool NavigationAllowed( StepNavigationContext context )
    {
        if ( context.CurrentStepIndex == 2 && context.NextStepIndex > 2 && !ValidationRule.IsEmail( email ) )
        {
            return false;
        }

        return true;
    }
}";

        public const string BasicSwitchExample = @"<Switch TValue=""bool"">Remember me</Switch>";

        public const string SwitchWithBindExample = @"<Switch TValue=""bool"" @bind-Checked=""@rememberMe"">Remember Me</Switch>

@code{
    bool rememberMe;
}";

        public const string SwitchWithEventExample = @"<Switch TValue=""bool"" Checked=""@rememberMe"" CheckedChanged=""@OnRememberMeChanged"">Remember Me</Switch>

@code{
    bool rememberMe;

    Task OnRememberMeChanged( bool value )
    {
        rememberMe = value;

        return Task.CompletedTask;
    }
}";

        public const string BasicTableExample = @"<Table>
    <TableHeader>
        <TableRow>
            <TableHeaderCell>#</TableHeaderCell>
            <TableHeaderCell>First Name</TableHeaderCell>
            <TableHeaderCell>Last Name</TableHeaderCell>
            <TableHeaderCell>Username</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        <TableRow>
            <TableRowHeader>1</TableRowHeader>
            <TableRowCell>Mark</TableRowCell>
            <TableRowCell>Otto</TableRowCell>
            <TableRowCell>@@mdo</TableRowCell>
        </TableRow>
        <TableRow>
            <TableRowHeader>2</TableRowHeader>
            <TableRowCell>Jacob</TableRowCell>
            <TableRowCell>Thornton</TableRowCell>
            <TableRowCell>@@fat</TableRowCell>
        </TableRow>
        <TableRow>
            <TableRowHeader>3</TableRowHeader>
            <TableRowCell>Larry</TableRowCell>
            <TableRowCell>the Bird</TableRowCell>
            <TableRowCell>@@twitter</TableRowCell>
        </TableRow>
    </TableBody>
</Table>";

        public const string TableBorderedExample = @"<Table Bordered>
    <TableHeader>
        <TableRow>
            <TableHeaderCell>#</TableHeaderCell>
            <TableHeaderCell>First Name</TableHeaderCell>
            <TableHeaderCell>Last Name</TableHeaderCell>
            <TableHeaderCell>Username</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        <TableRow>
            <TableRowHeader>1</TableRowHeader>
            <TableRowCell>Mark</TableRowCell>
            <TableRowCell>Otto</TableRowCell>
            <TableRowCell>@@mdo</TableRowCell>
        </TableRow>
        <TableRow>
            <TableRowHeader>2</TableRowHeader>
            <TableRowCell>Jacob</TableRowCell>
            <TableRowCell>Thornton</TableRowCell>
            <TableRowCell>@@fat</TableRowCell>
        </TableRow>
        <TableRow>
            <TableRowHeader>3</TableRowHeader>
            <TableRowCell>Larry</TableRowCell>
            <TableRowCell>the Bird</TableRowCell>
            <TableRowCell>@@twitter</TableRowCell>
        </TableRow>
    </TableBody>
</Table>";

        public const string TableBorderlessExample = @"<Table Borderless>
    <TableHeader>
        <TableRow>
            <TableHeaderCell>#</TableHeaderCell>
            <TableHeaderCell>First Name</TableHeaderCell>
            <TableHeaderCell>Last Name</TableHeaderCell>
            <TableHeaderCell>Username</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        <TableRow>
            <TableRowHeader>1</TableRowHeader>
            <TableRowCell>Mark</TableRowCell>
            <TableRowCell>Otto</TableRowCell>
            <TableRowCell>@@mdo</TableRowCell>
        </TableRow>
        <TableRow>
            <TableRowHeader>2</TableRowHeader>
            <TableRowCell>Jacob</TableRowCell>
            <TableRowCell>Thornton</TableRowCell>
            <TableRowCell>@@fat</TableRowCell>
        </TableRow>
        <TableRow>
            <TableRowHeader>3</TableRowHeader>
            <TableRowCell>Larry</TableRowCell>
            <TableRowCell>the Bird</TableRowCell>
            <TableRowCell>@@twitter</TableRowCell>
        </TableRow>
    </TableBody>
</Table>";

        public const string TableDarkHeaderExample = @"<Table>
    <TableHeader ThemeContrast=""ThemeContrast.Dark"">
        <TableRow>
            <TableHeaderCell>#</TableHeaderCell>
            <TableHeaderCell>First Name</TableHeaderCell>
            <TableHeaderCell>Last Name</TableHeaderCell>
            <TableHeaderCell>Username</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        <TableRow>
            <TableRowHeader>1</TableRowHeader>
            <TableRowCell>Mark</TableRowCell>
            <TableRowCell>Otto</TableRowCell>
            <TableRowCell>@@mdo</TableRowCell>
        </TableRow>
        <TableRow>
            <TableRowHeader>2</TableRowHeader>
            <TableRowCell>Jacob</TableRowCell>
            <TableRowCell>Thornton</TableRowCell>
            <TableRowCell>@@fat</TableRowCell>
        </TableRow>
        <TableRow>
            <TableRowHeader>3</TableRowHeader>
            <TableRowCell>Larry</TableRowCell>
            <TableRowCell>the Bird</TableRowCell>
            <TableRowCell>@@twitter</TableRowCell>
        </TableRow>
    </TableBody>
</Table>";

        public const string TableFixedHeaderExample = @"<Table FixedHeader FixedHeaderTableHeight=""300px"">
    <TableHeader>
        <TableRow>
            <TableHeaderCell>#</TableHeaderCell>
            <TableHeaderCell>First Name</TableHeaderCell>
            <TableHeaderCell>Last Name</TableHeaderCell>
            <TableHeaderCell>Username</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        @for ( int i = 1; i <= 10; ++i )
        {
            var index = i.ToString();

            <TableRow @key=""@index"">
                <TableRowHeader>@index</TableRowHeader>
                <TableRowCell>Column content</TableRowCell>
                <TableRowCell>Column content</TableRowCell>
                <TableRowCell>Column content</TableRowCell>
            </TableRow>
        }
    </TableBody>
</Table>";

        public const string TableGroupingExample = @"<Table>
    <TableHeader>
        <TableRow>
            <TableHeaderCell>Name</TableHeaderCell>
            <TableHeaderCell>Color</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        <TableRowGroup Title=""Fruits"">
            <TableRow>
                <TableRowCell>Apple</TableRowCell>
                <TableRowCell>Red</TableRowCell>
            </TableRow>
            <TableRow>
                <TableRowCell>Banana</TableRowCell>
                <TableRowCell>Yellow</TableRowCell>
            </TableRow>
        </TableRowGroup>
        <TableRowGroup Title=""Vegetables"">
            <TableRow>
                <TableRowCell>Carrot</TableRowCell>
                <TableRowCell>Orange</TableRowCell>
            </TableRow>
            <TableRow>
                <TableRowCell>Pepper</TableRowCell>
                <TableRowCell>Green</TableRowCell>
            </TableRow>
        </TableRowGroup>
    </TableBody>
</Table>";

        public const string TableHoverableExample = @"<Table Hoverable>
    <TableHeader>
        <TableRow>
            <TableHeaderCell>#</TableHeaderCell>
            <TableHeaderCell>First Name</TableHeaderCell>
            <TableHeaderCell>Last Name</TableHeaderCell>
            <TableHeaderCell>Username</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        <TableRow>
            <TableRowHeader>1</TableRowHeader>
            <TableRowCell>Mark</TableRowCell>
            <TableRowCell>Otto</TableRowCell>
            <TableRowCell>@@mdo</TableRowCell>
        </TableRow>
        <TableRow>
            <TableRowHeader>2</TableRowHeader>
            <TableRowCell>Jacob</TableRowCell>
            <TableRowCell>Thornton</TableRowCell>
            <TableRowCell>@@fat</TableRowCell>
        </TableRow>
        <TableRow>
            <TableRowHeader>3</TableRowHeader>
            <TableRowCell>Larry</TableRowCell>
            <TableRowCell>the Bird</TableRowCell>
            <TableRowCell>@@twitter</TableRowCell>
        </TableRow>
    </TableBody>
</Table>";

        public const string TableLightHeaderExample = @"<Table>
    <TableHeader ThemeContrast=""ThemeContrast.Light"">
        <TableRow>
            <TableHeaderCell>#</TableHeaderCell>
            <TableHeaderCell>First Name</TableHeaderCell>
            <TableHeaderCell>Last Name</TableHeaderCell>
            <TableHeaderCell>Username</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        <TableRow>
            <TableRowHeader>1</TableRowHeader>
            <TableRowCell>Mark</TableRowCell>
            <TableRowCell>Otto</TableRowCell>
            <TableRowCell>@@mdo</TableRowCell>
        </TableRow>
        <TableRow>
            <TableRowHeader>2</TableRowHeader>
            <TableRowCell>Jacob</TableRowCell>
            <TableRowCell>Thornton</TableRowCell>
            <TableRowCell>@@fat</TableRowCell>
        </TableRow>
        <TableRow>
            <TableRowHeader>3</TableRowHeader>
            <TableRowCell>Larry</TableRowCell>
            <TableRowCell>the Bird</TableRowCell>
            <TableRowCell>@@twitter</TableRowCell>
        </TableRow>
    </TableBody>
</Table>";

        public const string TableNarrowExample = @"<Table Narrow>
    <TableHeader>
        <TableRow>
            <TableHeaderCell>#</TableHeaderCell>
            <TableHeaderCell>First Name</TableHeaderCell>
            <TableHeaderCell>Last Name</TableHeaderCell>
            <TableHeaderCell>Username</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        <TableRow>
            <TableRowHeader>1</TableRowHeader>
            <TableRowCell>Mark</TableRowCell>
            <TableRowCell>Otto</TableRowCell>
            <TableRowCell>@@mdo</TableRowCell>
        </TableRow>
        <TableRow>
            <TableRowHeader>2</TableRowHeader>
            <TableRowCell>Jacob</TableRowCell>
            <TableRowCell>Thornton</TableRowCell>
            <TableRowCell>@@fat</TableRowCell>
        </TableRow>
        <TableRow>
            <TableRowHeader>3</TableRowHeader>
            <TableRowCell>Larry</TableRowCell>
            <TableRowCell>the Bird</TableRowCell>
            <TableRowCell>@@twitter</TableRowCell>
        </TableRow>
    </TableBody>
</Table>";

        public const string TableResizableExample = @"<Table Bordered Resizable ResizeMode=""TableResizeMode.Columns"">
    <TableHeader>
        <TableRow>
            <TableHeaderCell>#</TableHeaderCell>
            <TableHeaderCell>First Name</TableHeaderCell>
            <TableHeaderCell>Last Name</TableHeaderCell>
            <TableHeaderCell>Username</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        <TableRow>
            <TableRowHeader>1</TableRowHeader>
            <TableRowCell>Mark</TableRowCell>
            <TableRowCell>Otto</TableRowCell>
            <TableRowCell>@@mdo</TableRowCell>
        </TableRow>
        <TableRow>
            <TableRowHeader>2</TableRowHeader>
            <TableRowCell>Jacob</TableRowCell>
            <TableRowCell>Thornton</TableRowCell>
            <TableRowCell>@@fat</TableRowCell>
        </TableRow>
        <TableRow>
            <TableRowHeader>3</TableRowHeader>
            <TableRowCell>Larry</TableRowCell>
            <TableRowCell>the Bird</TableRowCell>
            <TableRowCell>@@twitter</TableRowCell>
        </TableRow>
    </TableBody>
</Table>";

        public const string TableScrollToExample = @"<Button Size=""Size.Small"" Color=""Color.Primary"" Clicked=""@ScrollToRow"">Scroll To Row</Button>
<Button Size=""Size.Small"" Color=""Color.Primary"" Clicked=""@ScrollToPixels"">Scroll To Pixels</Button>

<Table @ref=""@tableRef"" FixedHeader FixedHeaderTableHeight=""300px"">
    <TableHeader>
        <TableRow>
            <TableHeaderCell>#</TableHeaderCell>
            <TableHeaderCell>First Name</TableHeaderCell>
            <TableHeaderCell>Last Name</TableHeaderCell>
            <TableHeaderCell>Username</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        @for ( int i = 1; i <= 10; ++i )
        {
            var index = i.ToString();

            <TableRow @key=""@index"">
                <TableRowHeader>@index</TableRowHeader>
                <TableRowCell>Column content</TableRowCell>
                <TableRowCell>Column content</TableRowCell>
                <TableRowCell>Column content</TableRowCell>
            </TableRow>
        }
    </TableBody>
</Table>
@code {
    Table tableRef;

    private Task ScrollToRow()
        => tableRef.ScrollToRow( 1 ).AsTask();

    private Task ScrollToPixels()
        => tableRef.ScrollToPixels( 250 ).AsTask();
}";

        public const string TableStrippedExample = @"<Table Striped>
    <TableHeader>
        <TableRow>
            <TableHeaderCell>#</TableHeaderCell>
            <TableHeaderCell>First Name</TableHeaderCell>
            <TableHeaderCell>Last Name</TableHeaderCell>
            <TableHeaderCell>Username</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        <TableRow>
            <TableRowHeader>1</TableRowHeader>
            <TableRowCell>Mark</TableRowCell>
            <TableRowCell>Otto</TableRowCell>
            <TableRowCell>@@mdo</TableRowCell>
        </TableRow>
        <TableRow>
            <TableRowHeader>2</TableRowHeader>
            <TableRowCell>Jacob</TableRowCell>
            <TableRowCell>Thornton</TableRowCell>
            <TableRowCell>@@fat</TableRowCell>
        </TableRow>
        <TableRow>
            <TableRowHeader>3</TableRowHeader>
            <TableRowCell>Larry</TableRowCell>
            <TableRowCell>the Bird</TableRowCell>
            <TableRowCell>@@twitter</TableRowCell>
        </TableRow>
    </TableBody>
</Table>";

        public const string BasicTabExample = @"<Tabs SelectedTab=""@selectedTab"" SelectedTabChanged=""@OnSelectedTabChanged"">
    <Items>
        <Tab Name=""home"">Home</Tab>
        <Tab Name=""profile"">Profile</Tab>
        <Tab Name=""messages"">Messages</Tab>
        <Tab Name=""settings"">Settings</Tab>
    </Items>
    <Content>
        <TabPanel Name=""home"">
            Content for home.
        </TabPanel>
        <TabPanel Name=""profile"">
            Content for profile.
        </TabPanel>
        <TabPanel Name=""messages"">
            Content for messages.
        </TabPanel>
        <TabPanel Name=""settings"">
            Content for settings.
        </TabPanel>
    </Content>
</Tabs>
@code{
    string selectedTab = ""profile"";

    private Task OnSelectedTabChanged( string name )
    {
        selectedTab = name;

        return Task.CompletedTask;
    }
}";

        public const string LazyLoadTabExample = @"<Tabs RenderMode=""TabsRenderMode.LazyLoad"" SelectedTab=""tab1"">
    <Items>
        <Tab Name=""tab1"">Tab 1</Tab>
        <Tab Name=""tab2"">Tab 2</Tab>
    </Items>
    <Content>
        <TabPanel Name=""tab1"">
            This Tabs component is set to <code>LazyLoad</code> mode, meaning each tab will only be rendered/loaded the first time it is visited.
            This is specially useful when you want to delay some heavy or long waited operations for when the tab is actually clicked instead.
            <TextEdit></TextEdit>
        </TabPanel>
        <TabPanel Name=""tab2"">
            <TextEdit></TextEdit>
        </TabPanel>
    </Content>
</Tabs>";

        public const string LazyReloadTabExample = @"<Tabs RenderMode=""TabsRenderMode.LazyReload"" SelectedTab=""tab1"">
    <Items>
        <Tab Name=""tab1"">Tab 1</Tab>
        <Tab Name=""tab2"">Tab 2</Tab>
    </Items>
    <Content>
        <TabPanel Name=""tab1"">
            This Tabs component is set to <code>LazyReload</code> mode, meaning that only the active tab will have it's html rendered at a time. 
            Try typing some text in the provided Text components and changing between tabs, the tab will always be refresh as the tab content is always lazy loaded, 
            therefore re-calculated.
            <TextEdit></TextEdit>
        </TabPanel>
        <TabPanel Name=""tab2"">
            <TextEdit></TextEdit>
        </TabPanel>
    </Content>
</Tabs>";

        public const string BasicTextEditExample = @"<TextEdit />";

        public const string TextEditDisabledExample = @"<TextEdit Disabled />";

        public const string TextEditMaskExample = @"<TextEdit MaskType=""MaskType.RegEx"" EditMask=""^[a-zA-Z ]*$"" />";

        public const string TextEditPatternExample = @"<Validation UsePattern>
    <TextEdit Pattern=""[A-Za-z]{3}"">
        <Feedback>
            <ValidationError>Pattern does not match!</ValidationError>
        </Feedback>
    </TextEdit>
</Validation>";

        public const string TextEditPlaceholderExample = @"<TextEdit Placeholder=""Some text value..."" />";

        public const string TextEditPlaintextExample = @"<TextEdit Plaintext />";

        public const string TextEditReadonlyExample = @"<TextEdit ReadOnly />";

        public const string TextEditRoleExample = @"<TextEdit Role=""TextRole.Email"" />
<TextEdit Role=""TextRole.Password"" />";

        public const string TextEditSizingExample = @"<TextEdit Size=""Size.Small"" />
<TextEdit Size=""Size.Large"" />";

        public const string TextEditTextChangedModeExample = @"public void ConfigureServices( IServiceCollection services )
{
  services
    .AddBlazorise( options =>
    {
      options.Immediate = false;
    } );
}";

        public const string TextEditTextDelayModeExample = @"public void ConfigureServices( IServiceCollection services )
{
  services
    .AddBlazorise( options =>
    {
      options.Debounce = true;
      options.DebounceInterval = 300;
    } );
}";

        public const string TextEditWithBindExample = @"<TextEdit @bind-Text=""@name"" />

@code{
    string name;
}";

        public const string TextEditWithEventExample = @"<TextEdit Text=""@name"" TextChanged=""@OnNameChanged"" />

@code{
    string name;

    Task OnNameChanged( string value )
    {
        name = value;

        return Task.CompletedTask;
    }
}";

        public const string ThemingColorsExample = @"<Blazorise.ThemeProvider Theme=""@theme"">
    <Router AppAssembly=""typeof(App).Assembly"">
        <Found>...</Found>
        <NotFound>...</NotFound>
    </Router>
</Blazorise.ThemeProvider>

@code{
    private Theme theme = new Theme
    {
        ColorOptions = new ThemeColorOptions
        {
            Primary = ""#45B1E8"",
            Secondary = ""#A65529"",
            // other
        }
    };
}";

        public const string ThemingGradientExample = @"<Blazorise.ThemeProvider Theme=""@theme"">
    <Router AppAssembly=""typeof(App).Assembly"">
        <Found>...</Found>
        <NotFound>...</NotFound>
    </Router>
</Blazorise.ThemeProvider>

@code {
    private Theme theme = new Theme
    {
        IsGradient = true,
    };
}";

        public const string ThemingRoundedExample = @"<Blazorise.ThemeProvider Theme=""@theme"">
    <Router AppAssembly=""typeof(App).Assembly"">
        <Found>...</Found>
        <NotFound>...</NotFound>
    </Router>
</Blazorise.ThemeProvider>

@code{
    private Theme theme = new Theme
    {
        IsRounded = false,
    };
}";

        public const string ThemingRuntimeExample = @"<Button Clicked=""@(()=>OnThemeColorChanged(""#d16f9e""))"">Change theme</Button>

@code{
    Task OnThemeColorChanged( string value )
    {
        if ( Theme?.ColorOptions != null )
            Theme.ColorOptions.Primary = value;

        if ( Theme?.BackgroundOptions != null )
            Theme.BackgroundOptions.Primary = value;

        Theme.ThemeHasChanged();

        return Task.CompletedTask;
    }

    [CascadingParameter] Theme Theme { get; set; }
}";

        public const string ThemingStartExample = @"<Blazorise.ThemeProvider Theme=""@theme"">
    <Router AppAssembly=""typeof(App).Assembly"">
        <Found>...</Found>
        <NotFound>...</NotFound>
    </Router>
</Blazorise.ThemeProvider>

@code{
    private Theme theme = new Theme
    {
        // theme settings
    };
}";

        public const string BasicTimeEditExample = @"<TimeEdit TValue=""TimeSpan?"" />";

        public const string BasicTimePickerExample = @"<TimePicker TValue=""TimeSpan?"" />";

        public const string InlineTimePickerExample = @"<TimePicker TValue=""TimeSpan?"" Inline />";

        public const string TimeEditShowPickerExample = @"<Field>
    <Button Color=""Color.Primary"" Clicked=""@(()=>timeEditRef.ShowPicker())"">
        Show Picker
    </Button>
</Field>
<Field>
    <TimeEdit @ref=""@timeEditRef"" TValue=""DateTime"" />
</Field>

@code {
    TimeEdit<DateTime> timeEditRef;
}";

        public const string TimeEditWithBindExample = @"<TimeEdit TValue=""TimeSpan?"" @bind-Time=""@selectedTime"" />

@code{
    TimeSpan? selectedTime;
}";

        public const string TimeEditWithEventExample = @"<TimeEdit TValue=""TimeSpan?"" Time=""@selectedTime"" TimeChanged=""@OnTimeChanged"" />

@code{
    TimeSpan? selectedTime;

    Task OnTimeChanged( TimeSpan? Time )
    {
        selectedTime = Time;

        return Task.CompletedTask;
    }
}";

        public const string TimePickerWithIconExample = @"<Addons>
    <Addon AddonType=""AddonType.Body"">
        <TimePicker @ref=""@timePicker"" TValue=""TimeSpan?"" />
    </Addon>
    <Addon AddonType=""AddonType.End"">
        <Button Color=""Color.Light"" Clicked=""@(()=>timePicker.ToggleAsync())"">
            <Icon Name=""IconName.CalendarDay"" />
        </Button>
    </Addon>
</Addons>
@code{
    TimePicker<TimeSpan?> timePicker;
}";

        public const string BasicTooltipExample = @"<Tooltip Text=""Hello tooltip"">
    <Button Color=""Color.Primary"">Hover me</Button>
</Tooltip>";

        public const string TooltipPositionsExample = @"<Tooltip Text=""Hello tooltip"" Placement=""TooltipPlacement.Top"">
    <Button Color=""Color.Primary"">Top tooltip</Button>
</Tooltip>
<Tooltip Text=""Hello tooltip"" Placement=""TooltipPlacement.Right"">
    <Button Color=""Color.Primary"">Right tooltip</Button>
</Tooltip>
<Tooltip Text=""Hello tooltip"" Placement=""TooltipPlacement.Left"">
    <Button Color=""Color.Primary"">Left tooltip</Button>
</Tooltip>
<Tooltip Text=""Hello tooltip"" Placement=""TooltipPlacement.Bottom"">
    <Button Color=""Color.Primary"">Bottom tooltip</Button>
</Tooltip>";

        public const string TooltipTriggerTargetExample = @"<Div ElementId=""tooltip-custom-target"">
    Trigger target vs
    <Tooltip Text=""I'm a tooltip!"" TriggerTargetId=""tooltip-custom-target"" Inline>
        <Badge Color=""Color.Warning"">positioning target</Badge>
    </Tooltip>
</Div>";

        public const string TypographyDisplayHeadingExample = @"<DisplayHeading Size=""DisplayHeadingSize.Is1"">Display 1</DisplayHeading>
<DisplayHeading Size=""DisplayHeadingSize.Is2"">Display 2</DisplayHeading>
<DisplayHeading Size=""DisplayHeadingSize.Is3"">Display 3</DisplayHeading>
<DisplayHeading Size=""DisplayHeadingSize.Is4"">Display 4</DisplayHeading>";

        public const string TypographyHeadingExample = @"<Heading Size=""HeadingSize.Is1"">h1. Blazorise heading</Heading>
<Heading Size=""HeadingSize.Is2"">h2. Blazorise heading</Heading>
<Heading Size=""HeadingSize.Is3"">h3. Blazorise heading</Heading>
<Heading Size=""HeadingSize.Is4"">h4. Blazorise heading</Heading>
<Heading Size=""HeadingSize.Is5"">h5. Blazorise heading</Heading>
<Heading Size=""HeadingSize.Is6"">h6. Blazorise heading</Heading>";

        public const string TypographyLeadExample = @"<Lead>
    Deliver great service experiences fast - without the complexity of traditional ITSM solutions.Accelerate critical development work and deploy.
</Lead>
<Paragraph>
    Track work across the enterprise through an open, collaborative platform. Link issues across Jira and ingest data from other software development tools, so your IT support and operations teams have richer contextual information to rapidly respond to requests, incidents, and changes.
</Paragraph>";

        public const string TypographyParagraphExample = @"<Paragraph>
    Deliver great service experiences fast - without the complexity of traditional ITSM solutions.Accelerate critical development work and deploy.
</Paragraph>
<Paragraph>
    Track work across the enterprise through an open, collaborative platform. Link issues across Jira and ingest data from other software development tools, so your IT support and operations teams have richer contextual information to rapidly respond to requests, incidents, and changes.
</Paragraph>";

        public const string TypographyTextExample = @"<Text TextColor=""TextColor.Primary"">
    Lorem ipsum dolor sit amet.
</Text>
<Text TextColor=""TextColor.Secondary"">
    Cursus euismod quis viverra nibh cras.
</Text>";

        public const string AsyncValidationExample = @"@using System.Threading

<Validation AsyncValidator=""@ValidateNameAsync"">
    <TextEdit Placeholder=""Enter name"">
        <Feedback>
            <ValidationError>Enter valid name!</ValidationError>
        </Feedback>
    </TextEdit>
</Validation>
@code{
    Random random = new Random();

    async Task ValidateNameAsync( ValidatorEventArgs e, CancellationToken cancellationToken )
    {
        cancellationToken.ThrowIfCancellationRequested();

        // some long running task or call to the rest API
        await Task.Delay( random.Next( 1500 ) );

        e.Status = string.IsNullOrEmpty( Convert.ToString( e.Value ) )
            ? ValidationStatus.Error
            : ValidationStatus.Success;
    }
}";

        public const string AutoValidationExample = @"<Validations Mode=""ValidationMode.Auto"" ValidateOnLoad>
    ...
</Validations>";

        public const string BasicValidationExample = @"<Validation Validator=""ValidationRule.IsNotEmpty"">
    <TextEdit Placeholder=""Enter name"">
        <Feedback>
            <ValidationNone>Please enter the name.</ValidationNone>
            <ValidationSuccess>Name is good.</ValidationSuccess>
            <ValidationError>Enter valid name!</ValidationError>
        </Feedback>
    </TextEdit>
</Validation>

<Validation Validator=""ValidateEmail"">
    <TextEdit Placeholder=""Enter email"">
        <Feedback>
            <ValidationNone>Please enter the email.</ValidationNone>
            <ValidationSuccess>Email is good.</ValidationSuccess>
            <ValidationError>Enter valid email!</ValidationError>
        </Feedback>
    </TextEdit>
</Validation>
@code{
    void ValidateEmail( ValidatorEventArgs e )
    {
        var email = Convert.ToString( e.Value );

        e.Status = string.IsNullOrEmpty( email ) ? ValidationStatus.None :
            email.Contains( ""@"" ) ? ValidationStatus.Success : ValidationStatus.Error;
    }
}";

        public const string DataAnnotationValidationExample = @"@using System.ComponentModel.DataAnnotations

<Validations Mode=""ValidationMode.Auto"" Model=""@user"">
    <Validation>
        <Field Horizontal>
            <FieldLabel ColumnSize=""ColumnSize.Is2"">Full Name</FieldLabel>
            <FieldBody ColumnSize=""ColumnSize.Is10"">
                <TextEdit Placeholder=""First and last name"" @bind-Text=""@user.Name"">
                    <Feedback>
                        <ValidationError />
                    </Feedback>
                </TextEdit>
            </FieldBody>
        </Field>
    </Validation>
    <Validation>
        <Field Horizontal>
            <FieldLabel ColumnSize=""ColumnSize.Is2"">Email</FieldLabel>
            <FieldBody ColumnSize=""ColumnSize.Is10"">
                <TextEdit Placeholder=""Enter email"" @bind-Text=""@user.Email"">
                    <Feedback>
                        <ValidationError />
                    </Feedback>
                </TextEdit>
            </FieldBody>
        </Field>
    </Validation>
    <Validation>
        <Field Horizontal>
            <FieldLabel ColumnSize=""ColumnSize.Is2"">Password</FieldLabel>
            <FieldBody ColumnSize=""ColumnSize.Is10"">
                <TextEdit Role=""TextRole.Password"" Placeholder=""Password"" @bind-Text=""@user.Password"">
                    <Feedback>
                        <ValidationError />
                    </Feedback>
                </TextEdit>
            </FieldBody>
        </Field>
    </Validation>
    <Validation>
        <Field Horizontal>
            <FieldLabel ColumnSize=""ColumnSize.Is2"">Re Password</FieldLabel>
            <FieldBody ColumnSize=""ColumnSize.Is10"">
                <TextEdit Role=""TextRole.Password"" Placeholder=""Retype password"" @bind-Text=""@user.ConfirmPassword"">
                    <Feedback>
                        <ValidationError />
                    </Feedback>
                </TextEdit>
            </FieldBody>
        </Field>
    </Validation>
</Validations>
@code{
    User user = new User();

    public class User
    {
        [Required]
        [StringLength( 10, ErrorMessage = ""Name is too long."" )]
        public string Name { get; set; }

        [Required]
        [EmailAddress( ErrorMessage = ""Invalid email."" )]
        public string Email { get; set; }

        [Required( ErrorMessage = ""Password is required"" )]
        [StringLength( 8, ErrorMessage = ""Must be between 5 and 8 characters"", MinimumLength = 5 )]
        [DataType( DataType.Password )]
        public string Password { get; set; }

        [Required( ErrorMessage = ""Confirm Password is required"" )]
        [StringLength( 8, ErrorMessage = ""Must be between 5 and 8 characters"", MinimumLength = 5 )]
        [DataType( DataType.Password )]
        [Compare( ""Password"" )]
        public string ConfirmPassword { get; set; }

        [Required]
        public string Title { get; set; }

        [Range( typeof( bool ), ""true"", ""true"", ErrorMessage = ""You gotta tick the box!"" )]
        public bool TermsAndConditions { get; set; }
    }
}";

        public const string LocalizationValidationExample = @"@using Blazorise.Localization

<Validation MessageLocalizer=""@Localize"">
</Validation>
@code{
    [Inject] ITextLocalizer<LocalizationValidationExample> L { get; set; }

    string Localize( string message, IEnumerable<string> arguments )
    {
        // You should probably do null checks here!
        return string.Format( L[message], arguments.ToArray() );
    }
}";

        public const string ManualValidationExample = @"<Validations @ref=""validations"" Mode=""ValidationMode.Manual"">
    <Validation Validator=""@ValidationRule.IsNotEmpty"">
        <Field>
            <TextEdit Placeholder=""Enter first name"" />
        </Field>
    </Validation>
    <Validation Validator=""@ValidationRule.IsNotEmpty"">
        <Field>
            <TextEdit Placeholder=""Enter last name"" />
        </Field>
    </Validation>
    <Button Color=""Color.Primary"" Clicked=""@Submit"">Submit</Button>
</Validations>
@code{
    Validations validations;

    async Task Submit()
    {
        if ( await validations.ValidateAll() )
        {
            // do something
        }
    }
}";

        public const string PatternValidationExample = @"<Validation UsePattern>
    <TextEdit Pattern=""[A-Za-z]{3}"">
        <Feedback>
            <ValidationError>Pattern does not match!</ValidationError>
        </Feedback>
    </TextEdit>
</Validation>";

        public const string ValidationFeedbackExample = @"<Validation Validator=""@ValidateCheck"">
    <Check TValue=""bool"">
        <ChildContent>
            Check me out
        </ChildContent>
        <Feedback>
            <ValidationError>You must check me out!</ValidationError>
        </Feedback>
    </Check>
</Validation>
@code{
    void ValidateCheck( ValidatorEventArgs e )
    {
        // ...
    }
}";

        public const string ValidationRulesExample = @"<Validation Validator=""@ValidationRule.IsNotEmpty"">
    ...
</Validation>";

        public const string ValidationSummaryExample = @"<Validations Mode=""ValidationMode.Manual"">
    <ValidationSummary Label=""Following error occurs..."" />

    @*other validation fields*@
</Validations>";

        public const string AntDesignScriptsExample = @"<script src=""_content/Blazorise.AntDesign/modal.js?v=1.2.0.0"" type=""module""></script>
<script src=""_content/Blazorise.AntDesign/tooltip.js?v=1.2.0.0"" type=""module""></script>";

        public const string Bootstrap5ScriptsExample = @"<script src=""_content/Blazorise.Bootstrap5/modal.js?v=1.2.0.0"" type=""module""></script>
<script src=""_content/Blazorise.Bootstrap5/tooltip.js?v=1.2.0.0"" type=""module""></script>";

        public const string BootstrapScriptsExample = @"<script src=""_content/Blazorise.Bootstrap/modal.js?v=1.2.0.0"" type=""module""></script>
<script src=""_content/Blazorise.Bootstrap/tooltip.js?v=1.2.0.0"" type=""module""></script>";

        public const string BulmaScriptsExample = @"<script src=""_content/Blazorise.Bulma/modal.js?v=1.2.0.0"" type=""module""></script>
<script src=""_content/Blazorise.Bulma/tooltip.js?v=1.2.0.0"" type=""module""></script>";

        public const string ChartsScriptsExample = @"<script src=""_content/Blazorise.Charts/charts.js?v=1.2.0.0"" type=""module""></script>";

        public const string ChartsStreamingScriptsExample = @"<script src=""_content/Blazorise.Charts.Streaming/charts.streaming.js?v=1.2.0.0"" type=""module""></script>";

        public const string ChartsTrendlineScriptsExample = @"<script src=""_content/Blazorise.Charts.Trendline/charts.trendline.js?v=1.2.0.0"" type=""module""></script>";

        public const string CommonScriptsExample = @"<script src=""_content/Blazorise/breakpoint.js?v=1.2.0.0"" type=""module""></script>
<script src=""_content/Blazorise/button.js?v=1.2.0.0"" type=""module""></script>
<script src=""_content/Blazorise/closable.js?v=1.2.0.0"" type=""module""></script>
<script src=""_content/Blazorise/colorPicker.js?v=1.2.0.0"" type=""module""></script>
<script src=""_content/Blazorise/datePicker.js?v=1.2.0.0"" type=""module""></script>
<script src=""_content/Blazorise/dragDrop.js?v=1.2.0.0"" type=""module""></script>
<script src=""_content/Blazorise/dropdown.js?v=1.2.0.0"" type=""module""></script>
<script src=""_content/Blazorise/fileEdit.js?v=1.2.0.0"" type=""module""></script>
<script src=""_content/Blazorise/filePicker.js?v=1.2.0.0"" type=""module""></script>
<script src=""_content/Blazorise/inputMask.js?v=1.2.0.0"" type=""module""></script>
<script src=""_content/Blazorise/io.js?v=1.2.0.0"" type=""module""></script>
<script src=""_content/Blazorise/memoEdit.js?v=1.2.0.0"" type=""module""></script>
<script src=""_content/Blazorise/numericPicker.js?v=1.2.0.0"" type=""module""></script>
<script src=""_content/Blazorise/observer.js?v=1.2.0.0"" type=""module""></script>
<script src=""_content/Blazorise/popper.js?v=1.2.0.0"" type=""module""></script>
<script src=""_content/Blazorise/table.js?v=1.2.0.0"" type=""module""></script>
<script src=""_content/Blazorise/textEdit.js?v=1.2.0.0"" type=""module""></script>
<script src=""_content/Blazorise/theme.js?v=1.2.0.0"" type=""module""></script>
<script src=""_content/Blazorise/timePicker.js?v=1.2.0.0"" type=""module""></script>
<script src=""_content/Blazorise/tooltip.js?v=1.2.0.0"" type=""module""></script>
<script src=""_content/Blazorise/utilities.js?v=1.2.0.0"" type=""module""></script>";

        public const string ComponentsImportExample = @"@using Blazorise.Components";

        public const string DatagridScriptsExample = @"<script src=""_content/Blazorise.DataGrid/datagrid.js?v=1.2.0.0"" type=""module""></script>";

        public const string EmptyProviderExample = @"public void ConfigureServices( IServiceCollection services )
{
  services
    .AddEmptyProviders();
}";

        public const string MarkdownScriptsExample = @"<script src=""_content/Blazorise.Markdown/markdown.js?v=1.2.0.0"" type=""module""></script>";

        public const string MaterialScriptsExample = @"<script src=""_content/Blazorise.Material/modal.js?v=1.2.0.0"" type=""module""></script>
<script src=""_content/Blazorise.Material/tooltip.js?v=1.2.0.0"" type=""module""></script>";

        public const string RichTextEditScriptsExample = @"<script src=""_content/Blazorise.RichTextEdit/richtextedit.js?v=1.2.0.0"" type=""module""></script>";

        public const string TailwindScriptsExample = @"<script src=""_content/Blazorise.Tailwind/modal.js?v=1.2.0.0"" type=""module""></script>
<script src=""_content/Blazorise.Tailwind/tooltip.js?v=1.2.0.0"" type=""module""></script>";

        public const string TemplatesCLIUsageExample = @"dotnet new blazorise -n MyNewBlazoriseApp -p Bootstrap5 -bh Server -ut false -f net7.0";

        public const string TemplatesInstallExample = @"dotnet new install Blazorise.Templates";

        public const string TemplatesVersionInstallExample = @"dotnet new install Blazorise.Templates::1.1.0";

        public const string VideoScriptsExample = @"<script src=""_content/Blazorise.Video/video.js?v=1.2.0.0"" type=""module""></script>";

        public const string AnimateExample = @"<Field>
    <Select TValue=""string"" SelectedValueChanged=""@OnSelectedAnimationChanged"">
        @foreach ( var availableAnimation in Animations.GetNames() )
        {
            <SelectItem Value=""@availableAnimation"">@availableAnimation</SelectItem>
        }
    </Select>
</Field>

@if ( showAnimate )
{
    <Div ElementId=""#b-animate"">
        <Animate Anchor=""#b-animate"" Auto Animation=""selectedAnimation"" DelayMilliseconds=""500"">
            <Card Margin=""Margin.Is4.OnY"">
                <CardBody>
                    <CardTitle Size=""5"">Animation Example</CardTitle>
                    <CardText>
                        Some content.
                    </CardText>
                </CardBody>
            </Card>
        </Animate>
    </Div>
}
<Button Color=""Color.Primary"" Clicked=""@Animate"">
    @buttonText
</Button>
@code {
    private IAnimation selectedAnimation = Animations.FadeIn;
    private bool showAnimate = false;
    private string buttonText = ""Animate!"";

    private Task OnSelectedAnimationChanged( string selectedAnimationName )
    {
        showAnimate = false;

        if ( Animations.TryParse( selectedAnimationName, out var animation ) )
            selectedAnimation = animation;
        else
            selectedAnimation = null;

        return Task.CompletedTask;
    }

    private async Task Animate()
    {
        if ( !showAnimate )
        {
            showAnimate = true;
            await InvokeAsync( StateHasChanged );
            buttonText = ""Restart!"";
        }
        else
        {
            showAnimate = false;
            buttonText = ""Animate!"";
        }

        await InvokeAsync( StateHasChanged );
    }
}";

        public const string AnimateImportsExample = @"@using Blazorise.Animate";

        public const string AnimateNugetInstallExample = @"Install-Package Blazorise.Animate";

        public const string AnimateResourcesExample = @"<script src=""_content/Blazorise.Animate/blazorise.animate.js?v=1.2.0.0""></script>";

        public const string AutocompleteExample = @"<Autocomplete TItem=""Country""
              TValue=""string""
              Data=""@Countries""
              TextField=""@(( item ) => item.Name)""
              ValueField=""@(( item ) => item.Iso)""
              @bind-SelectedValue=""@selectedSearchValue""
              @bind-SelectedText=""selectedAutoCompleteText""
              Placeholder=""Search...""
              Filter=""AutocompleteFilter.StartsWith""
              FreeTyping
              CustomFilter=""@(( item, searchValue ) => item.Name.IndexOf( searchValue, 0, StringComparison.CurrentCultureIgnoreCase ) >= 0 )"">
    <NotFoundContent> Sorry... @context was not found! :( </NotFoundContent>
</Autocomplete>

<Field Horizontal>
    <FieldBody ColumnSize=""ColumnSize.Is12"">
        Selected search value: @selectedSearchValue
    </FieldBody>
    <FieldBody ColumnSize=""ColumnSize.Is12"">
        Selected text value: @selectedAutoCompleteText
    </FieldBody>
</Field>

@code {
    [Inject]
    public CountryData CountryData { get; set; }
    public IEnumerable<Country> Countries;

    protected override async Task OnInitializedAsync()
    {
        Countries = await CountryData.GetDataAsync();
        await base.OnInitializedAsync();
    }

    public string selectedSearchValue { get; set; }
    public string selectedAutoCompleteText { get; set; }
}";

        public const string AutocompleteHighlightExample = @"<Autocomplete TItem=""Country""
              TValue=""string""
              Data=""@Countries""
              TextField=""@(( item ) => item.Name)""
              ValueField=""@(( item ) => item.Iso)""
              Placeholder=""Search...""
              HighlightSearch>
    <NotFoundContent> Sorry... @context was not found! :( </NotFoundContent>
</Autocomplete>

@code {
    [Inject]
    public CountryData CountryData { get; set; }
    public IEnumerable<Country> Countries;

    protected override async Task OnInitializedAsync()
    {
        Countries = await CountryData.GetDataAsync();
        await base.OnInitializedAsync();
    }
}";

        public const string AutocompleteItemContentExample = @"<Autocomplete TItem=""Country""
              TValue=""string""
              Data=""@Countries""
              TextField=""@(( item ) => item.Name)""
              ValueField=""@(( item ) => item.Iso)""
              @bind-SelectedValue=""@selectedSearchValue""
              @bind-SelectedText=""selectedAutoCompleteText""
              Placeholder=""Search...""
              Filter=""AutocompleteFilter.StartsWith""
              FreeTyping
              CustomFilter=""@(( item, searchValue ) => item.Name.IndexOf( searchValue, 0, StringComparison.CurrentCultureIgnoreCase ) >= 0 )"">
    <NotFoundContent> Sorry... @context was not found! :( </NotFoundContent>
    <ItemContent>
        <Div Flex=""Flex.InlineFlex.JustifyContent.Between"" Width=""Width.Is100"">
            <Heading Margin=""Margin.Is2.FromBottom"">@context.Value</Heading>
            <Small>@context.Item.Capital</Small>
        </Div>
        <Paragraph Margin=""Margin.Is2.FromBottom"">@context.Text</Paragraph>
    </ItemContent>
</Autocomplete>

<Field Horizontal>
    <FieldBody ColumnSize=""ColumnSize.Is12"">
        Selected search value: @selectedSearchValue
    </FieldBody>
    <FieldBody ColumnSize=""ColumnSize.Is12"">
        Selected text value: @selectedAutoCompleteText
    </FieldBody>
</Field>

@code {
    [Inject]
    public CountryData CountryData { get; set; }
    public IEnumerable<Country> Countries;

    protected override async Task OnInitializedAsync()
    {
        Countries = await CountryData.GetDataAsync();
        await base.OnInitializedAsync();
    }
    string selectedSearchValue { get; set; }
    string selectedAutoCompleteText { get; set; }
}";

        public const string AutocompleteMultipleExample = @"<Autocomplete TItem=""Country""
              TValue=""string""
              Data=""@Countries""
              TextField=""@(( item ) => item.Name)""
              ValueField=""@(( item ) => item.Iso)""
              Placeholder=""Search...""
              SelectionMode=""AutocompleteSelectionMode.Multiple""
              FreeTyping
              @bind-SelectedValues=""multipleSelectionData""
              @bind-SelectedTexts=""multipleSelectionTexts"">
</Autocomplete>

<Field Horizontal>
    <FieldBody ColumnSize=""ColumnSize.Is12"">
        Selected Values: @string.Join(',', multipleSelectionData)
    </FieldBody>
    <FieldBody ColumnSize=""ColumnSize.Is12"">
        Selected Texts: @(multipleSelectionTexts == null ? null : string.Join(',', multipleSelectionTexts))
    </FieldBody>
</Field>

@code {
    [Inject]
    public CountryData CountryData { get; set; }
    public IEnumerable<Country> Countries;

    protected override async Task OnInitializedAsync()
    {
        Countries = await CountryData.GetDataAsync();
        multipleSelectionData = new List<string>() { Countries.ElementAt( 1 ).Iso, Countries.ElementAt( 3 ).Iso };
        await base.OnInitializedAsync();
    }

    List<string> multipleSelectionData;
    List<string> multipleSelectionTexts;
}";

        public const string AutocompleteReadDataExample = @"<Autocomplete TItem=""Country""
              TValue=""string""
              Data=""@ReadDataCountries""
              ReadData=""@OnHandleReadData""
              TextField=""@(( item ) => item.Name)""
              ValueField=""@(( item ) => item.Iso)""
              @bind-SelectedValue=""@selectedSearchValue""
              @bind-SelectedText=""selectedAutoCompleteText""
              Placeholder=""Search...""
              FreeTyping>
    <NotFoundContent> Sorry... @context was not found! :( </NotFoundContent>
</Autocomplete>

<Field Horizontal>
    <FieldBody ColumnSize=""ColumnSize.Is12"">
        Selected search value: @selectedSearchValue
    </FieldBody>
    <FieldBody ColumnSize=""ColumnSize.Is12"">
        Selected text value: @selectedAutoCompleteText
    </FieldBody>
</Field>

@code {
    [Inject]
    public CountryData CountryData { get; set; }
    public IEnumerable<Country> Countries;
    public IEnumerable<Country> ReadDataCountries;

    private Random random = new();

    public string selectedSearchValue { get; set; }
    public string selectedAutoCompleteText { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Countries = await CountryData.GetDataAsync();
        await base.OnInitializedAsync();
    }

    private async Task OnHandleReadData( AutocompleteReadDataEventArgs autocompleteReadDataEventArgs )
    {
        if ( !autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested )
        {
            await Task.Delay( random.Next( 100 ) );
            if ( !autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested )
            {
                ReadDataCountries = Countries.Where( x => x.Name.StartsWith( autocompleteReadDataEventArgs.SearchValue, StringComparison.InvariantCultureIgnoreCase ) );
            }
        }
    }
}";

        public const string AutocompleteSuggestMultipleCheckboxExample = @"<Autocomplete TItem=""Country""
              TValue=""string""
              Data=""@Countries""
              TextField=""@(( item ) => item.Name)""
              ValueField=""@(( item ) => item.Iso)""
              Placeholder=""Search...""
              SelectionMode=""AutocompleteSelectionMode.Checkbox""
              CloseOnSelection=""false""
              @bind-SelectedValues=""multipleSelectionData""
              @bind-SelectedTexts=""multipleSelectionTexts"">
</Autocomplete>

<Field Horizontal>
    <FieldBody ColumnSize=""ColumnSize.Is12"">
        Selected Values: @string.Join(',', multipleSelectionData)
    </FieldBody>
    <FieldBody ColumnSize=""ColumnSize.Is12"">
        Selected Texts: @(multipleSelectionTexts == null ? null : string.Join(',', multipleSelectionTexts))
    </FieldBody>
</Field>

@code {
    [Inject]
    public CountryData CountryData { get; set; }
    public IEnumerable<Country> Countries;

    protected override async Task OnInitializedAsync()
    {
        Countries = await CountryData.GetDataAsync();
        multipleSelectionData = new List<string>() { Countries.ElementAt( 1 ).Iso, Countries.ElementAt( 3 ).Iso };
        await base.OnInitializedAsync();
    }

    List<string> multipleSelectionData;
    List<string> multipleSelectionTexts;
}";

        public const string AutocompleteVirtualizeExample = @"<Autocomplete TItem=""Country""
              TValue=""string""
              Data=""@Countries""
              TextField=""@(( item ) => item.Name)""
              ValueField=""@((item) => item.Iso)""
              @bind-SelectedValue=""selectedSearchValue""
              Placeholder=""Search...""
              Virtualize>
    <NotFoundContent> Sorry... @context was not found! :( </NotFoundContent>
</Autocomplete>
@code {
    [Inject]
    public CountryData CountryData { get; set; }
    public IEnumerable<Country> Countries;

    protected override async Task OnInitializedAsync()
    {
        Countries = await CountryData.GetDataAsync();
        await base.OnInitializedAsync();
    }

    public string selectedSearchValue { get; set; }
}";

        public const string ChartComplexDataExample = @"<LineChart @ref=""lineChart"" TItem=""WatcherEvent"" Options=""@lineChartOptions"" />

@code {
    private LineChart<WatcherEvent> lineChart;

    LineChartOptions lineChartOptions = new()
    {
        Parsing = new ChartParsing
        {
            XAxisKey = ""sector"",
            YAxisKey = ""count"",
        }
    };

    private List<string> backgroundColors = new() { ChartColor.FromRgba( 255, 99, 132, 0.2f ), ChartColor.FromRgba( 54, 162, 235, 0.2f ), ChartColor.FromRgba( 255, 206, 86, 0.2f ), ChartColor.FromRgba( 75, 192, 192, 0.2f ), ChartColor.FromRgba( 153, 102, 255, 0.2f ), ChartColor.FromRgba( 255, 159, 64, 0.2f ) };
    private List<string> borderColors = new() { ChartColor.FromRgba( 255, 99, 132, 1f ), ChartColor.FromRgba( 54, 162, 235, 1f ), ChartColor.FromRgba( 255, 206, 86, 1f ), ChartColor.FromRgba( 75, 192, 192, 1f ), ChartColor.FromRgba( 153, 102, 255, 1f ), ChartColor.FromRgba( 255, 159, 64, 1f ) };

    private bool isAlreadyInitialised;

    public class WatcherEvent
    {
        public string Sector { get; set; }

        public int Count { get; set; }

        public DateTime Date { get; } = DateTime.Now;
    }

    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        if ( !isAlreadyInitialised )
        {
            isAlreadyInitialised = true;

            await lineChart.Clear();
            await lineChart.AddDataSet( GetLineChartDataset() );
        }
    }

    private LineChartDataset<WatcherEvent> GetLineChartDataset()
    {
        return new()
        {
            Label = ""# of randoms"",
            Data = new List<WatcherEvent>
            {
                new WatcherEvent { Sector = ""A"", Count = 1400 },
                new WatcherEvent { Sector = ""B"", Count = 900 },
                new WatcherEvent { Sector = ""C"", Count = 1800 },
                new WatcherEvent { Sector = ""D"", Count = 1300 },
            },
            BackgroundColor = backgroundColors[0], // line chart can only have one color
            BorderColor = borderColors[0],
            Fill = true,
            PointRadius = 3,
            BorderWidth = 1,
            PointBorderColor = Enumerable.Repeat( borderColors.First(), 6 ).ToList(),
            CubicInterpolationMode = ""monotone"",
        };
    }
}";

        public const string ChartEventExample = @"<Chart @ref=""barChart"" Type=""ChartType.Bar"" TItem=""double"" Clicked=""@OnClicked"" />
@code {
    Chart<double> barChart;

    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        if ( firstRender )
        {
            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        await barChart.Clear();

        await barChart.AddLabelsDatasetsAndUpdate( Labels, GetBarChartDataset() );
    }

    private BarChartDataset<double> GetBarChartDataset()
    {
        return new()
            {
                Label = ""# of randoms"",
                Data = RandomizeData(),
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
                BorderWidth = 1
            };
    }

    string[] Labels = { ""Red"", ""Blue"", ""Yellow"", ""Green"", ""Purple"", ""Orange"" };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 0.2f ), ChartColor.FromRgba( 54, 162, 235, 0.2f ), ChartColor.FromRgba( 255, 206, 86, 0.2f ), ChartColor.FromRgba( 75, 192, 192, 0.2f ), ChartColor.FromRgba( 153, 102, 255, 0.2f ), ChartColor.FromRgba( 255, 159, 64, 0.2f ) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 1f ), ChartColor.FromRgba( 54, 162, 235, 1f ), ChartColor.FromRgba( 255, 206, 86, 1f ), ChartColor.FromRgba( 75, 192, 192, 1f ), ChartColor.FromRgba( 153, 102, 255, 1f ), ChartColor.FromRgba( 255, 159, 64, 1f ) };

    List<double> RandomizeData()
    {
        var r = new Random( DateTime.Now.Millisecond );

        return new List<double> {
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble() };
    }

    Task OnClicked( ChartMouseEventArgs e )
    {
        var model = e.Model as BarChartModel;

        Console.WriteLine( $""Handling event for {nameof( BarChartModel )}: x:{model.X} y:{model.Y}"" );
        return Task.CompletedTask;
    }
}";

        public const string ChartExample = @"<Button Color=""Color.Primary"" Clicked=""@(async () => await HandleRedraw())"">Redraw</Button>

<LineChart @ref=""lineChart"" TItem=""double"" />

@code{
    LineChart<double> lineChart;

    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        if ( firstRender )
        {
            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        await lineChart.Clear();

        await lineChart.AddLabelsDatasetsAndUpdate( Labels, GetLineChartDataset() );
    }

    LineChartDataset<double> GetLineChartDataset()
    {
        return new LineChartDataset<double>
        {
            Label = ""# of randoms"",
            Data = RandomizeData(),
            BackgroundColor = backgroundColors,
            BorderColor = borderColors,
            Fill = true,
            PointRadius = 3,
            CubicInterpolationMode = ""monotone"",
        };
    }

    string[] Labels = { ""Red"", ""Blue"", ""Yellow"", ""Green"", ""Purple"", ""Orange"" };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 0.2f ), ChartColor.FromRgba( 54, 162, 235, 0.2f ), ChartColor.FromRgba( 255, 206, 86, 0.2f ), ChartColor.FromRgba( 75, 192, 192, 0.2f ), ChartColor.FromRgba( 153, 102, 255, 0.2f ), ChartColor.FromRgba( 255, 159, 64, 0.2f ) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 1f ), ChartColor.FromRgba( 54, 162, 235, 1f ), ChartColor.FromRgba( 255, 206, 86, 1f ), ChartColor.FromRgba( 75, 192, 192, 1f ), ChartColor.FromRgba( 153, 102, 255, 1f ), ChartColor.FromRgba( 255, 159, 64, 1f ) };

    List<double> RandomizeData()
    {
        var r = new Random( DateTime.Now.Millisecond );

        return new List<double> { 
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble() };
    }
}";

        public const string ChartHorizontalBarExample = @"<Button Color=""Color.Primary"" Clicked=""@(async () => await HandleRedraw())"">Redraw</Button>

<BarChart @ref=""barChart"" TItem=""double"" Options=""@options"" />

@code {
    BarChart<double> barChart;

    BarChartOptions options = new()
    {
        IndexAxis = ""y"",
        Elements = new()
        {
            Bar = new()
            {
                BorderWidth = 2,
            }
        },
        Responsive = true,
        Plugins = new()
        {
            Legend = new()
            {
                Position = ""right""
            },
            Title = new()
            {
                Display = true,
                    Text = ""Chart.js Horizontal Bar Chart""
            }
        }
    };

    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        if ( firstRender )
        {
            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        await barChart.Clear();

        await barChart.AddLabelsDatasetsAndUpdate( Labels,
            GetBarChartDataset( ""Dataset 1"" ),
            GetBarChartDataset( ""Dataset 2"" ) );
    }

    BarChartDataset<double> GetBarChartDataset( string label )
    {
        return new BarChartDataset<double>
        {
            Label = label,
            Data = RandomizeData(),
            BackgroundColor = backgroundColors,
            BorderColor = borderColors,
        };
    }

    string[] Labels = { ""Red"", ""Blue"", ""Yellow"", ""Green"", ""Purple"", ""Orange"" };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 0.2f ), ChartColor.FromRgba( 54, 162, 235, 0.2f ), ChartColor.FromRgba( 255, 206, 86, 0.2f ), ChartColor.FromRgba( 75, 192, 192, 0.2f ), ChartColor.FromRgba( 153, 102, 255, 0.2f ), ChartColor.FromRgba( 255, 159, 64, 0.2f ) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 1f ), ChartColor.FromRgba( 54, 162, 235, 1f ), ChartColor.FromRgba( 255, 206, 86, 1f ), ChartColor.FromRgba( 75, 192, 192, 1f ), ChartColor.FromRgba( 153, 102, 255, 1f ), ChartColor.FromRgba( 255, 159, 64, 1f ) };
    Random random = new Random( DateTime.Now.Millisecond );

    List<double> RandomizeData()
    {
        return new List<double> {
            random.Next( -50, 50 ) * random.NextDouble(),
            random.Next( -50, 50 ) * random.NextDouble(),
            random.Next( -50, 50 ) * random.NextDouble(),
            random.Next( -50, 50 ) * random.NextDouble(),
            random.Next( -50, 50 ) * random.NextDouble(),
            random.Next( -50, 50 ) * random.NextDouble() };
    }
}";

        public const string ChartImportsExample = @"@using Blazorise.Charts";

        public const string ChartNugetInstallExample = @"Install-Package Blazorise.Charts";

        public const string ChartResourcesExample = @"<script src=""https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.1/chart.min.js""></script>";

        public const string ChartDataLabelsExample = @"<LineChart @ref=""@lineChart"" TItem=""int"" Options=""@lineChartOptions"">
    <ChartDataLabels TItem=""int"" Datasets=""@lineDataLabelsDatasets"" Options=""@lineDataLabelsOptions"" />
</LineChart>

@code {
    private LineChart<int> lineChart;

    // define regular chart options
    LineChartOptions lineChartOptions = new()
    {
        AspectRatio = 5d / 3d,
        Layout = new()
        {
            Padding = new()
            {
                Top = 32,
                Right = 16,
                Bottom = 16,
                Left = 8
            }
        },
        Elements = new()
        {
            Line = new()
            {
                Fill = false,
                Tension = 0.4,
            }
        },
        Scales = new()
        {
            Y = new()
            {
                Stacked = true,
            }
        },
        Plugins = new()
        {
            Legend = new()
            {
                Display = false
            }
        }
    };

    // define specific dataset styles by targeting them with the DatasetIndex
    List<ChartDataLabelsDataset> lineDataLabelsDatasets = new()
    {
        new()
        {
            DatasetIndex = 0,
            Options = new()
            {
                BackgroundColor = BackgroundColors[0],
                BorderColor = BorderColors[0],
                Align = ""start"",
                Anchor = ""start""
            }
        },
        new()
        {
            DatasetIndex = 1,
            Options = new ()
            {
                BackgroundColor = BackgroundColors[1],
                BorderColor = BorderColors[1],
            }
        },
        new()
        {
            DatasetIndex = 2,
            Options = new ()
            {
                BackgroundColor = BackgroundColors[2],
                BorderColor = BorderColors[2],
                Align = ""end"",
                Anchor = ""end""
            }
        },
    };

    // some shared options for all data-labels
    ChartDataLabelsOptions lineDataLabelsOptions = new()
    {
        BorderRadius = 4,
        Color = ""#ffffff"",
        Font = new()
        {
            Weight = ""bold""
        },
        Formatter = ChartMathFormatter.Round,
        Padding = new( 6 )
    };

    private static string[] Labels = new string[] { ""1"", ""2"", ""3"", ""4"", ""5"", ""6"" };
    private static string[] BackgroundColors = new string[] { ""#4bc0c0"", ""#36a2eb"", ""#ff3d88"" };
    private static string[] BorderColors = new string[] { ""#4bc0c0"", ""#36a2eb"", ""#ff3d88"" };
    private Random random = new( DateTime.Now.Millisecond );

    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        if ( firstRender )
        {
            await HandleRedraw( lineChart, GetLineChartDataset );

            await lineChart.Clear();

            await lineChart.AddLabelsDatasetsAndUpdate( Labels,
                GetLineChartDataset( 0 ),
                GetLineChartDataset( 1 ),
                GetLineChartDataset( 2 ) );
        }
    }

    private async Task HandleRedraw<TDataSet, TItem, TOptions, TModel>( Blazorise.Charts.BaseChart<TDataSet, TItem, TOptions, TModel> chart, Func<int, TDataSet> getDataSet )
        where TDataSet : ChartDataset<TItem>
        where TOptions : ChartOptions
        where TModel : ChartModel
    {
        await chart.Clear();

        await chart.AddLabelsDatasetsAndUpdate( Labels,
            getDataSet( 0 ),
            getDataSet( 1 ),
            getDataSet( 2 ) );
    }

    private LineChartDataset<int> GetLineChartDataset( int colorIndex )
    {
        return new()
        {
            Label = ""# of randoms"",
            Data = RandomizeData( 2, 9 ),
            BackgroundColor = BackgroundColors[colorIndex],
            BorderColor = BorderColors[colorIndex],
        };
    }

    List<int> RandomizeData( int min, int max )
    {
        return Enumerable.Range( 0, Labels.Count() ).Select( x => random.Next( min, max ) ).ToList();
    }
}";

        public const string ChartDataLabelsNugetInstallExample = @"Install-Package Blazorise.Charts.DataLabels";

        public const string ChartDataLabelsResourcesExample = @"<script src=""https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0""></script>";

        public const string ChartDataLabelsScriptableExample = @"static Expression<Func<ScriptableOptionsContext, string>> TestScriptableColor = ( context ) => context.Active ? ""#ff0000"" : ""#4bc0c0"";

List<ChartDataLabelsDataset> lineDataLabelsDatasets = new()
{
    new()
    {
        DatasetIndex = 0,
        Options = new()
        {
            BackgroundColor = TestScriptableColor,
            BorderColor = TestScriptableColor,
            Align = ""start"",
            Anchor = ""start""
        }
    },
    ...
};";

        public const string ChartStreamingExample = @"<LineChart @ref=""horizontalLineChart"" TItem=""LiveDataPoint"" OptionsObject=""@horizontalLineChartOptions"">
    <ChartStreaming TItem=""LiveDataPoint""
                    Options=""new ChartStreamingOptions { Delay = 2000 }""
                    Refreshed=""@OnHorizontalLineRefreshed"" />
</LineChart>

@code{
    LineChart<LiveDataPoint> horizontalLineChart;
    Random random = new Random( DateTime.Now.Millisecond );

    string[] Labels = { ""Red"", ""Blue"", ""Yellow"", ""Green"", ""Purple"", ""Orange"" };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 0.2f ), ChartColor.FromRgba( 54, 162, 235, 0.2f ), ChartColor.FromRgba( 255, 206, 86, 0.2f ), ChartColor.FromRgba( 75, 192, 192, 0.2f ), ChartColor.FromRgba( 153, 102, 255, 0.2f ), ChartColor.FromRgba( 255, 159, 64, 0.2f ) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 1f ), ChartColor.FromRgba( 54, 162, 235, 1f ), ChartColor.FromRgba( 255, 206, 86, 1f ), ChartColor.FromRgba( 75, 192, 192, 1f ), ChartColor.FromRgba( 153, 102, 255, 1f ), ChartColor.FromRgba( 255, 159, 64, 1f ) };

    public struct LiveDataPoint
    {
        public object X { get; set; }

        public object Y { get; set; }
    }

    object horizontalLineChartOptions = new
    {
        Scales = new
        {
            Y = new
            {
                Title = new
                {
                    Display = true,
                    Text = ""Value""
                }
            }
        },
        Interaction = new
        {
            intersect = false
        }
    };

    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        if ( firstRender )
        {
            await Task.WhenAll(
                HandleRedraw( horizontalLineChart, GetLineChartDataset1 ) );
        }
    }

    async Task HandleRedraw<TDataSet, TItem, TOptions, TModel>( BaseChart<TDataSet, TItem, TOptions, TModel> chart, params Func<TDataSet>[] getDataSets )
        where TDataSet : ChartDataset<TItem>
        where TOptions : ChartOptions
        where TModel : ChartModel
    {
        await chart.Clear();

        await chart.AddLabelsDatasetsAndUpdate( Labels, getDataSets.Select( x => x.Invoke() ).ToArray() );
    }

    LineChartDataset<LiveDataPoint> GetLineChartDataset1()
    {
        return new LineChartDataset<LiveDataPoint>
        {
            Data = new List<LiveDataPoint>(),
            Label = ""Dataset 1 (linear interpolation)"",
            BackgroundColor = backgroundColors[0],
            BorderColor = borderColors[0],
            Fill = false,
            Tension = 0,
            BorderDash = new List<int> { 8, 4 },
        };
    }

    Task OnHorizontalLineRefreshed( ChartStreamingData<LiveDataPoint> data )
    {
        data.Value = new LiveDataPoint
        {
            X = DateTime.Now,
            Y = RandomScalingFactor(),
        };

        return Task.CompletedTask;
    }

    double RandomScalingFactor()
    {
        return ( random.NextDouble() > 0.5 ? 1.0 : -1.0 ) * Math.Round( random.NextDouble() * 100 );
    }
}";

        public const string ChartStreamingNugetInstallExample = @"Install-Package Blazorise.Charts.Streaming";

        public const string ChartStreamingPauseExample = @"<LineChart @ref=""@horizontalLineChart"" TItem=""LiveDataPoint"" OptionsObject=""@horizontalLineChartOptions"">
    <ChartStreaming @ref=""@chartStreaming""
                    TItem=""LiveDataPoint""
                    Options=""new ChartStreamingOptions { Delay = 2000 }""
                    Refreshed=""@OnHorizontalLineRefreshed"" />
</LineChart>

<Row>
    <Column>
        <Button Color=""Color.Primary"" Clicked=""@(()=>chartStreaming.Pause())"">Pause</Button>
        <Button Color=""Color.Primary"" Clicked=""@(()=>chartStreaming.Play())"">Play</Button>
    </Column>
</Row>

@code{
    LineChart<LiveDataPoint> horizontalLineChart;
    ChartStreaming<LiveDataPoint>  chartStreaming;
    Random random = new Random( DateTime.Now.Millisecond );

    string[] Labels = { ""Red"", ""Blue"", ""Yellow"", ""Green"", ""Purple"", ""Orange"" };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 0.2f ), ChartColor.FromRgba( 54, 162, 235, 0.2f ), ChartColor.FromRgba( 255, 206, 86, 0.2f ), ChartColor.FromRgba( 75, 192, 192, 0.2f ), ChartColor.FromRgba( 153, 102, 255, 0.2f ), ChartColor.FromRgba( 255, 159, 64, 0.2f ) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 1f ), ChartColor.FromRgba( 54, 162, 235, 1f ), ChartColor.FromRgba( 255, 206, 86, 1f ), ChartColor.FromRgba( 75, 192, 192, 1f ), ChartColor.FromRgba( 153, 102, 255, 1f ), ChartColor.FromRgba( 255, 159, 64, 1f ) };

    public struct LiveDataPoint
    {
        public object X { get; set; }

        public object Y { get; set; }
    }

    object horizontalLineChartOptions = new
    {
        Scales = new
        {
            Y = new
            {
                Title = new
                {
                    Display = true,
                    Text = ""Value""
                }
            }
        },
        Interaction = new
        {
            intersect = false
        }
    };

    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        if ( firstRender )
        {
            await Task.WhenAll(
                HandleRedraw( horizontalLineChart, GetLineChartDataset1 ) );
        }
    }

    async Task HandleRedraw<TDataSet, TItem, TOptions, TModel>( BaseChart<TDataSet, TItem, TOptions, TModel> chart, params Func<TDataSet>[] getDataSets )
        where TDataSet : ChartDataset<TItem>
        where TOptions : ChartOptions
        where TModel : ChartModel
    {
        await chart.Clear();

        await chart.AddLabelsDatasetsAndUpdate( Labels, getDataSets.Select( x => x.Invoke() ).ToArray() );
    }

    LineChartDataset<LiveDataPoint> GetLineChartDataset1()
    {
        return new LineChartDataset<LiveDataPoint>
        {
            Data = new List<LiveDataPoint>(),
            Label = ""Dataset 1 (linear interpolation)"",
            BackgroundColor = backgroundColors[0],
            BorderColor = borderColors[0],
            Fill = false,
            Tension = 0,
            BorderDash = new List<int> { 8, 4 },
        };
    }

    Task OnHorizontalLineRefreshed( ChartStreamingData<LiveDataPoint> data )
    {
        data.Value = new LiveDataPoint
        {
            X = DateTime.Now,
            Y = RandomScalingFactor(),
        };

        return Task.CompletedTask;
    }

    double RandomScalingFactor()
    {
        return ( random.NextDouble() > 0.5 ? 1.0 : -1.0 ) * Math.Round( random.NextDouble() * 100 );
    }
}";

        public const string ChartStreamingResourcesExample = @"<script src=""https://cdn.jsdelivr.net/npm/luxon@1.28.1""></script>
<script src=""https://cdn.jsdelivr.net/npm/chartjs-adapter-luxon@1.0.0""></script>
<script src=""https://cdn.jsdelivr.net/npm/chartjs-plugin-streaming@2.0.0""></script>";

        public const string ChartTrendlineExample = @"@using Blazorise.Charts
@using Blazorise.Charts.Trendline

<Button Color=""Color.Primary"" Clicked=""@OnButtonClicked"">Toggle trendline and redraw</Button>

<Chart @ref=""chart"" TItem=""double?"" Type=""ChartType.Line"">
    <ChartTrendline @ref=""chartTrendline"" TItem=""double?"" />
</Chart>

@code {
    Chart<double?> chart;
    ChartTrendline<double?> chartTrendline;

    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        if ( firstRender )
        {
            await HandleRedraw();
        }
    }

    bool trendlinesOn = true;
    async Task OnButtonClicked()
    {
        trendlinesOn = !trendlinesOn;

        await HandleRedraw();
    }

    async Task HandleRedraw()
    {
        await chart.Clear();

        await chart.AddLabels( Labels );
        await chart.AddDataSet( GetLineChartDataset() );
        await chart.AddDataSet( GetLineChartDataset() );

        await chart.Update();

        // Add the trendline(s) after you have added the datasets and called await chart.Update();
        if ( trendlinesOn )
        {
            // This will add a trendline to the second dataset.
            // If you want to add it to the first dataset, set DatasetIndex = 0 (or don't set it at all as 0 is default)
            var trendlineData = new List<ChartTrendlineData>
            {
                new ChartTrendlineData
                {
                    DatasetIndex = 1,
                    Width = 10,
                    Color = ChartColor.FromRgba( 54, 162, 235, .6f )
                }
            };

            await chartTrendline.AddTrendLineOptions( trendlineData );
        }
    }

    LineChartDataset<double?> GetLineChartDataset()
    {
        return new LineChartDataset<double?>
            {
                Label = ""# of randoms"",
                Data = RandomizeData(),
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
                Fill = true,
                PointRadius = 2,
                BorderDash = new List<int> { }
            };
    }

    string[] Labels = { ""0"", ""1"", ""2"", ""3"", ""4"", ""5"" };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 0.2f ), ChartColor.FromRgba( 54, 162, 235, 0.2f ), ChartColor.FromRgba( 255, 206, 86, 0.2f ), ChartColor.FromRgba( 75, 192, 192, 0.2f ), ChartColor.FromRgba( 153, 102, 255, 0.2f ), ChartColor.FromRgba( 255, 159, 64, 0.2f ) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 1f ), ChartColor.FromRgba( 54, 162, 235, 1f ), ChartColor.FromRgba( 255, 206, 86, 1f ), ChartColor.FromRgba( 75, 192, 192, 1f ), ChartColor.FromRgba( 153, 102, 255, 1f ), ChartColor.FromRgba( 255, 159, 64, 1f ) };

    List<double?> RandomizeData()
    {
        var r = new Random( DateTime.Now.Millisecond );

        return new List<double?> { r.Next( 3, 20 ) * r.NextDouble(), r.Next( 3, 30 ) * r.NextDouble(), r.Next( 3, 40 ) * r.NextDouble(), r.Next( 3, 50 ) * r.NextDouble(), r.Next( 3, 60 ) * r.NextDouble(), r.Next( 3, 70 ) * r.NextDouble() };
    }
}";

        public const string ChartTrendlineNugetInstallExample = @"Install-Package Blazorise.Charts.Trendline";

        public const string ChartTrendlineResourcesExample = @"<script src=""https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.1/chart.min.js""></script>
<script src=""https://cdn.jsdelivr.net/npm/chartjs-plugin-trendline""></script>";

        public const string BasicCropperExample = @"<Row>
    <Column>
        <FieldLabel>
            Image Cropper
        </FieldLabel>
        <FieldBody>
            <Cropper @ref=""cropper"" Source=""img/gallery/6.jpg"" SelectionChanged=""@OnSelectionChanged"" Style=""aspect-ratio: 16 / 9; height: 100%;"" />
        </FieldBody>
    </Column>
    <Column>
        <Div Margin=""Margin.Is2.FromBottom"">
            <Button Color=""Color.Primary"" Clicked=""@GetCroppedImage"" Disabled=""@cropButtonDisabled"">Get Cropped Image</Button>
            <Button Color=""Color.Secondary"" Clicked=""@ResetSelection"" Disabled=""@cropButtonDisabled"">Reset Selection</Button>
        </Div>
        <Image Source=""@result"" Border=""Border.Is1"" Style=""width: 250px; height: 250px;"" />
    </Column>
</Row>

@code {
    private Cropper cropper;
    private string result;
    private bool cropButtonDisabled = true;

    private Task OnSelectionChanged( CropperSelectionChangedEventArgs eventArgs )
    {
        if ( eventArgs.Width != 0 )
        {
            cropButtonDisabled = false;

            return InvokeAsync( StateHasChanged );
        }

        return Task.CompletedTask;
    }

    private async Task GetCroppedImage()
    {
        result = await cropper.CropAsBase64ImageAsync( new() { Width = 250, Height = 250 } );
    }

    private async Task ResetSelection()
    {
        cropButtonDisabled = true;

        await cropper.ResetSelection();
    }
}";

        public const string CropperNugetInstallExample = @"Install-Package Blazorise.Cropper";

        public const string CropperViewerExample = @"<Row>
    <Column>
        <FieldLabel>
            Image Cropper
        </FieldLabel>
        <FieldBody>
            <Cropper Source=""img/gallery/3.jpg"" CropperState=""@cropperState"" />
        </FieldBody>
    </Column>
    <Column>
        <FieldLabel>
            Preview
        </FieldLabel>
        <FieldBody>
            <CropperViewer CropperState=""@cropperState"" Margin=""Margin.Is2.FromBottom"" Style=""width: 150px; height: 150px;"" />
            <CropperViewer CropperState=""@cropperState"" Margin=""Margin.Is2.FromBottom"" Style=""width: 100px; height: 100px;"" />
            <CropperViewer CropperState=""@cropperState"" Margin=""Margin.Is2.FromBottom"" Style=""width: 50px; height: 50px;"" />
        </FieldBody>
    </Column>
</Row>

@code {
    private CropperState cropperState = new();
}";

        public const string ImportCropperExample = @"@using Blazorise.Cropper";

        public const string DataGridAggregatesExample = @"<DataGrid TItem=""Employee"" Data=""@employeeList"" Responsive>
    <DataGridAggregates>
        <DataGridAggregate Field=""@nameof( Employee.Email )"" Aggregate=""DataGridAggregateType.Count"">
            <DisplayTemplate>
                @($""Total emails: {context.Value}"")
            </DisplayTemplate>
        </DataGridAggregate>
        <DataGridAggregate Field=""@nameof( Employee.Salary )"" Aggregate=""DataGridAggregateType.Sum"" DisplayFormat=""{0:C}"" DisplayFormatProvider=""@System.Globalization.CultureInfo.GetCultureInfo(""fr-FR"")"" />
        <DataGridAggregate Field=""@nameof( Employee.IsActive )"" Aggregate=""DataGridAggregateType.TrueCount"" />
    </DataGridAggregates>
    <DataGridColumns>
        <DataGridColumn Field=""@nameof(Employee.Id)"" Caption=""#"" Sortable=""false"" />
        <DataGridColumn Field=""@nameof(Employee.FirstName)"" Caption=""First Name"" Editable />
        <DataGridColumn Field=""@nameof(Employee.LastName)"" Caption=""Last Name"" Editable />
        <DataGridColumn Field=""@nameof(Employee.Email)"" Caption=""Email"" Editable />
        <DataGridColumn Field=""@nameof(Employee.Salary)"" Caption=""Salary"" DisplayFormat=""{0:C}"" DisplayFormatProvider=""@System.Globalization.CultureInfo.GetCultureInfo(""fr-FR"")"" Editable>
            <EditTemplate>
                <NumericEdit TValue=""decimal"" Value=""@((decimal)context.CellValue)"" ValueChanged=""@( v => context.CellValue = v)"" />
            </EditTemplate>
        </DataGridColumn>
    </DataGridColumns>
</DataGrid>

@code {
    [Inject]
    public EmployeeData EmployeeData { get; set; }
    private List<Employee> employeeList;

    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeData.GetDataAsync();
        await base.OnInitializedAsync();
    }
}";

        public const string DataGridAggregatesLargeDataExample = @"<DataGrid TItem=""Employee""
          Data=""@employeeList""
          ReadData=""@OnReadData""
          TotalItems=""@totalEmployees""
          AggregateData=""@employeeSummary""
          Responsive>
    <DataGridAggregates>
        <DataGridAggregate Field=""@nameof( Employee.Email )"" Aggregate=""DataGridAggregateType.Count"">
            <DisplayTemplate>
                @($""Total emails: {context.Value}"")
            </DisplayTemplate>
        </DataGridAggregate>
        <DataGridAggregate Field=""@nameof( Employee.Salary )"" Aggregate=""DataGridAggregateType.Sum"" DisplayFormat=""{0:C}"" DisplayFormatProvider=""@System.Globalization.CultureInfo.GetCultureInfo(""fr-FR"")"" />
        <DataGridAggregate Field=""@nameof( Employee.IsActive )"" Aggregate=""DataGridAggregateType.TrueCount"" />
    </DataGridAggregates>
    <DataGridColumns>
        <DataGridColumn Field=""@nameof(Employee.Id)"" Caption=""#"" Sortable=""false"" />
        <DataGridColumn Field=""@nameof(Employee.FirstName)"" Caption=""First Name"" Editable />
        <DataGridColumn Field=""@nameof(Employee.LastName)"" Caption=""Last Name"" Editable />
        <DataGridColumn Field=""@nameof(Employee.Email)"" Caption=""Email"" Editable />
        <DataGridColumn Field=""@nameof(Employee.Salary)"" Caption=""Salary"" DisplayFormat=""{0:C}"" DisplayFormatProvider=""@System.Globalization.CultureInfo.GetCultureInfo(""fr-FR"")"" Editable>
            <EditTemplate>
                <NumericEdit TValue=""decimal"" Value=""@((decimal)context.CellValue)"" ValueChanged=""@( v => context.CellValue = v)"" />
            </EditTemplate>
        </DataGridColumn>
    </DataGridColumns>
</DataGrid>

@code{
    [Inject]
    public EmployeeData EmployeeData { get; set; }
    private List<Employee> employeeList;

    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeData.GetDataAsync();
        await base.OnInitializedAsync();
    }

    private int totalEmployees;
    private List<Employee> employeeSummary;

    private Task OnReadData( DataGridReadDataEventArgs<Employee> e )
    {
        if ( !e.CancellationToken.IsCancellationRequested )
        {
            List<Employee> response = null;

            // this can be call to anything, in this case we're calling a fictional api
            //var response = await Http.GetJsonAsync<Employee[]>( $""some-api/employees?page={e.Page}&pageSize={e.PageSize}"" );
            if ( e.ReadDataMode is DataGridReadDataMode.Virtualize )
                response = employeeList.Skip( e.VirtualizeOffset ).Take( e.VirtualizeCount ).ToList();
            else if ( e.ReadDataMode is DataGridReadDataMode.Paging )
                response = employeeList.Skip( ( e.Page - 1 ) * e.PageSize ).Take( e.PageSize ).ToList();
            else
                throw new Exception( ""Unhandled ReadDataMode"" );


            if ( !e.CancellationToken.IsCancellationRequested )
            {
                totalEmployees = employeeList.Count;
                employeeList = new List<Employee>( response ); // an actual data for the current page
                                                               //var aggregateResponse = await Http.GetJsonAsync<Employee[]>( $""some-aggregate-api/employees"" );
                employeeSummary = employeeList; //aggregateResponse.Data
            }
        }
        return Task.CompletedTask;
    }
}";

        public const string DataGridAnnotationExample = @"public class Employee
{
	[Required]
	public string FirstName { get; set; }

	[Required]
	public string LastName { get; set; }
}";

        public const string DataGridButtonRowExample = @"<DataGrid TItem=""Employee""
          Data=""@employeeList""
          @bind-SelectedRow=""@selectedEmployee""
          Editable
          Responsive
          ShowPager
          CommandMode=""DataGridCommandMode.ButtonRow"">
    <DataGridColumns>
        <DataGridColumn Field=""@nameof(Employee.Id)"" Caption=""#"" Sortable=""false"" />
        <DataGridColumn Field=""@nameof(Employee.FirstName)"" Caption=""First Name"" Editable />
        <DataGridColumn Field=""@nameof(Employee.LastName)"" Caption=""Last Name"" Editable />
        <DataGridColumn Field=""@nameof(Employee.Email)"" Caption=""Email"" Editable />
        <DataGridColumn Field=""@nameof(Employee.Salary)"" Caption=""Salary"" DisplayFormat=""{0:C}"" DisplayFormatProvider=""@System.Globalization.CultureInfo.GetCultureInfo(""fr-FR"")"" Editable>
            <EditTemplate>
                <NumericEdit TValue=""decimal"" Value=""@((decimal)context.CellValue)"" ValueChanged=""@( v => context.CellValue = v)"" />
            </EditTemplate>
        </DataGridColumn>
    </DataGridColumns>
    <ButtonRowTemplate>
        <Button Color=""Color.Success"" Clicked=""context.NewCommand.Clicked"">New</Button>
        <Button Color=""Color.Primary"" Disabled=""(selectedEmployee is null)"" Clicked=""context.EditCommand.Clicked"">Edit</Button>
        <Button Color=""Color.Danger"" Disabled=""(selectedEmployee is null)"" Clicked=""context.DeleteCommand.Clicked"">Delete</Button>
    </ButtonRowTemplate>
</DataGrid>

@code{
    [Inject]
    public EmployeeData EmployeeData { get; set; }
    private List<Employee> employeeList;
    private Employee selectedEmployee;

    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeData.GetDataAsync();
        await base.OnInitializedAsync();
    }
}";

        public const string DataGridCommandTemplatesExample = @"<DataGrid TItem=""Employee""
          Data=""@employeeList""
          @bind-SelectedRow=""@selectedEmployee""
          Editable
          Responsive>
    <DataGridCommandColumn>
        <NewCommandTemplate>
            <Button Color=""Color.Success"" Clicked=""@context.Clicked"">New</Button>
        </NewCommandTemplate>
        <EditCommandTemplate>
            <Button Color=""Color.Primary"" Clicked=""@context.Clicked"">Edit</Button>
        </EditCommandTemplate>
    </DataGridCommandColumn>
    <DataGridColumn Field=""@nameof(Employee.Id)"" Caption=""#"" Sortable=""false"" />
    <DataGridColumn Field=""@nameof(Employee.FirstName)"" Caption=""First Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.LastName)"" Caption=""Last Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Email)"" Caption=""Email"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Salary)"" Caption=""Salary"" DisplayFormat=""{0:C}"" DisplayFormatProvider=""@System.Globalization.CultureInfo.GetCultureInfo(""fr-FR"")"" Editable>
        <EditTemplate>
            <NumericEdit TValue=""decimal"" Value=""@((decimal)context.CellValue)"" ValueChanged=""@( v => context.CellValue = v)"" />
        </EditTemplate>
    </DataGridColumn>
</DataGrid>

@code{
    [Inject]
    public EmployeeData EmployeeData { get; set; }
    private List<Employee> employeeList;
    private Employee selectedEmployee;

    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeData.GetDataAsync();
        await base.OnInitializedAsync();
    }
}";

        public const string DataGridContextMenuExample = @"@using System.Drawing

<DataGrid @ref=""@dataGridRef""
          TItem=""Employee""
          Data=""@employeeList""
          @bind-SelectedRow=""@selectedEmployee""
          RowContextMenu=""@OnRowContextMenu""
          RowContextMenuPreventDefault=""true""
          Responsive
          Editable>
    <DataGridColumn Field=""@nameof(Employee.Id)"" Caption=""#"" Sortable=""false"" />
    <DataGridColumn Field=""@nameof(Employee.FirstName)"" Caption=""First Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.LastName)"" Caption=""Last Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Email)"" Caption=""Email"" Editable />
</DataGrid>

@if ( showContextMenu )
{
    <Div Position=""Position.Fixed"" Background=""Background.Danger"" Style=""@($""left:{contextMenuPos.X}px;top:{contextMenuPos.Y}px;"")"">
        <ListGroup>
            <ListGroupItem Clicked=""@(()=>OnContextItemEditClicked(contextMenuEmployee))"">
                <Icon Name=""IconName.Edit"" TextColor=""TextColor.Secondary"" /> Edit
            </ListGroupItem>
            <ListGroupItem Clicked=""@(()=>OnContextItemDeleteClicked(contextMenuEmployee))"">
                <Icon Name=""IconName.Delete"" TextColor=""TextColor.Danger"" /> Delete
            </ListGroupItem>
        </ListGroup>
    </Div>
}

@code {
    [Inject]
    public EmployeeData EmployeeData { get; set; }
    private List<Employee> employeeList;
    private Employee selectedEmployee;
    private DataGrid<Employee> dataGridRef;

    bool showContextMenu = false;
    Employee contextMenuEmployee;
    Point contextMenuPos;

    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeData.GetDataAsync();
        await base.OnInitializedAsync();
    }

    protected Task OnRowContextMenu( DataGridRowMouseEventArgs<Employee> eventArgs )
    {
        showContextMenu = true;
        contextMenuEmployee = eventArgs.Item;
        contextMenuPos = eventArgs.MouseEventArgs.Client;

        return Task.CompletedTask;
    }

    protected async Task OnContextItemEditClicked( Employee employee )
    {
        await dataGridRef.Edit( employee );

        showContextMenu = false;
    }

    protected async Task OnContextItemDeleteClicked( Employee employee )
    {
        await dataGridRef.Delete( employee );

        showContextMenu = false;
    }
}";

        public const string DataGridCustomColumnFilteringExample = @"<DataGrid TItem=""Employee""
          Data=""@employeeList""
          Filterable
          Responsive>
    <DataGridColumn Field=""@nameof( Employee.FirstName )"" Caption=""Name"" Editable=""false""></DataGridColumn>
    <DataGridSelectColumn CustomFilter=""@OnGenderCustomFilter"" Field=""@nameof( Employee.Gender )"" Caption=""Gender"" Editable>
        <FilterTemplate>
            <Select TValue=""string"" SelectedValue=""@selectedGenderFilter"" SelectedValueChanged=""@(value => { selectedGenderFilter = value; context.TriggerFilterChange( selectedGenderFilter ); })"">
                <SelectItem Value=""@(""*"")"">All</SelectItem>
                <SelectItem Value=""@(""M"")"">Male</SelectItem>
                <SelectItem Value=""@(""F"")"">Female</SelectItem>
                <SelectItem Value=""@(""D"")"">Diverse</SelectItem>
            </Select>
        </FilterTemplate>
    </DataGridSelectColumn>
</DataGrid>

@code{
    private List<Employee> employeeList = new() { new() { FirstName = ""David"", Gender = ""M"" }, new() { FirstName = ""Mladen"", Gender = ""M"" }, new() { FirstName = ""John"", Gender = ""M"" }, new() { FirstName = ""Ana"", Gender = ""F"" }, new() { FirstName = ""Jessica"", Gender = ""F"" } };

    string selectedGenderFilter;

    private bool OnGenderCustomFilter( object itemValue, object searchValue )
    {
        if ( searchValue is string genderFilter )
        {
            return genderFilter == ""*"" || genderFilter == itemValue?.ToString();
        }

        return true;
    }

}";

        public const string DataGridCustomFilteringExample = @"Custom Filter: <TextEdit Text=""@customFilterValue"" TextChanged=""@OnCustomFilterValueChanged""></TextEdit>

<DataGrid @ref=""dataGrid""
          TItem=""Employee""
          Data=""@employeeList""
          CustomFilter=""@OnCustomFilter""
          Responsive>
    <DataGridColumn Field=""@nameof( Employee.FirstName )"" Caption=""Name"" Editable=""false""></DataGridColumn>
</DataGrid>

@code{
    private DataGrid<Employee> dataGrid;
    private List<Employee> employeeList = new() { new() { FirstName = ""David"" }, new() { FirstName = ""MLaden"" }, new() { FirstName = ""John"" }, new() { FirstName = ""Ana"" }, new() { FirstName = ""Jessica"" } };

    private string customFilterValue;

    private Task OnCustomFilterValueChanged( string e )
    {
        customFilterValue = e;
        return dataGrid.Reload();
    }

    private bool OnCustomFilter( Employee model )
    {
        // We want to accept empty value as valid or otherwise
        // datagrid will not show anything.
        if ( string.IsNullOrEmpty( customFilterValue ) )
            return true;

        return model.FirstName?.Contains( customFilterValue, StringComparison.OrdinalIgnoreCase ) == true;
    }

}";

        public const string DataGridCustomRowColorsExample = @"<DataGrid TItem=""Employee""
          Data=""@employeeList""
          @bind-SelectedRow=""@selectedEmployee""
          RowStyling=""@OnRowStyling""
          SelectedRowStyling=""@OnSelectedRowStyling""
          Responsive>
    <DataGridCommandColumn />
    <DataGridColumn Field=""@nameof(Employee.Id)"" Caption=""#"" Sortable=""false"" />
    <DataGridColumn Field=""@nameof(Employee.FirstName)"" Caption=""First Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.LastName)"" Caption=""Last Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Email)"" Caption=""Email"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Salary)"" Caption=""Salary"" DisplayFormat=""{0:C}"" DisplayFormatProvider=""@System.Globalization.CultureInfo.GetCultureInfo(""fr-FR"")"" Editable>
        <EditTemplate>
            <NumericEdit TValue=""decimal"" Value=""@((decimal)context.CellValue)"" ValueChanged=""@( v => context.CellValue = v)"" />
        </EditTemplate>
    </DataGridColumn>
</DataGrid>

@code{
    [Inject]
    public EmployeeData EmployeeData { get; set; }
    private List<Employee> employeeList;
    private Employee selectedEmployee;

    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeData.GetDataAsync();
        await base.OnInitializedAsync();
    }

    private void OnRowStyling( Employee employee, DataGridRowStyling styling )
    {
        if ( !employee.IsActive )
            styling.Style = ""color: red;"";
    }

    private void OnSelectedRowStyling( Employee employee, DataGridRowStyling styling )
    {
        styling.Background = Background.Info;
    }
}";

        public const string DataGridDetailRowTemplateExample = @"<DataGrid TItem=""Employee""
          Data=""@employeeList""
          @bind-SelectedRow=""@selectedEmployee""
          DetailRowTrigger=""@((e) => e.Item.Salaries?.Count > 0 && e.Item.Id == selectedEmployee?.Id)""
          Responsive>
    <DataGridColumns>
        <DataGridCommandColumn />
        <DataGridColumn Field=""@nameof(Employee.FirstName)"" Caption=""First Name"" />
    </DataGridColumns>
    <DetailRowTemplate>
        @{
            var salaries = ( context as Employee ).Salaries;

            <DataGrid TItem=""Salary""
                      Data=""salaries""
                      Sortable=""false""
                      ShowCaptions=""false"">
                <DataGridCommandColumn />
                <DataGridDateColumn Field=""@nameof(Salary.Date)"" Caption=""Date"" />
                <DataGridNumericColumn Field=""@nameof(Salary.Total)"" Caption=""Total"" />
            </DataGrid>
        }
    </DetailRowTemplate>
</DataGrid>

@code{
    [Inject]
    public EmployeeData EmployeeData { get; set; }
    private List<Employee> employeeList;
    private Employee selectedEmployee;

    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeData.GetDataAsync();
        await base.OnInitializedAsync();
    }
}";

        public const string DataGridDisplayTemplateExample = @"<DataGrid TItem=""Employee""
          Data=""@employeeList""
          Responsive>
    <DataGridNumericColumn Field=""@nameof(Employee.DateOfBirth)"" Caption=""Date Of Birth"" Editable>
    <DisplayTemplate>
        @{
            var date = ( context as Employee )?.DateOfBirth;

            if ( date != null )
            {
                @($""{date.Value.ToShortDateString()} | Age: {( DateTime.Now.Year - date.Value.Year )}"")
            }
        }
    </DisplayTemplate>
</DataGridNumericColumn>
</DataGrid>

@code{
    [Inject]
    public EmployeeData EmployeeData { get; set; }
    private List<Employee> employeeList;


    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeData.GetDataAsync();
        await base.OnInitializedAsync();
    }
}";

        public const string DataGridEditModeExample = @"<Field>
    <FieldLabel>
        Edit Mode
    </FieldLabel>
    <FieldBody>
        <Select @bind-SelectedValue=""@editMode"">
            <SelectItem Value=""DataGridEditMode.Form"">Form</SelectItem>
            <SelectItem Value=""DataGridEditMode.Inline"">Inline</SelectItem>
            <SelectItem Value=""DataGridEditMode.Popup"">Popup</SelectItem>
        </Select>
    </FieldBody>
</Field>

<DataGrid TItem=""Employee""
          Data=""@employeeList""
          @bind-SelectedRow=""@selectedEmployee""
          Editable
          Responsive
          ShowPager
          CommandMode=""DataGridCommandMode.ButtonRow""
          EditMode=""editMode"">
    <DataGridColumns>
        <DataGridCommandColumn  NewCommandAllowed=""false"" EditCommandAllowed=""false"" DeleteCommandAllowed=""false""  >
            <SaveCommandTemplate>
                <Button ElementId=""btnSave"" Type=""ButtonType.Submit"" PreventDefaultOnSubmit Color=""Color.Primary"" Clicked=""@context.Clicked"">@context.LocalizationString</Button>
            </SaveCommandTemplate>
            <CancelCommandTemplate>
                <Button ElementId=""btnCancel"" Color=""Color.Secondary"" Clicked=""@context.Clicked"">@context.LocalizationString</Button>
            </CancelCommandTemplate>
        </DataGridCommandColumn>
        <DataGridColumn Field=""@nameof(Employee.Id)"" Caption=""#"" Sortable=""false"" />
        <DataGridColumn Field=""@nameof(Employee.FirstName)"" Caption=""First Name"" Editable />
        <DataGridColumn Field=""@nameof(Employee.LastName)"" Caption=""Last Name"" Editable />
        <DataGridColumn Field=""@nameof(Employee.Email)"" Caption=""Email"" Editable />
        <DataGridColumn Field=""@nameof(Employee.Salary)"" Caption=""Salary"" DisplayFormat=""{0:C}"" DisplayFormatProvider=""@System.Globalization.CultureInfo.GetCultureInfo(""fr-FR"")"" Editable>
            <EditTemplate>
                <NumericEdit TValue=""decimal"" Value=""@((decimal)context.CellValue)"" ValueChanged=""@( v => context.CellValue = v)"" />
            </EditTemplate>
        </DataGridColumn>
    </DataGridColumns>
    <ButtonRowTemplate>
        <Button Color=""Color.Success"" Clicked=""context.NewCommand.Clicked"">New</Button>
        <Button Color=""Color.Primary"" Disabled=""(selectedEmployee is null)"" Clicked=""context.EditCommand.Clicked"">Edit</Button>
        <Button Color=""Color.Danger"" Disabled=""(selectedEmployee is null)"" Clicked=""context.DeleteCommand.Clicked"">Delete</Button>
        <Button Color=""Color.Link"" Clicked=""context.ClearFilterCommand.Clicked"">Clear Filter</Button>
    </ButtonRowTemplate>
</DataGrid>

@code{
    [Inject]
    public EmployeeData EmployeeData { get; set; }
    private List<Employee> employeeList;
    private Employee selectedEmployee;
    private DataGridEditMode editMode = DataGridEditMode.Form;

    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeData.GetDataAsync();
        await base.OnInitializedAsync();
    }
}";

        public const string DataGridEditTemplateExample = @"<DataGrid TItem=""Employee""
          Data=""@employeeList""
          Editable
          Responsive>
    <DataGridCommandColumn />
    <DataGridColumn Field=""@nameof(Employee.Salary)"" Caption=""Salary"" DisplayFormat=""{0:C}"" DisplayFormatProvider=""@System.Globalization.CultureInfo.GetCultureInfo(""fr-FR"")"" Editable>
        <EditTemplate>
            <NumericEdit TValue=""decimal"" Value=""@((decimal)context.CellValue)"" ValueChanged=""@( v => context.CellValue = v)"" />
        </EditTemplate>
    </DataGridColumn>
</DataGrid>

@code{
    [Inject]
    public EmployeeData EmployeeData { get; set; }
    private List<Employee> employeeList;

    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeData.GetDataAsync();
        await base.OnInitializedAsync();
    }
}";

        public const string DataGridEmptyCellTemplateExample = @"<DataGrid TItem=""Employee""
          Data=""@employeeList""
          @bind-SelectedRow=""@selectedEmployee""
          TotalItems=""@totalEmployees""
          ReadData=""@LoadEmployeesFromService""
          Responsive>
    <DataGridColumns>
        <DataGridCommandColumn />
        <DataGridColumn Field=""@nameof(Employee.Id)"" Caption=""#"" Sortable=""false"" />
        <DataGridColumn Field=""@nameof(Employee.FirstName)"" Caption=""First Name"" Editable />
        <DataGridColumn Field=""@nameof(Employee.LastName)"" Caption=""Last Name"" Editable />
        <DataGridColumn Field=""@nameof(Employee.Email)"" Caption=""Email"" Editable />
        <DataGridColumn Field=""@nameof(Employee.Salary)"" Caption=""Salary"" DisplayFormat=""{0:C}"" DisplayFormatProvider=""@System.Globalization.CultureInfo.GetCultureInfo(""fr-FR"")"" Editable>
            <EditTemplate>
                <NumericEdit TValue=""decimal"" Value=""@((decimal)context.CellValue)"" ValueChanged=""@( v => context.CellValue = v)"" />
            </EditTemplate>
        </DataGridColumn>
    </DataGridColumns>
    <EmptyTemplate>
        <div class=""box"">
            No employees are found!
        </div>
    </EmptyTemplate>
    <LoadingTemplate>
        <div class=""box"">
            <progress class=""progress is-small is-primary"" max=""100"" />
        </div>
    </LoadingTemplate>
    <EmptyCellTemplate>
        <Text Style=""opacity: .5;"">-</Text>
    </EmptyCellTemplate>
</DataGrid>

@code{
    [Inject]
    public EmployeeData EmployeeData { get; set; }
    private List<Employee> employeeList;
    private Employee selectedEmployee;

    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeData.GetDataAsync();
        await base.OnInitializedAsync();
    }

    private int totalEmployees;

    public Task LoadEmployeesFromService( DataGridReadDataEventArgs<Employee> e )
    {
        totalEmployees = 10;

        /*
        * This can be call to anything like calling api for load employees
        * and while execution 'LoadingTemplate' will be displayed.
        * If your api call returns empty result, then 'EmptyTemplate' will be displayed,
        * so that you can see easily, that your loading is finish, but your result is empty.
        */
        return Task.Delay( 2000 );
    }
}";

        public const string DataGridExample = @"<DataGrid TItem=""Employee""
          Data=""@employeeList""
          @bind-SelectedRow=""@selectedEmployee""
          Responsive>
    <DataGridCommandColumn />
    <DataGridColumn Field=""@nameof(Employee.Id)"" Caption=""#"" Sortable=""false"" />
    <DataGridColumn Field=""@nameof(Employee.FirstName)"" Caption=""First Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.LastName)"" Caption=""Last Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Email)"" Caption=""Email"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Salary)"" Caption=""Salary"" DisplayFormat=""{0:C}"" DisplayFormatProvider=""@System.Globalization.CultureInfo.GetCultureInfo(""fr-FR"")"" Editable>
        <EditTemplate>
            <NumericEdit TValue=""decimal"" Value=""@((decimal)context.CellValue)"" ValueChanged=""@( v => context.CellValue = v)"" />
        </EditTemplate>
    </DataGridColumn>
</DataGrid>

@code{
    [Inject]
    public EmployeeData EmployeeData { get; set; }
    private List<Employee> employeeList;
    private Employee selectedEmployee;

    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeData.GetDataAsync();
        await base.OnInitializedAsync();
    }
}";

        public const string DataGridFilterExample = @"<DataGrid TItem=""Employee""
          Data=""@employeeList""
          Filterable
          FilterMethod=""DataGridFilterMethod.StartsWith""
          Responsive>
    <DataGridColumn Field=""@nameof( Employee.FirstName )"" Caption=""Name"" Editable=""false""></DataGridColumn>
</DataGrid>

@code{
    private List<Employee> employeeList = new() { new() { FirstName = ""David"" }, new() { FirstName = ""Mladen"" }, new() { FirstName = ""John"" }, new() { FirstName = ""Ana"" }, new() { FirstName = ""Jessica"" } };
}";

        public const string DataGridFixedHeaderExample = @"<DataGrid TItem=""Employee""
          Data=""@employeeList""
          @bind-SelectedRow=""@selectedEmployee""
          Responsive
          PageSize=""100""
          FixedHeader
          FixedHeaderDataGridMaxHeight=""300px"">
    <DataGridCommandColumn />
    <DataGridColumn Field=""@nameof(Employee.Id)"" Caption=""#"" Sortable=""false"" />
    <DataGridColumn Field=""@nameof(Employee.FirstName)"" Caption=""First Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.LastName)"" Caption=""Last Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Email)"" Caption=""Email"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Salary)"" Caption=""Salary"" DisplayFormat=""{0:C}"" DisplayFormatProvider=""@System.Globalization.CultureInfo.GetCultureInfo(""fr-FR"")"" Editable>
        <EditTemplate>
            <NumericEdit TValue=""decimal"" Value=""@((decimal)context.CellValue)"" ValueChanged=""@( v => context.CellValue = v)"" />
        </EditTemplate>
    </DataGridColumn>
</DataGrid>

@code {
    [Inject]
    public EmployeeData EmployeeData { get; set; }
    private List<Employee> employeeList;
    private Employee selectedEmployee;

    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeData.GetDataAsync();
        await base.OnInitializedAsync();
    }
}";

        public const string DataGridGroupingExample = @"<DataGrid TItem=""Employee""
          Data=""@employeeList""
          Responsive
          Groupable
          GroupBy=""(x=> new { x.Childrens, x.Gender} )"">
    <DataGridCommandColumn />
    <DataGridColumn Field=""@nameof(Employee.Id)"" Caption=""#"" Sortable=""false"" />
    <DataGridColumn Field=""@nameof(Employee.FirstName)"" Caption=""First Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.LastName)"" Caption=""Last Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Email)"" Caption=""Email"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Gender)"" Caption=""Gender"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Childrens)"" Caption=""Children"" Editable />
    <DataGridColumn Field=""@nameof(Employee.IsActive)"" Caption=""Active"" Editable />
</DataGrid>

@code{
    [Inject] public EmployeeData EmployeeData { get; set; }
    private List<Employee> employeeList;

    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeData.GetDataAsync();
        await base.OnInitializedAsync();
    }
}";

        public const string DataGridImportsExample = @"@using Blazorise.DataGrid";

        public const string DataGridLargeDataExample = @"<DataGrid TItem=""Employee""
          Data=""@employeeList""
          ReadData=""@OnReadData""
          TotalItems=""@totalEmployees""
          PageSize=""1""
          ShowPager
          Responsive>
    <DataGridCommandColumn />
    <DataGridColumn Field=""@nameof(Employee.Id)"" Caption=""#"" Sortable=""false"" />
    <DataGridColumn Field=""@nameof(Employee.FirstName)"" Caption=""First Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.LastName)"" Caption=""Last Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Salary)"" Caption=""Salary"" DisplayFormat=""{0:C}"" DisplayFormatProvider=""@System.Globalization.CultureInfo.GetCultureInfo(""fr-FR"")"" Editable>
        <EditTemplate>
            <NumericEdit TValue=""decimal"" Value=""@((decimal)context.CellValue)"" ValueChanged=""@( v => context.CellValue = v)"" />
        </EditTemplate>
    </DataGridColumn>
</DataGrid>

@code{
    [Inject]
    public EmployeeData EmployeeData { get; set; }
    private List<Employee> employeeList;

    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeData.GetDataAsync();
        await base.OnInitializedAsync();
    }

    private int totalEmployees;

    private async Task OnReadData( DataGridReadDataEventArgs<Employee> e )
    {
        if ( !e.CancellationToken.IsCancellationRequested )
        {
            List<Employee> response = null;

            // this can be call to anything, in this case we're calling a fictional api
            //var response = await Http.GetJsonAsync<Employee[]>( $""some-api/employees?page={e.Page}&pageSize={e.PageSize}"" );
            if ( e.ReadDataMode is DataGridReadDataMode.Virtualize )
                response = (await EmployeeData.GetDataAsync()).Skip( e.VirtualizeOffset ).Take( e.VirtualizeCount ).ToList();
            else if ( e.ReadDataMode is DataGridReadDataMode.Paging )
                response = (await EmployeeData.GetDataAsync()).Skip( ( e.Page - 1 ) * e.PageSize ).Take( e.PageSize ).ToList();
            else
                throw new Exception( ""Unhandled ReadDataMode"" );

            if ( !e.CancellationToken.IsCancellationRequested )
            {
                totalEmployees = (await EmployeeData.GetDataAsync()).Count;
                employeeList = new List<Employee>( response ); // an actual data for the current page
            }
        }
    }
}";

        public const string DataGridLoadingEmptyTemplateExample = @"<DataGrid @ref=""datagridRef""
          TItem=""Employee""
          Data=""@employeeList""
          @bind-SelectedRow=""@selectedEmployee""
          TotalItems=""@totalEmployees""
          ReadData=""@LoadEmployeesFromService""
          Responsive>
    <DataGridColumns>
        <DataGridCommandColumn />
        <DataGridColumn Field=""@nameof(Employee.Id)"" Caption=""#"" Sortable=""false"" />
        <DataGridColumn Field=""@nameof(Employee.FirstName)"" Caption=""First Name"" Editable />
        <DataGridColumn Field=""@nameof(Employee.LastName)"" Caption=""Last Name"" Editable />
        <DataGridColumn Field=""@nameof(Employee.Email)"" Caption=""Email"" Editable />
        <DataGridColumn Field=""@nameof(Employee.Salary)"" Caption=""Salary"" DisplayFormat=""{0:C}"" DisplayFormatProvider=""@System.Globalization.CultureInfo.GetCultureInfo(""fr-FR"")"" Editable>
            <EditTemplate>
                <NumericEdit TValue=""decimal"" Value=""@((decimal)context.CellValue)"" ValueChanged=""@( v => context.CellValue = v)"" />
            </EditTemplate>
        </DataGridColumn>
    </DataGridColumns>
    <EmptyTemplate>
        <div class=""box"">
            No employees were found!
        </div>
    </EmptyTemplate>
    <LoadingTemplate>
        <Progress @ref=""progressRef"" Color=""Color.Primary"" Max=""100"" Value=""progress"" />
    </LoadingTemplate>
</DataGrid>

<Button Background=""Background.Primary"" Color=""Color.Light"" Clicked=""() => datagridRef.Reload()"">Load</Button>

@code{
    protected DataGrid.DataGrid<Employee> datagridRef;
    protected Progress progressRef;
    protected int progress;
    protected Employee selectedEmployee;
    protected int totalEmployees = 0;
    protected List<Employee> employeeList;

    public async Task LoadEmployeesFromService( DataGridReadDataEventArgs<Employee> e )
    {
        /*
        * This can be call to anything like calling an api to load employees.
        * During execution 'LoadingTemplate' will be displayed.
        * If your api call returns empty result, then 'EmptyTemplate' will be displayed,
        * this way you have proper feedback, for when your datagrid is loading or empty.
        */
        progress = 0;
        await InvokeAsync( StateHasChanged );

        await Task.Delay( 500 );
        progress = 25;
        await InvokeAsync( StateHasChanged );

        await Task.Delay( 500 );
        progress = 50;
        await InvokeAsync( StateHasChanged );

        await Task.Delay( 500 );
        progress = 75;
        await InvokeAsync( StateHasChanged );


        await Task.Delay( 500 );
        progress = 100;
        await InvokeAsync( StateHasChanged );
    }
}";

        public const string DataGridMultipleGroupingExample = @"<DataGrid TItem=""Employee""
          Data=""@employeeList""
          Responsive
          Groupable>
    <DataGridCommandColumn />
    <DataGridColumn Field=""@nameof(Employee.Id)"" Caption=""#"" Sortable=""false"" />
    <DataGridColumn Field=""@nameof(Employee.FirstName)"" Caption=""First Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.LastName)"" Caption=""Last Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Email)"" Caption=""Email"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Gender)"" Caption=""Gender"" Editable Groupable Grouping/>
    <DataGridColumn Field=""@nameof(Employee.Childrens)"" Caption=""Children"" Editable  />
    <DataGridColumn Field=""@nameof(Employee.IsActive)"" Caption=""Active"" Editable  />
</DataGrid>

@code{
    [Inject] public EmployeeData EmployeeData { get; set; }
    private List<Employee> employeeList;

    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeData.GetDataAsync();
        await base.OnInitializedAsync();
    }
}";

        public const string DataGridMultipleSelectionExample = @"<DataGrid TItem=""Employee""
          Data=""@employeeList""
          @bind-SelectedRow=""@selectedEmployee""
          SelectionMode=""DataGridSelectionMode.Multiple""
          @bind-SelectedRows=""selectedEmployees""
          Responsive>
    <DataGridMultiSelectColumn Width=""30px""></DataGridMultiSelectColumn>
    <DataGridCommandColumn />
    <DataGridColumn Field=""@nameof(Employee.Id)"" Caption=""#"" Sortable=""false"" />
    <DataGridColumn Field=""@nameof(Employee.FirstName)"" Caption=""First Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.LastName)"" Caption=""Last Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Email)"" Caption=""Email"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Salary)"" Caption=""Salary"" DisplayFormat=""{0:C}"" DisplayFormatProvider=""@System.Globalization.CultureInfo.GetCultureInfo(""fr-FR"")"" Editable>
        <EditTemplate>
            <NumericEdit TValue=""decimal"" Value=""@((decimal)context.CellValue)"" ValueChanged=""@( v => context.CellValue = v)"" />
        </EditTemplate>
    </DataGridColumn>
</DataGrid>

@code{
    [Inject]
    public EmployeeData EmployeeData { get; set; }
    private List<Employee> employeeList;
    private Employee selectedEmployee;
    private List<Employee> selectedEmployees;

    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeData.GetDataAsync();
        await base.OnInitializedAsync();
    }
}";

        public const string DataGridNewItemDefaultSetterExample = @"<DataGrid TItem=""Employee""
          Data=""@employeeList""
          @bind-SelectedRow=""@selectedEmployee""
          NewItemDefaultSetter=""@OnEmployeeNewItemDefaultSetter""
          Editable
          Responsive
          ShowPager>
    <DataGridCommandColumn />
    <DataGridColumn Field=""@nameof(Employee.Id)"" Caption=""#"" Sortable=""false"" />
    <DataGridColumn Field=""@nameof(Employee.FirstName)"" Caption=""First Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.LastName)"" Caption=""Last Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Email)"" Caption=""Email"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Salary)"" Caption=""Salary"" DisplayFormat=""{0:C}"" DisplayFormatProvider=""@System.Globalization.CultureInfo.GetCultureInfo(""fr-FR"")"" Editable>
        <EditTemplate>
            <NumericEdit TValue=""decimal"" Value=""@((decimal)context.CellValue)"" ValueChanged=""@( v => context.CellValue = v)"" />
        </EditTemplate>
    </DataGridColumn>
</DataGrid>

@code{
    [Inject]
    public EmployeeData EmployeeData { get; set; }
    private List<Employee> employeeList;
    private Employee selectedEmployee;

    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeData.GetDataAsync();
        await base.OnInitializedAsync();
    }

    void OnEmployeeNewItemDefaultSetter( Employee employee )
    {
        employee.Salary = 100.0M;
        employee.IsActive = true;
    }
}";

        public const string DataGridNugetInstallExample = @"Install-Package Blazorise.DataGrid";

        public const string DataGridPagerExample = @"<DataGrid TItem=""Employee""
          Data=""@employeeList""
          @bind-SelectedRow=""@selectedEmployee""
          Responsive
          ShowPager
          ShowPageSizes
          PagerPosition=""DataGridPagerPosition.TopAndBottom""
          PagerOptions=""new(){ ButtonSize=Size.Small }"">
    <DataGridColumns>
        <DataGridCommandColumn />
        <DataGridColumn Field=""@nameof(Employee.Id)"" Caption=""#"" Sortable=""false"" />
        <DataGridColumn Field=""@nameof(Employee.FirstName)"" Caption=""First Name"" Editable />
        <DataGridColumn Field=""@nameof(Employee.LastName)"" Caption=""Last Name"" Editable />
        <DataGridColumn Field=""@nameof(Employee.Email)"" Caption=""Email"" Editable />
        <DataGridColumn Field=""@nameof(Employee.Salary)"" Caption=""Salary"" DisplayFormat=""{0:C}"" DisplayFormatProvider=""@System.Globalization.CultureInfo.GetCultureInfo(""fr-FR"")"" Editable>
            <EditTemplate>
                <NumericEdit TValue=""decimal"" Value=""@((decimal)context.CellValue)"" ValueChanged=""@( v => context.CellValue = v)"" />
            </EditTemplate>
        </DataGridColumn>
    </DataGridColumns>
    <PageButtonTemplate>
        <Span TextColor=""TextColor.Success"">
            @context.PageNumber
        </Span>
    </PageButtonTemplate>
    <NextPageButtonTemplate><Icon Name=""IconName.StepForward"" TextColor=""TextColor.Success"" /></NextPageButtonTemplate>
    <PreviousPageButtonTemplate><Icon Name=""IconName.StepBackward"" TextColor=""TextColor.Success"" /></PreviousPageButtonTemplate>
    <LastPageButtonTemplate><Icon Name=""IconName.Forward"" TextColor=""TextColor.Success"" /></LastPageButtonTemplate>
    <FirstPageButtonTemplate><Icon Name=""IconName.Backward"" TextColor=""TextColor.Success"" /></FirstPageButtonTemplate>
    <TotalItemsTemplate><Badge Color=""Color.Success"">@context.TotalItems total items</Badge></TotalItemsTemplate>
    <TotalItemsShortTemplate><Badge Color=""Color.Success"">@context.TotalItems</Badge></TotalItemsShortTemplate>
    <ItemsPerPageTemplate></ItemsPerPageTemplate>
    <PageSelectorTemplate>
        <Select TextColor=""TextColor.Success"" @bind-SelectedValue=""@context.CurrentPage"" Size=""Size.Small"">
            @for ( int i = context.FirstVisiblePage; i <= context.LastVisiblePage; ++i )
            {
                var pageNumber = i;
                <SelectItem Value=""@pageNumber"">@pageNumber</SelectItem>
            }
        </Select>
    </PageSelectorTemplate>
    <PageSizesTemplate>
        <Select TextColor=""TextColor.Success"" @bind-SelectedValue=""@context.CurrentPageSize"" Size=""Size.Small"">
            @foreach ( var curPageSize in context.PageSizes )
            {
                <SelectItem Value=""@curPageSize"">@curPageSize</SelectItem>
            }
        </Select>
    </PageSizesTemplate>
</DataGrid>

@code{
    [Inject]
    public EmployeeData EmployeeData { get; set; }
    private List<Employee> employeeList;
    private Employee selectedEmployee;

    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeData.GetDataAsync();
        await base.OnInitializedAsync();
    }
}";

        public const string DataGridResizableExample = @"<Field>
    <FieldLabel>
        Resize Mode
    </FieldLabel>
    <FieldBody>
        <Select @bind-SelectedValue=""@resizeMode"">
            <SelectItem Value=""TableResizeMode.Header"">Header</SelectItem>
            <SelectItem Value=""TableResizeMode.Columns"">Columns</SelectItem>
        </Select>
    </FieldBody>
</Field>

<DataGrid TItem=""Employee""
          Data=""@employeeList""
          @bind-SelectedRow=""@selectedEmployee""
          Responsive
          Resizable
          ResizeMode=""@resizeMode"">
    <DataGridCommandColumn />
    <DataGridColumn Field=""@nameof(Employee.Id)"" Caption=""#"" Sortable=""false"" />
    <DataGridColumn Field=""@nameof(Employee.FirstName)"" Caption=""First Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.LastName)"" Caption=""Last Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Email)"" Caption=""Email"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Salary)"" Caption=""Salary"" DisplayFormat=""{0:C}"" DisplayFormatProvider=""@System.Globalization.CultureInfo.GetCultureInfo(""fr-FR"")"" Editable>
        <EditTemplate>
            <NumericEdit TValue=""decimal"" Value=""@((decimal)context.CellValue)"" ValueChanged=""@( v => context.CellValue = v)"" />
        </EditTemplate>
    </DataGridColumn>
</DataGrid>

@code {
    [Inject]
    public EmployeeData EmployeeData { get; set; }
    private List<Employee> employeeList;
    private Employee selectedEmployee;
    private TableResizeMode resizeMode = TableResizeMode.Header;

    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeData.GetDataAsync();
        await base.OnInitializedAsync();
    }
}";

        public const string DataGridRowSelectableMultipleSelectionExample = @"<DataGrid TItem=""Employee""
          Data=""@employeeList""
          @bind-SelectedRow=""@selectedEmployee""
          SelectionMode=""DataGridSelectionMode.Multiple""
          @bind-SelectedRows=""selectedEmployees""
          Responsive
          RowSelectable=""RowSelectableHandler"">
    <DataGridMultiSelectColumn TItem=""Employee"" Width=""30px""></DataGridMultiSelectColumn>
    <DataGridCommandColumn TItem=""Employee"" />
    <DataGridColumn Field=""@nameof(Employee.Id)"" Caption=""#"" Sortable=""false"" />
    <DataGridColumn Field=""@nameof(Employee.FirstName)"" Caption=""First Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.LastName)"" Caption=""Last Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Email)"" Caption=""Email"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Salary)"" Caption=""Salary"" DisplayFormat=""{0:C}"" DisplayFormatProvider=""@System.Globalization.CultureInfo.GetCultureInfo(""fr-FR"")"" Editable>
        <EditTemplate>
            <NumericEdit TValue=""decimal"" Value=""@((decimal)context.CellValue)"" ValueChanged=""@( v => context.CellValue = v)"" />
        </EditTemplate>
    </DataGridColumn>
</DataGrid>

@code {
    [Inject]
    public EmployeeData EmployeeData { get; set; }
    private List<Employee> employeeList;
    private Employee selectedEmployee;
    private List<Employee> selectedEmployees;

    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeData.GetDataAsync();
        await base.OnInitializedAsync();
    }

    private bool RowSelectableHandler( RowSelectableEventArgs<Employee> rowSelectableEventArgs )
        => rowSelectableEventArgs.SelectReason is not DataGridSelectReason.RowClick;
}";

        public const string DataGridScrollToExample = @"<Button Size=""Size.Small"" Color=""Color.Primary"" Clicked=""@ScrollToRow"">Scroll To Row</Button>
<Button Size=""Size.Small"" Color=""Color.Primary"" Clicked=""@ScrollToPixels"">Scroll To Pixels</Button>

<DataGrid @ref=""dataGridRef""
          TItem=""Employee""
          Data=""@employeeList""
          @bind-SelectedRow=""@selectedEmployee""
          Responsive
          ShowPager
          FixedHeader
          FixedHeaderDataGridMaxHeight=""250px""
          PageSize=""50"">
    <DataGridCommandColumn />
    <DataGridColumn Field=""@nameof(Employee.Id)"" Caption=""#"" Sortable=""false"" />
    <DataGridColumn Field=""@nameof(Employee.FirstName)"" Caption=""First Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.LastName)"" Caption=""Last Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Email)"" Caption=""Email"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Salary)"" Caption=""Salary"" DisplayFormat=""{0:C}"" DisplayFormatProvider=""@System.Globalization.CultureInfo.GetCultureInfo(""fr-FR"")"" Editable>
        <EditTemplate>
            <NumericEdit TValue=""decimal"" Value=""@((decimal)context.CellValue)"" ValueChanged=""@( v => context.CellValue = v)"" />
        </EditTemplate>
    </DataGridColumn>
</DataGrid>

@code {
    [Inject]
    public EmployeeData EmployeeData { get; set; }
    private List<Employee> employeeList;
    private Employee selectedEmployee;
    private DataGrid<Employee> dataGridRef;

    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeData.GetDataAsync();
        await base.OnInitializedAsync();
    }

    private Task ScrollToRow()
         => dataGridRef.ScrollToRow(30).AsTask();

    private Task ScrollToPixels()
        => dataGridRef.ScrollToPixels(500).AsTask();
}";

        public const string DataGridSelectingExample = @"<DataGrid TItem=""Employee""
          Data=""@employeeList""
          RowSelectable=@((x)=> x.Item.FirstName != ""John"")
          Responsive>
    <DataGridColumn Field=""@nameof( Employee.FirstName )"" Caption=""Name"" Editable=""false""></DataGridColumn>
</DataGrid>

@code{
    private List<Employee> employeeList = new() { new() { FirstName = ""David"" }, new() { FirstName = ""MLaden"" }, new() { FirstName = ""John"" }, new() { FirstName = ""Ana"" }, new() { FirstName = ""Jessica"" } };
}";

        public const string DataGridShowGroupingExample = @"<DataGrid TItem=""Employee""
          Data=""@employeeList""
          Responsive
          Groupable
          ShowGrouping>
    <DataGridCommandColumn />
    <DataGridColumn Field=""@nameof(Employee.Id)"" Caption=""#"" Sortable=""false"" />
    <DataGridColumn Field=""@nameof(Employee.FirstName)"" Caption=""First Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.LastName)"" Caption=""Last Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Email)"" Caption=""Email"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Gender)"" Caption=""Gender"" Editable Groupable Grouping />
    <DataGridColumn Field=""@nameof(Employee.Childrens)"" Caption=""Children"" Editable />
    <DataGridColumn Field=""@nameof(Employee.IsActive)"" Caption=""Active"" Editable Groupable Grouping />
</DataGrid>

@code{
    [Inject] public EmployeeData EmployeeData { get; set; }
    private List<Employee> employeeList;

    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeData.GetDataAsync();
        await base.OnInitializedAsync();
    }
}";

        public const string DataGridSortFieldExample = @"<DataGrid TItem=""Employee""
          Data=""@employeeList""
          @bind-SelectedRow=""@selectedEmployee""
          Responsive
          Sortable
          SortMode=""DataGridSortMode.Single"">
    <DataGridCommandColumn />
    <DataGridColumn Field=""@nameof(Employee.Id)"" Caption=""#"" Sortable=""false"" />
    <DataGridColumn Field=""@nameof(Employee.FirstName)"" Caption=""First Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.LastName)"" Caption=""Last Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Email)"" Caption=""Email"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Salary)"" Caption=""Salary"" DisplayFormat=""{0:C}"" DisplayFormatProvider=""@System.Globalization.CultureInfo.GetCultureInfo(""fr-FR"")"" Editable>
        <EditTemplate>
            <NumericEdit TValue=""decimal"" Value=""@((decimal)context.CellValue)"" ValueChanged=""@( v => context.CellValue = v)"" />
        </EditTemplate>
    </DataGridColumn>
    <DataGridNumericColumn TItem=""Employee"" Field=""@nameof( Employee.Childrens )"" Caption=""Childrens"" Editable Filterable=""false""
                           SortField=""@nameof( Employee.ChildrensPerSalary )"" SortDirection=""SortDirection.Descending"" />
</DataGrid>

@code{
    [Inject]
    public EmployeeData EmployeeData { get; set; }
    private List<Employee> employeeList;
    private Employee selectedEmployee;

    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeData.GetDataAsync();
        await base.OnInitializedAsync();
    }
}";

        public const string DataGridSortMultipleExample = @"<DataGrid TItem=""Employee""
          Data=""@employeeList""
          @bind-SelectedRow=""@selectedEmployee""
          Responsive
          Sortable
          SortMode=""DataGridSortMode.Multiple"">
    <DataGridCommandColumn />
    <DataGridColumn Field=""@nameof(Employee.Id)"" Caption=""#"" Sortable=""false"" />
    <DataGridColumn Field=""@nameof(Employee.FirstName)"" Caption=""First Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.LastName)"" Caption=""Last Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Email)"" Caption=""Email"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Salary)"" Caption=""Salary"" DisplayFormat=""{0:C}"" DisplayFormatProvider=""@System.Globalization.CultureInfo.GetCultureInfo(""fr-FR"")"" Editable>
        <EditTemplate>
            <NumericEdit TValue=""decimal"" Value=""@((decimal)context.CellValue)"" ValueChanged=""@( v => context.CellValue = v)"" />
        </EditTemplate>
    </DataGridColumn>
</DataGrid>

@code{
    [Inject]
    public EmployeeData EmployeeData { get; set; }
    private List<Employee> employeeList;
    private Employee selectedEmployee;

    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeData.GetDataAsync();
        await base.OnInitializedAsync();
    }
}";

        public const string DataGridSortSingleExample = @"<DataGrid TItem=""Employee""
          Data=""@employeeList""
          @bind-SelectedRow=""@selectedEmployee""
          Responsive
          Sortable
          SortMode=""DataGridSortMode.Single"">
    <DataGridCommandColumn />
    <DataGridColumn Field=""@nameof(Employee.Id)"" Caption=""#"" Sortable=""false"" />
    <DataGridColumn Field=""@nameof(Employee.FirstName)"" Caption=""First Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.LastName)"" Caption=""Last Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Email)"" Caption=""Email"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Salary)"" Caption=""Salary"" DisplayFormat=""{0:C}"" DisplayFormatProvider=""@System.Globalization.CultureInfo.GetCultureInfo(""fr-FR"")"" Editable>
        <EditTemplate>
            <NumericEdit TValue=""decimal"" Value=""@((decimal)context.CellValue)"" ValueChanged=""@( v => context.CellValue = v)"" />
        </EditTemplate>
    </DataGridColumn>
</DataGrid>

@code{
    [Inject]
    public EmployeeData EmployeeData { get; set; }
    private List<Employee> employeeList;
    private Employee selectedEmployee;

    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeData.GetDataAsync();
        await base.OnInitializedAsync();
    }
}";

        public const string DataGridUpdateCellExample = @"<DataGrid TItem=""Employee""
          Data=""@employeeList""
          Editable
          EditMode=""DataGridEditMode.Inline""
          Responsive
          ShowPager>
    <DataGridCommandColumn />
    <DataGridColumn Field=""@nameof( Employee.Salary )"" Caption=""Salary"" Editable DisplayFormat=""{0:C}"" DisplayFormatProvider=""@System.Globalization.CultureInfo.GetCultureInfo(""fr-FR"")"">
        <EditTemplate>
            <NumericEdit TValue=""decimal""
                         Value=""@((decimal)context.CellValue)""
                         ValueChanged=""@( v => {
                            context.CellValue = v;
                            context.UpdateCell( nameof( Employee.Tax ), v * context.Item.TaxPercentage );
                         })"" />
        </EditTemplate>
    </DataGridColumn>
    <DataGridColumn Field=""@nameof( Employee.Tax )"" Caption=""Tax"" Editable DisplayFormat=""{0:C}"" DisplayFormatProvider=""@System.Globalization.CultureInfo.GetCultureInfo(""fr-FR"")"">
        <EditTemplate>
            <NumericEdit TValue=""decimal""
                         Value=""@((decimal)context.CellValue)""
                         Disabled />
        </EditTemplate>
    </DataGridColumn>
</DataGrid>

@code {
    [Inject]
    public EmployeeData EmployeeData { get; set; }
    private List<Employee> employeeList;

    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeData.GetDataAsync();
        await base.OnInitializedAsync();
    }
}";

        public const string DataGridValidatorEditTemplateExample = @"<DataGrid TItem=""Employee""
          Data=""@employeeList""
          Responsive
          Editable
          UseValidation
          ShowValidationsSummary=""false"">
    <DataGridColumn Field=""@nameof( Employee.FirstName )"" Caption=""Name"" Editable>
        <EditTemplate>
            <Validation Validator=""@CheckName"">
                <TextEdit Text=""@((string)context.CellValue)"" TextChanged=""(value => context.CellValue = value)"">
                    <Feedback>
                        <ValidationError />
                    </Feedback>
                </TextEdit>
            </Validation>
        </EditTemplate>
    </DataGridColumn>
    <DataGridCommandColumn />
</DataGrid>

@code{
    private List<Employee> employeeList = new() { new() { FirstName = ""David"" }, new() { FirstName = ""Mladen"" }, new() { FirstName = ""John"" }, new() { FirstName = ""Ana"" }, new() { FirstName = ""Jessica"" } };

    public void CheckName( ValidatorEventArgs validationArgs )
    {
        ValidationRule.IsNotEmpty( validationArgs );

        if ( validationArgs.Status == ValidationStatus.Error )
        {
            validationArgs.ErrorText = ""Name can't be empty."";
        }
    }
}";

        public const string DataGridValidatorExample = @"<DataGrid TItem=""Employee""
          Data=""@employeeList""
          Responsive
          Editable
          UseValidation>
    <DataGridColumn Field=""@nameof( Employee.FirstName )"" Caption=""Name"" Validator=""@CheckName"" Editable />
    <DataGridCommandColumn />
</DataGrid>

@code{
    private List<Employee> employeeList = new() { new() { FirstName = ""David"" }, new() { FirstName = ""Mladen"" }, new() { FirstName = ""John"" }, new() { FirstName = ""Ana"" }, new() { FirstName = ""Jessica"" } };

    public void CheckName( ValidatorEventArgs validationArgs )
    {
        ValidationRule.IsNotEmpty( validationArgs );

        if ( validationArgs.Status == ValidationStatus.Error )
        {
            validationArgs.ErrorText = ""Name can't be empty."";
        }
    }
}";

        public const string DataGridVirtualizeExample = @"<DataGrid TItem=""Employee""
          Data=""@employeeList""
          @bind-SelectedRow=""@selectedEmployee""
          Responsive
          Virtualize
          VirtualizeOptions=""@(new() { DataGridHeight = ""250px""})"">
    <DataGridCommandColumn />
    <DataGridColumn Field=""@nameof(Employee.Id)"" Caption=""#"" Sortable=""false"" />
    <DataGridColumn Field=""@nameof(Employee.FirstName)"" Caption=""First Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.LastName)"" Caption=""Last Name"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Email)"" Caption=""Email"" Editable />
    <DataGridColumn Field=""@nameof(Employee.Salary)"" Caption=""Salary"" DisplayFormat=""{0:C}"" DisplayFormatProvider=""@System.Globalization.CultureInfo.GetCultureInfo(""fr-FR"")"" Editable>
        <EditTemplate>
            <NumericEdit TValue=""decimal"" Value=""@((decimal)context.CellValue)"" ValueChanged=""@( v => context.CellValue = v)"" />
        </EditTemplate>
    </DataGridColumn>
</DataGrid>

@code {
    [Inject]
    public EmployeeData EmployeeData { get; set; }
    private List<Employee> employeeList;
    private Employee selectedEmployee;

    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeData.GetDataAsync();
        await base.OnInitializedAsync();
    }
}";

        public const string DropdownListExample = @"<DropdownList TItem=""Country"" TValue=""string""
              Data=""@Countries""
              TextField=""@((item)=>item.Name)""
              ValueField=""@((item)=>item.Iso)""
              @bind-SelectedValue=""@selectedDropValue""
              Color=""Color.Primary""
              MaxMenuHeight=""200px"">
    Select item
</DropdownList>

<Field Horizontal>
    <FieldBody ColumnSize=""ColumnSize.Is12"">
        Selected item: @selectedDropValue
    </FieldBody>
    <FieldBody ColumnSize=""ColumnSize.Is12"">
        Selected text: @Countries?.FirstOrDefault(x=> x.Iso == @selectedDropValue)?.Name
    </FieldBody>
</Field>

@code{
    [Inject]
    public CountryData CountryData { get; set; }
    public IEnumerable<Country> Countries;

    protected override async Task OnInitializedAsync()
    {
        Countries = await CountryData.GetDataAsync();
        await base.OnInitializedAsync();
    }

    string selectedDropValue { get; set; } = ""CN"";

}";

        public const string BasicFluentValidationExample = @"@using Blazorise.FluentValidation

<Validations @ref=""@fluentValidations"" Mode=""ValidationMode.Manual"" Model=""@person"" HandlerType=""typeof(FluentValidationHandler)"">
    <Validation>
        <Field>
            <FieldLabel>First name</FieldLabel>
            <TextEdit Placeholder=""Enter first name..."" @bind-Text=""@person.FirstName"">
                <Feedback>
                    <ValidationError />
                </Feedback>
            </TextEdit>
        </Field>
    </Validation>
    <Validation>
        <Field>
            <FieldLabel>Last name</FieldLabel>
            <TextEdit Placeholder=""Enter last name..."" @bind-Text=""@person.LastName"">
                <Feedback>
                    <ValidationError />
                </Feedback>
            </TextEdit>
        </Field>
    </Validation>
    <Validation>
        <Field>
            <FieldLabel>Age</FieldLabel>
            <NumericEdit Placeholder=""Enter age..."" @bind-Value=""@person.Age"">
                <Feedback>
                    <ValidationError />
                </Feedback>
            </NumericEdit>
        </Field>
    </Validation>
</Validations>

<Button Color=""Color.Primary"" Clicked=""@OnSavePerson"">Save</Button>

@code {
    Validations fluentValidations;

    Person person = new();

    protected async Task OnSavePerson()
    {
        if ( await fluentValidations.ValidateAll() )
        {
            // the person is validated and we can proceed with the saving process
        }
    }
}";

        public const string FluentValidationAbstractValidatorExample = @"public class PersonValidator : AbstractValidator<Person>
{
    public PersonValidator()
    {
        RuleFor( vm => vm.FirstName )
            .NotEmpty()
            .MaximumLength( 30 );

        RuleFor( vm => vm.LastName )
            .NotEmpty()
            .MaximumLength( 30 );

        RuleFor( vm => vm.Age )
            .GreaterThanOrEqualTo( 18 );
    }
}";

        public const string FluentValidationImportExample = @"@using Blazorise.FluentValidation";

        public const string FluentValidationNugetInstallExample = @"Install-Package Blazorise.FluentValidation
Install-Package FluentValidation.DependencyInjectionExtensions";

        public const string FluentValidationRegisterValidatorsExample = @"using Blazorise;
using Blazorise.Bootstrap;
using Blazorise.Icons.FontAwesome;
using Blazorise.FluentValidation;

builder.Services
    .AddBlazorise()
    .AddBootstrapProviders()
    .AddFontAwesomeIcons()
    .AddBlazoriseFluentValidation();

services.AddValidatorsFromAssembly( typeof( App ).Assembly );";

        public const string FontAwesomeCSSExample = @"<link rel=""stylesheet"" href=""https://use.fontawesome.com/releases/v5.15.4/css/all.css"" />";

        public const string FontAwesomeNugetInstallExample = @"Install-Package Blazorise.Icons.FontAwesome";

        public const string IconBasicExample = @"<Icon Name=""IconName.Mail"" />";

        public const string IconCustomExample = @"<Icon Name=""@(""fa-phone"")"" />";

        public const string IconGlobalSettingsExample = @"services.AddBlazorise( options =>
{
    options.IconStyle = IconStyle.Light;
    options.IconSize = IconSize.Small;
} );";

        public const string IconNamesExample = @"<Icon Name=""Blazorise.Icons.FontAwesome.FontAwesomeIcons.Voicemail"" />";

        public const string IconSizeExample = @"<Div Flex=""Flex.Row.Wrap.JustifyContent.Start.AlignItems.Start"">
    @foreach ( var iconSize in Enum.GetValues<IconSize>() )
    {
        @if ( iconSize == IconSize.Default )
            continue;

        <Div Flex=""Flex.Column.JustifyContent.Center"">
            <Span Flex=""Flex.JustifyContent.Center.AlignItems.Center"" Padding=""Padding.Is5"">
                <Icon Name=""IconName.Camera"" IconSize=""@iconSize"" />
            </Span>
            <Text TextAlignment=""TextAlignment.Center"">
                @iconSize
            </Text>
        </Div>
    }
</Div>";

        public const string IconStyleExample = @"<Icon Name=""IconName.Mail"" IconStyle=""IconStyle.Regular"" />";

        public const string MaterialCSSExample = @"<link href=""_content/Blazorise.Icons.Material/blazorise.icons.material.css"" rel=""stylesheet"" />";

        public const string RegistrationsExample = @"builder.Services
	.AddBlazorise()
	.AddBootstrapProviders()
+   .AddFontAwesomeIcons();";

        public const string BasicListViewExample = @"<ListView TItem=""Country""
          Data=""Countries""
          TextField=""(item) => item.Name""
          ValueField=""(item) => item.Iso""
          Mode=""ListGroupMode.Static""
          MaxHeight=""300px"">
</ListView>

@code {
    [Inject]
    public CountryData CountryData { get; set; }
    public IEnumerable<Country> Countries;

    protected override async Task OnInitializedAsync()
    {
        Countries = await CountryData.GetDataAsync();
        await base.OnInitializedAsync();
    }
}";

        public const string ListViewItemTemplateExample = @"<ListView TItem=""Country""
          Data=""Countries""
          TextField=""(item) => item.Name""
          ValueField=""(item) => item.Iso""
          Mode=""ListGroupMode.Static""
          MaxHeight=""300px"">
    <ItemTemplate>
        <Div Flex=""Flex.InlineFlex.JustifyContent.Between"" Width=""Width.Is100"">
            <Heading Margin=""Margin.Is2.FromBottom"">@context.Item.Iso</Heading>
            <Small>@context.Item.Capital</Small>
        </Div>
        <Paragraph Margin=""Margin.Is2.FromBottom"">@context.Text</Paragraph>
    </ItemTemplate>
</ListView>

@code {
    [Inject]
    public CountryData CountryData { get; set; }
    public IEnumerable<Country> Countries;

    protected override async Task OnInitializedAsync()
    {
        Countries = await CountryData.GetDataAsync();
        await base.OnInitializedAsync();
    }
}";

        public const string ListViewSelectableExample = @"<ListView TItem=""Country""
          Data=""Countries""
          TextField=""(item) => item.Name""
          ValueField=""(item) => item.Iso""
          Mode=""ListGroupMode.Selectable""
          MaxHeight=""300px""
          @bind-SelectedItem=""@selectedListViewItem"">
</ListView>

<Field Horizontal>
    <FieldBody ColumnSize=""ColumnSize.Is12"">
        Selected Item: @selectedListViewItem?.Name
    </FieldBody>
</Field>


@code {
    [Inject]
    public CountryData CountryData { get; set; }
    public IEnumerable<Country> Countries;

    private Country selectedListViewItem;

    protected override async Task OnInitializedAsync()
    {
        Countries = await CountryData.GetDataAsync();
        await base.OnInitializedAsync();
    }
}";

        public const string LoadingIndicatorAddScopedExample = @"services.AddLoadingIndicator();";

        public const string LoadingIndicatorAnimationExample = @"<LoadingIndicator @ref=""loadingIndicator"" FullScreen FadeIn>
    <ChildContent>
        <Button Clicked=""ShowIndicator"" Color=""Color.Primary"">Show indicator</Button>
    </ChildContent>
    <IndicatorTemplate>
        <Animate Animation=""Animations.FadeDownRight"" Auto Duration=""TimeSpan.FromMilliseconds( 700 )"">
            <Div>
                <SpinKit Type=""SpinKitType.Wave"" Size=""100px"" />
            </Div>
        </Animate>
    </IndicatorTemplate>
</LoadingIndicator>
@code
{
    LoadingIndicator loadingIndicator;

    async Task ShowIndicator()
    {
        await loadingIndicator.Show();

        await Task.Delay( 3000 ); // Do work ...

        await loadingIndicator.Hide();
    }
}";

        public const string LoadingIndicatorApplicationBusyExample = @"@inject ILoadingIndicatorService ApplicationLoadingIndicatorService

@code 
{
    async Task DoWork()
    {
        await ApplicationLoadingIndicatorService.Show();
        
        // do work ...
        
        await ApplicationLoadingIndicatorService.Hide();
    }
}";

        public const string LoadingIndicatorApplicationWrapperExample = @"<Router AppAssembly=""typeof(App).Assembly"">
	<Found>...</Found>
	<NotFound>...</NotFound>
</Router>

<ApplicationLoadingIndicator />";

        public const string LoadingIndicatorBasicExample = @"<LoadingIndicator @ref=""loadingIndicator"">
    <LineChart TItem=""double"" Data=""lineChartData"" />
</LoadingIndicator>

<Button Clicked=""UpdateChart"" Color=""Color.Primary"">Update</Button>
@code 
{
    LoadingIndicator loadingIndicator;

    async Task UpdateChart()
    {
        await loadingIndicator.Show();

        await Task.Delay(3000); // Do work ...

        await loadingIndicator.Hide();
    }

    // sample data
    ChartData<double> lineChartData = new()
    {
        Labels = new() { ""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"" },
        Datasets = new() { new LineChartDataset<double>()
        {
            Data = new List<double>() { 70, 90, 50, 60, 80, 100 },
        }}
    };
}";

        public const string LoadingIndicatorBusyBindingExample  = @"<LoadingIndicator @binding-Visible=""running"">
    <ChildContent>
		<Button Disabled=""running"" Clicked=""Start"" />
    </ChildContent>
    <IndicatorTemplate>
		<Button Clicked=""Cancel"" />
    </IndicatorTemplate>
</LoadingIndicator>

@code
{
    bool running;

    async Task Start()
    {
        if ( !running )
        {
            running = true;
            await StartLongRunningTask();
        }
    }

    async Task Cancel()
    {
        await CancelTask();
        running = false;
	}
}";

        public const string LoadingIndicatorBusyFormExample = @"@inject ILoadingIndicatorService ApplicationLoadingIndicatorService

<form action=""/action_page.php"">
    <fieldset disabled=""ApplicationLoadingIndicatorService.Visible""> 
        <label for=""fname"">Message:</label>
        <input type=""text"" id=""message"" name=""message"">
        <input type=""submit"" value=""Send"">
     </fieldset>
</form>";

        public const string LoadingIndicatorBusyReferenceExample = @"<LoadingIndicator @ref=""loadingIndicator"">
    <Button Disabled=""loadingIndicator.Visible"" Clicked=""DoWork""/>
</LoadingIndicator>

@code
{
    LoadingIndicator loadingIndicator;

    async Task DoWork()
    {
        if ( !loadingIndicator.Visible )
        {
            await loadingIndicator.Show();
            
            // do work...
            
            await loadingIndicator.Hide();
        }
    }
}";

        public const string LoadingIndicatorBusyServiceExample = @"@inject ILoadingIndicatorService ApplicationLoadingIndicatorService

<Button Disabled=""ApplicationLoadingIndicatorService.Visible"" />";

        public const string LoadingIndicatorCascadingBusyExample = @"<Button Clicked=""DoWork"" />

@code
{
    [CascadingParameter]
    LoadingIndicator loadingIndicator;

    async Task DoWork()
    {
        await loadingIndicator.Show();
        
        // do work ...
        
        await loadingIndicator.Hide();
    }
}";

        public const string LoadingIndicatorCascadingWrapperExample = @"<LoadingIndicator FullScreen>
    @Body
</LoadingIndicator>";

        public const string LoadingIndicatorImportsExample = @"@using Blazorise.LoadingIndicator";

        public const string LoadingIndicatorNugetInstallExample = @"Install-Package Blazorise.LoadingIndicator";

        public const string LoadingIndicatorResourcesExample = @"<link href=""_content/Blazorise.LoadingIndicator/blazorise.loadingindicator.css"" rel=""stylesheet"" />";

        public const string LoadingIndicatorTwoWayBindingExample = @"<LoadingIndicator @bind-Visible=""@visible"">
    <LineChart TItem=""double"" Data=""lineChartData"" />
</LoadingIndicator>

<Button Clicked=""UpdateChart"" Color=""Color.Primary"">Update</Button>
@code
{
    bool visible;

    async Task UpdateChart()
    {
        visible = true;

        await Task.Delay( 3000 ); // Do work ...

        visible = false;
    }

    // sample data
    ChartData<double> lineChartData = new()
    {
        Labels = new() { ""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"" },
        Datasets = new() { new LineChartDataset<double>()
        {
            Data = new List<double>() { 70, 90, 50, 60, 80, 100 },
        }}
    };
}";

        public const string BasicLottieAnimationExample = @"<LottieAnimation Path=""https://assets2.lottiefiles.com/datafiles/WFKIUGAVvLl1azi/data.json"" />";

        public const string ImportLottieAnimationExample = @"@using Blazorise.LottieAnimation";

        public const string LottieAnimationNugetInstallExample = @"Install-Package Blazorise.LottieAnimation";

        public const string ImportMarkdownExample = @"@using Blazorise.Markdown";

        public const string MarkdownCustomButtonsExample = @"<Markdown @bind-Value=""@markdownValue"" CustomButtonClicked=""@OnCustomButtonClicked"">
    <Toolbar>
        <MarkdownToolbarButton Action=""MarkdownAction.Bold"" Icon=""fa fa-bolt"" Title=""Bold"" />
        <MarkdownToolbarButton Separator Name=""Custom button"" Value=""@(""hello"")"" Icon=""fa fa-star"" Title=""A Custom Button"" Text=""My Custom Button"" />
        <MarkdownToolbarButton Separator Name=""https://github.com/Ionaru/easy-markdown-editor"" Icon=""fa fab fa-github"" Title=""A Custom Link"" />
    </Toolbar>
</Markdown>

@code {
    [Inject] private INotificationService NotificationService { get; set; }

    string markdownValue = ""## Custom Toolbar\nCustom functions, icons and buttons can be defined for the toolbar."";

    Task OnCustomButtonClicked( MarkdownButtonEventArgs eventArgs )
    {
        NotificationService.Info( $""Name: {eventArgs.Name} Value: {eventArgs.Value}"" );

        return Task.CompletedTask;
    }
}";

        public const string MarkdownExample = @"<Markdown Value=""@markdownValue"" ValueChanged=""@OnMarkdownValueChanged"" />

@code{
    string markdownValue = ""# EasyMDE \n Go ahead, play around with the editor! Be sure to check out **bold**, *italic*, [links](https://google.com) and all the other features. You can type the Markdown syntax, use the toolbar, or use shortcuts like `ctrl-b` or `cmd-b`."";

    string markdownHtml;

    protected override void OnInitialized()
    {
        markdownHtml = Markdig.Markdown.ToHtml( markdownValue ?? string.Empty );

        base.OnInitialized();
    }

    Task OnMarkdownValueChanged( string value )
    {
        markdownValue = value;

        markdownHtml = Markdig.Markdown.ToHtml( markdownValue ?? string.Empty );

        return Task.CompletedTask;
    }
}";

        public const string MarkdownNugetInstallExample = @"Install-Package Blazorise.Markdown";

        public const string MarkdownPreviewRenderExample = @"<Markdown Value=""@markdownValue"" ValueChanged=""@OnMarkdownValueChanged"" PreviewRender=""@PreviewRender"" />

@code {
    string markdownValue = ""# EasyMDE \n Go ahead, play around with the editor! Be sure to check out **bold**, *italic*, [links](https://google.com) and all the other features. You can type the Markdown syntax, use the toolbar, or use shortcuts like `ctrl-b` or `cmd-b`."";

    Task OnMarkdownValueChanged( string value )
    {
        markdownValue = value;

        return Task.CompletedTask;
    }

    protected Task<string> PreviewRender( string plainText )
    {
        return Task.FromResult( Markdig.Markdown.ToHtml( markdownValue ?? string.Empty ) );
    }
}";

        public const string MarkdownShortcutsExample = @"<Markdown Shortcuts=""@(new MarkdownShortcuts{ CleanBlock = null, ToggleCodeBlock = ""Cmd+E"" })"" />";

        public const string MarkdownUploadImageExample = @"<Markdown ImageUploadChanged=""@OnImageUploadChanged""
          ImageUploadStarted=""@OnImageUploadStarted""
          ImageUploadProgressed=""@OnImageUploadProgressed""
          ImageUploadEnded=""@OnImageUploadEnded"" />

@code {
    async Task OnImageUploadChanged( FileChangedEventArgs e )
    {
        try
        {
            foreach ( var file in e.Files )
            {
                using ( var stream = new System.IO.MemoryStream() )
                {
                    await file.WriteToStreamAsync( stream );

                    // do something with the stream
                }
            }
        }
        catch ( Exception exc )
        {
            Console.WriteLine( exc.Message );
        }
        finally
        {
            this.StateHasChanged();
        }
    }

    Task OnImageUploadStarted( FileStartedEventArgs e )
    {
        Console.WriteLine( $""Started Image: {e.File.Name}"" );

        return Task.CompletedTask;
    }

    Task OnImageUploadProgressed( FileProgressedEventArgs e )
    {
        Console.WriteLine( $""Image: {e.File.Name} Progress: {(int)e.Percentage}"" );

        return Task.CompletedTask;
    }

    Task OnImageUploadEnded( FileEndedEventArgs e )
    {
        // We need to report back to Markdown that upload is done. We do this by setting the UploadUrl.
        // NOTE: Since we're faking the upload in this demo we will just set some dummy UploadUrl.
        e.File.UploadUrl = ""https://images.pexels.com/photos/4966601/pexels-photo-4966601.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=200"";

        Console.WriteLine( $""Finished Image: {e.File.Name}, Success: {e.Success}"" );

        return Task.CompletedTask;
    }
}";

        public const string BasicQRCodeExample = @"<QRCode Value=""https://blazorise.com"" Alt=""QRCode image"" />";

        public const string ImportQRCodeExample = @"@using Blazorise.QRCode";

        public const string QRCodeColorExample = @"<QRCode Value=""https://blazorise.com"" Alt=""QRCode image"" DarkColor=""#7474ed"" />";

        public const string QRCodeErrorCorrectionExample = @"<QRCode Value=""https://blazorise.com"" Alt=""QRCode image"" EccLevel=""EccLevel.L"" PixelsPerModule=""4"" />
<QRCode Value=""https://blazorise.com"" Alt=""QRCode image"" EccLevel=""EccLevel.M"" PixelsPerModule=""4"" />
<QRCode Value=""https://blazorise.com"" Alt=""QRCode image"" EccLevel=""EccLevel.Q"" PixelsPerModule=""4"" />
<QRCode Value=""https://blazorise.com"" Alt=""QRCode image"" EccLevel=""EccLevel.H"" PixelsPerModule=""4"" />";

        public const string QRCodeIconExample = @"<QRCode Value=""https://blazorise.com"" Alt=""QRCode image"" EccLevel=""EccLevel.H"" Icon=""@base64PngIcon"" />

@code {
    string base64PngIcon = ""data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAABmJLR0QA/wD/AP+gvaeTAAANsElEQVR42u2deXCU5RnA431XkZBdwiEelXoWsdpWW9QahewmsbSltVYhoa1tp+3YTtuhnbbTtNNDe4g5AGO1dtAZ2zgcSw40SUvAaDV44AmKkny7JIQgyR7fbpBAts8LmxBCEnLs8R2/38wzzPDnt88v7/u8z3ukpQEAAAAAAAAAAAAAAAAA2I0Hp/rOKJ6ycypfAqAf0bToCSVObUGJQ9tR6tQW8UUAYhQ7fdeLGA0SURUIAiAsy2yZVuzUVooUPb1yIAggxqT2s2U6VSgydPUXA0HA1hSmRU8udWj3igRtg4mBIGDfOsOhZUnyvzGcGAgC9ptOTW6+TJK+ciRiIAjYhrLM1nSZThVJwh8YjRwIApZGNfokwZdIogdGKwaCgGXpbfTJqNE0VjEQBCxJqcP3aRHj+fGKgSBgKYoyP5g+WKMPQcDWLD2v6TxZtr1/qEYfgoAt6dfo250IMRAETEus0fdmIsVAEDCfGE7tcknaqmSIgSBgnjojvXmyJGvZWBp9CAKWRTrgZ4630YcgYElKM7R7SjI0X6rEQBAwNJKc+1ItB4IAgphEkDXZ/ovX5QRXevJ0B9kBCDKAipzAx9e5g1EJ3ZMTKNxwc/R0sgRBEORYQWIR0uT/FpIpCIIggwrSFxuqXPosMgZBEGRwQVQcVPWJiOIkcxAEQYYO6hMEQZDjhivgVfWJOjhGJiEIggwdGzzZndeQTQiCINQnCIIgYxKE+gRBEIT6BEEQJB6CxKLCHXxxXXbgM2QagiAI9QmCIAj1CYIgSDShQX2CIAhCfYIgCBKP6FH1yaq54clkI4IgCPUJgiDI2MPjDvqoTxAEQY4fL1XkBD9LhiIIggxTn0ghX16R2zGdTEUQBBkyQmFVn5QviJ5BxiIIglCfIAiCUJ8gCIJQnyAIglCfIAiCGDyoTxAEQUZYn6x1B28gsxEEQY5Tn1S5Oi8gwxEEQYapT+Tf+8sXtJ9NpiMIggwdO6lPEARBjntQK9hIfYIgCEJ9giAIQn2CIAhCfYIgCGKU+sSTHbwRIxAEQahPEARBqE8QBEESXp+ILPcWFkZPRBAEOSyIbB+XacZ+5DgS1V/Rn0QQBOmjyhW8VCSptLsYFXmhtpqF4YbagkgXgiDIMax161mSKG/bTo6cYHf11/SNdQWRoMgRldiHIAgyKGXXRk+RA0n3yYjit4McVfP112oWRbbHxIgiCIKMiNXzgxPX5YSKJIkOWHI6lRvsnU71DJADQRBkNEW8f7Yk1HNWEaMyN7hfTadqCiKhQcRAEAQZPWpbhscdWiAJ1mxqOb6kv1KbH3l/GDEQBEHGM5q0nqkuTJBk6zKVGHcEW2PTqegIA0EQZOxUZ0emqicMDF9nuEOR9Xfq9TX5YX0UciAIgsSrCx+6WTb9vW7I1akv640yndJGKQaCIEh8Udsy1PZxGVF2G2LUuENvrrkn0jhGMRAEQRJDpds/QW34k/goNc0+Pbz+rlC96oKPUw4EQZDE4ZkXnCmjSXWyp1PSBffFQQwEQZBk1SfBXOnGv59QOfKCTdIF3xxHMRAEQZJH77YVSeZAXOuMHF2PTaf2JUAOBEGQ5KJetJXELpM4GJfVqYJIS4LEQBAESWF94vJ/SqZdz49xK/rWmkXhzQkWA0EQJLUc2bYS0ka4d8r/zDf0jZK03UmSA0EQJPU8e3vbWcfZttJT/dVwg2wqbE+iGAiCIMZi7R2RaQO3rVTOl+lUftcbKRADQYwiyDKnthA9jqpPbqvIC7747N0RNZ06mEI5ECSlI8dkb/ipG/bUe1wBtTVjiTwldip6HKZmcVd+isVAkFQK8vgVuxo9LnW1zFHnobfJXiYXeqSl1RZ0FSCIDQVZMd3nXX1boHH4rdmB2rXZocvtLEjd4q5vIoidBHF69z95XftGEUAf2fkFuZ9KzoGXZ3Wca8spVkH4WwhiE0Eem9myReqMse5F+lBt0ZD65CRbTbHyw99GEIsLsnzqzt2rvtDZoNbxx7+FO/CqxxWaY5spVkH4OwhiVUGc2sEnZrdvqojzxrxYIV+xLtd/ofVXscLfRRALCvLIRS1b5RzEWwk+9xBRB5I8eXvOse4qVvh7CGIhQZZN9frL53RsTPLlai1WvYFcRpDvI4hFBPnnVbtfkGTdk8Lz15ut9oKrJOYPEMTkgjw8Y2fTmrn+V4z0QpJ6wsAaq1iRHyKISQXp3SKSsksJjvNCktoZu+Hm6OmmnmLlR+5DEBMKcniLSMhn/IcpA14zv+BauzjyIwQxkSAPT/O1rsrq+J8J76HdUOXSZ5mwBvkxgphBkN4tIq6RbRExaBxU5yw8ebrDPKtYkZ8giMEFefTS1i2e7MB2C72FEVL1SXV29DQTjCA/RRCDCiJbRNrjtkXEmPGeOgtu8BrkZwhiNEHUFpFZuxsqXMG99niTL1BX6Q5dadBVrCUIYiBBkrRFxIjRre6pkmfI0o01gnT9HEEMIIjaIvL0TR3PxeMiM5PHngpX4C6j/DZ1BV2/QJAU88SstnpZnWq3+5vgsVWuvxtpFJEjt79EkBQj1/Rf63EHN9lZDo878JoR93GJIL9CEIOgbh+XZPnAZnJ0GvmkopxJ/zWCGAh15U4ibh83YPSopuHq20MZhl7mze/6DYIYcTSRebi6LCHJ5zqSFdL4DN5oht+hdnG4EEEMjCe78xop4OutNJ2SHb4nm+X7y5n03yKISeqThL+OlODplJn2YB1pFIZ/hyAmofd1JBHFbxo55ElmmS5+zqzfXM6k/x5BTMbq+cGJJqhPdLUh0ez3/NYtDv8BQUzbPwldJolYZTg55Eog9YSAFb6x3Kz4RwQxOWvdepYk5lsGEGObejLASt+2bnHkfgSxSH2irt5J0a0mlphODT6CRB5AEAvxzNzA+bH6pJvpVByK9PzInxHEiv2TecGZh64HTdjeqeC7Fbn+263+HesKIn9FEOvXJ2/G+zofMxyXjcsUa3HkbwhicVTnOlaftI93OmWVC+FGPMUqiDyIILZZFvZPUJdNS+wb7dnxSndgrh2/mdQgSxHEZlS5gpeq60GZTo1oFasIQWxKRY5+q9oKMtR0qsrVeYHdv5HcalKMIDZGPVmgrgYVKdpicmxflx3I5sv01SAlCAJpa77YeZ7co3uPnadTA3kgfds5q+Z1lEly7kcQgH4UO7TcEodXU1cxlV3c0lT9dX0zgoDtWTapaVaxU3tusJsuV85ua6xZFPEiCNiOB6f6zi91aEUiwoFhn7ib7I08ndVRLzcu6ggC1l+kSIueWJyhLSxxNLeP5n2WFTN8u6oWBBsQBCyLvNA1R+qMLeN5/u7xq3e/JtOu9xAELENJujdT6oyVkuA98Xg8VUTr/tecPZvk/PpeBAHTUpb28imS0PdJrRGM97v0h56rmObt8OT5N0oyH0AQMBWybJslSfxOIsQYGI/NbN367N36GwgChmfZJN8lkrQVyRBjQPQ8eX37C7LZsQVBwHjTqczWM+UhosLxvkE/3liW6dNXZ3fUqwRHEDDKdKqvC26UeES68evv1BsRBFI4nWqaVZKhbTKSGIN348MagkDSWD5dmzCSLrhRojTTu//ft+zdKGdNQggCCWOsXXCjxMMzvG2xbnwPgkB86wyn73pJspfMKMbA+MdVbVtqFkbeRRAYN/Hughsm5Onvp27c0yDLwh8iCIx+2TbBXXCjhLx23DlENx5BYMhl26R1wY0Sj85s3bb+bv11BIFhlm1T1gU31rJwfrgFQaCfGO1nS3L8KdVdcMMsC0/x6mvc/mfIDDBkF9wAUbHU2TSD7LD1qGH8LnjSRw6H9nLxJO/nyQ4bY7YueJKiRb7JvaoRSobYFLN3wRMUH6k/FsXnb/8YGWLn6ZTTe51VuuDxrDPkj8WFZIeNWZrePNmSXfDxRIb2iro8guywMb1dcIkAUvRFq6ozytOiJ5Eh9l62VV3wtxGCOgP6i5HhvViSoRwhjq4zlju0i8gOO0+njpwF70KIvp26r8r2/JvIDqZT0gXXmpGiLz5UtRd1hu2nUzs+SRf8qNiv6oyyCR+cS3bYGLrgg9cZqv4iO2wMXfBB4x3Znj+P7LA5h7vgzS8iBHUG9IMuOHUGDLZsSxd8sKiVPxaXkx02R/5C3koX/KjYWupsdpEZtl+2pQs+IPaqUVQWJ04mO+w8naILfkydIVEm3yWd7IDekcODGIf7GQ9l7phJVsAxFDmbb1H7h2x5DjxD21bsbHaTBTAs0bToCSLJAhvtreoodWpLCq94+1R+fRhVXaISx8JXfnarOqPYuWsSvzaMGXVptEoki+27qi1yeK/k14X4FfLSICvJ8Fab+3xG87syIubwa0LiRDl8lPZN6gyAIVCNM3XxgCTebuoMgCE4dNm0QRuMMtLVlTh8V/ErQepFyWyZZqAdv++pZWp+FTBgIX/o/cCGFInRqeqM4ku2n8YvAYalX6NxR5LEOKhGrxWO9zP4+mCeQl5WjGLnSfwJlOM/yzN8V/O1wbSUTtk5MXbBQ3ccxdhOnQGWoiSz6RNxOGsSUqtm1Blg3RHl0GlF75ax1BkPZexw8AXB+vVJ3/VB2q4RPEf2X3VBHV8NbMdfHG1nqaXZQ1OnY+TwakoivhLYnhUTfVNiO4YPSuiqznh8RtPpfBmA/vVJZvNs6gwAAAAAAAAAAAAAAAAAgBTzf9R8pQcJ2ipLAAAAAElFTkSuQmCC"";
}";

        public const string QRCodeNugetInstallExample = @"Install-Package Blazorise.QRCode";

        public const string RichTextEditConfigurationExample = @"<RichTextEdit ConfigureQuillJsMethod=""myComponent.configureQuillJs"" />

@* Define this configuration in a javascript file
    window.myComponent = {
        configureQuillJs: () => {
            var link = Quill.import(""formats/link"");

            link.sanitize = url => {
                let newUrl = window.decodeURIComponent(url);
                newUrl = newUrl.trim().replace(/\s/g, """");

                if (/^(:\/\/)/.test(newUrl)) {
                    return `http${newUrl}`;
                }

                if (!/^(f|ht)tps?:\/\//i.test(newUrl)) {
                    return `http://${newUrl}`;
                }

                return newUrl;
            }
        }
    }
*@";

        public const string RichTextEditExample = @"<RichTextEdit @ref=""richTextEditRef""
              Theme=""RichTextEditTheme.Snow""
              ContentChanged=""@OnContentChanged""
              PlaceHolder=""Type your post here...""
              ReadOnly=""@readOnly""
              SubmitOnEnter=""false""
              EnterPressed=""@OnSave""
              ToolbarPosition=""Placement.Bottom"">
    <Editor>My example content</Editor>
    <Toolbar>
        <RichTextEditToolbarGroup>
            <RichTextEditToolbarButton Action=""RichTextEditAction.Bold"" />
            <RichTextEditToolbarButton Action=""RichTextEditAction.Italic"" />
            <RichTextEditToolbarSelect Action=""RichTextEditAction.Size"">
                <RichTextEditToolbarSelectItem Value=""small"" />
                <RichTextEditToolbarSelectItem Selected />
                <RichTextEditToolbarSelectItem Value=""large"" />
                <RichTextEditToolbarSelectItem Value=""huge"">Very Big</RichTextEditToolbarSelectItem>
            </RichTextEditToolbarSelect>
            <RichTextEditToolbarButton Action=""RichTextEditAction.List"" Value=""ordered"" />
            <RichTextEditToolbarButton Action=""RichTextEditAction.List"" Value=""bullet"" />
        </RichTextEditToolbarGroup>
        <!-- Custom toolbar content -->
        <RichTextEditToolbarGroup Float=""Float.End"">
            <Button onClick=""window.open('https://www.quilljs.com/','quilljs')""><Icon Name=""IconName.InfoCircle"" /></Button>
            <Button Clicked=""@OnSave""><Icon Name=""IconName.Save"" /></Button>
        </RichTextEditToolbarGroup>
    </Toolbar>
</RichTextEdit>

@code{
    protected RichTextEdit richTextEditRef;
    protected bool readOnly;
    protected string contentAsHtml;
    protected string contentAsDeltaJson;
    protected string contentAsText;
    protected string savedContent;

    public async Task OnContentChanged()
    {
        contentAsHtml = await richTextEditRef.GetHtmlAsync();
        contentAsDeltaJson = await richTextEditRef.GetDeltaAsync();
        contentAsText = await richTextEditRef.GetTextAsync();
    }

    public async Task OnSave()
    {
        savedContent = await richTextEditRef.GetHtmlAsync();
        await richTextEditRef.ClearAsync();
    }
}";

        public const string RichTextEditImportsExample = @"@using Blazorise.RichTextEdit";

        public const string RichTextEditNugetInstallExample = @"Install-Package Blazorise.RichTextEdit";

        public const string RichTextEditStartupExample = @"builder.Services
    .AddBlazoriseRichTextEdit( options => { ... } );";

        public const string SelectListExample = @"<SelectList TItem=""MyCountryModel""
            TValue=""int""
            Data=""@IndexedCountries""
            TextField=""@((item)=>item.Name)""
            ValueField=""@((item)=>item.Id)""
            @bind-SelectedValue=""@selectedListValue""
            DefaultItemText=""Choose your country"" />

@code {
    public class MyCountryModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    static string[] Countries = { ""Albania"", ""Andorra"", ""Armenia"", ""Austria"", ""Azerbaijan"", ""Belarus"", ""Belgium"", ""Bosnia & Herzegovina"", ""Bulgaria"", ""Croatia"", ""Cyprus"", ""Czech Republic"", ""Denmark"", ""Estonia"", ""Finland"", ""France"", ""Georgia"", ""Germany"", ""Greece"", ""Hungary"", ""Iceland"", ""Ireland"", ""Italy"", ""Kosovo"", ""Latvia"", ""Liechtenstein"", ""Lithuania"", ""Luxembourg"", ""Macedonia"", ""Malta"", ""Moldova"", ""Monaco"", ""Montenegro"", ""Netherlands"", ""Norway"", ""Poland"", ""Portugal"", ""Romania"", ""Russia"", ""San Marino"", ""Serbia"", ""Slovakia"", ""Slovenia"", ""Spain"", ""Sweden"", ""Switzerland"", ""Turkey"", ""Ukraine"", ""United Kingdom"", ""Vatican City"" };
    static IEnumerable<MyCountryModel> IndexedCountries = Enumerable.Range( 1, Countries.Length ).Select( x => new MyCountryModel { Name = Countries[x - 1], Id = x } );

    int selectedListValue { get; set; } = 3;
}";

        public const string SelectListMultipleExample = @"<SelectList TItem=""MyFruitModel""
            TValue=""int""
            Data=""@IndexedFruits""
            TextField=""@((item)=>item.Name)""
            ValueField=""@((item)=>item.Id)""
            Multiple
            @bind-SelectedValues=""@selectedListValues""
            DefaultItemText=""Choose your fruit"" />

@code {
    public class MyFruitModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    static string[] Fruits = { ""Avocado"", ""Banana"", ""Blackberries"", ""Blueberries"", ""Cherries"", ""Cranberries"", ""Lemon"", ""Mango"", ""Orange"", ""Pineapple"", ""Watermelon"" };
    static IEnumerable<MyFruitModel> IndexedFruits = Enumerable.Range( 1, Fruits.Length ).Select( x => new MyFruitModel { Name = Fruits[x - 1], Id = x } );

    IReadOnlyList<int> selectedListValues { get; set; }
}";

        public const string SidebarDynamicExample = @"<Sidebar Data=""@sidebarInfo"" />

@code{
    SidebarInfo sidebarInfo = new SidebarInfo
    {
        Brand = new SidebarBrandInfo
        {
            Text = ""Blazorise Demo""
        },
        Items = new List<SidebarItemInfo>
    {
            new SidebarItemInfo { To = ""#"", Text = ""Dashboard"" },
            new SidebarItemInfo
            {
                Text = ""Email"",
                Icon = IconName.Mail,
                SubItems = new List<SidebarItemInfo>
            {
                    new SidebarItemInfo { To = ""#email/inbox"", Text = ""Inbox"" },
                    new SidebarItemInfo { To = ""#email/compose"", Text = ""Compose Email"" },
                }
            },
            new SidebarItemInfo
            {
                Text = ""Applications"",
                SubItems = new List<SidebarItemInfo>
            {
                    new SidebarItemInfo { To = ""#apps/todo"", Text = ""Todo List"" }
                }
            },
        }
    };
}";

        public const string SidebarImportsExample = @"@using Blazorise.Sidebar";

        public const string SidebarManualExample = @"<Sidebar @ref=""sidebar"">
    <SidebarContent>
        <SidebarBrand>
            <a href=""#"">Blazorise Sidebar</a>
        </SidebarBrand>
        <SidebarNavigation>
            <SidebarLabel>Main</SidebarLabel>
            <SidebarItem>
                <SidebarLink To=""#"" Title=""Home"">
                    <Icon Name=""IconName.Home"" Margin=""Margin.Is3.FromEnd"" />Home
                </SidebarLink>
            </SidebarItem>
            <SidebarItem>
                <SidebarLink Toggled=""(isOpen)=> mailSidebarSubItems.Toggle(isOpen)"" IsShow>
                    <Icon Name=""IconName.Mail"" Margin=""Margin.Is3.FromEnd"" />Email
                </SidebarLink>
                <SidebarSubItem @ref=""mailSidebarSubItems"" IsShow>
                    <SidebarItem>
                        <SidebarLink To=""#email/inbox"">Inbox</SidebarLink>
                    </SidebarItem>
                    <SidebarItem>
                        <SidebarLink To=""#email/compose"">Compose Email</SidebarLink>
                    </SidebarItem>
                    @* other subitems *@
                </SidebarSubItem>
            </SidebarItem>
            <SidebarItem>
                <SidebarLink Toggled=""(isOpen)=> appsSidebarSubItems.Toggle(isOpen)"" IsShow>
                    <Icon Name=""IconName.Smartphone"" Margin=""Margin.Is3.FromEnd"" />Apps
                </SidebarLink>
                <SidebarSubItem @ref=""appsSidebarSubItems"" IsShow>
                    <SidebarItem>
                        <SidebarLink To=""#apps/todo"">Todo List</SidebarLink>
                    </SidebarItem>
                </SidebarSubItem>
            </SidebarItem>
        </SidebarNavigation>
    </SidebarContent>
</Sidebar>

@code{
    Sidebar sidebar;
    SidebarSubItem mailSidebarSubItems;
    SidebarSubItem appsSidebarSubItems;

    void ToggleSidebar()
    {
        sidebar.Toggle();
    }
}";

        public const string SidebarNugetInstallExample = @"Install-Package Blazorise.Sidebar";

        public const string SidebarResourcesExample = @"<link href=""_content/Blazorise.Sidebar/blazorise.sidebar.css"" rel=""stylesheet"" />";

        public const string SnackbarExample = @"<Button Clicked=""@(()=>snackbar.Show())"">Snackbar</Button>

<Snackbar @ref=""snackbar"">
    <SnackbarBody>
        Single line of text directly related to the operation performed
    </SnackbarBody>
</Snackbar>

@code{
    Snackbar snackbar;
}";

        public const string SnackbarImportsExample = @"@using Blazorise.Components
@using Blazorise.Snackbar";

        public const string SnackbarNugetInstallExample = @"Install-Package Blazorise.Snackbar";

        public const string SnackbarResourcesExample = @"<link href=""_content/Blazorise.Snackbar/blazorise.snackbar.css"" rel=""stylesheet"" />";

        public const string SnackbarStackedExample = @"<Button Color=""Color.Primary"" Clicked=""@(()=>snackbarStack.PushAsync(""Current time is: "" + DateTime.Now, SnackbarColor.Info))"">Primary</Button>

<Button Color=""Color.Info"" Clicked=""@(()=>snackbarStack.PushAsync(""Some info message! Timeout: "" + intervalBeforeMsgClose, SnackbarColor.Info, options => {  options.IntervalBeforeClose = intervalBeforeMsgClose; } ))"">Show Info</Button>

<SnackbarStack @ref=""snackbarStack"" Location=""SnackbarStackLocation.End"" />

@code{
    SnackbarStack snackbarStack;
    double intervalBeforeMsgClose = 2000;
}";

        public const string SnackbarVariantExample = @"<Button Color=""Color.Primary"" Clicked=""@(()=>snackbarPrimary.Show())"">Primary</Button>
<Button Color=""Color.Secondary"" Clicked=""@(()=>snackbarSecondary.Show())"">Secondary</Button>

<Snackbar @ref=""snackbarPrimary"" Color=""SnackbarColor.Primary"">
  <SnackbarBody>
    Single line of text directly related to the operation performed
    <SnackbarAction Clicked=""@(()=>snackbarPrimary.Hide())"">ACTION</SnackbarAction>
  </SnackbarBody>
</Snackbar>
<Snackbar @ref=""snackbarSecondary"" Color=""SnackbarColor.Secondary"">
  <SnackbarBody>
    Single line of text directly related to the operation performed
    <SnackbarAction Clicked=""@(()=>snackbarSecondary.Hide())"">ACTION</SnackbarAction>
  </SnackbarBody>
</Snackbar>

@code{
    private Snackbar snackbarPrimary;
    private Snackbar snackbarSecondary;
}";

        public const string SpinKitColorExample = @"<SpinKit Type=""SpinKitType.Plane"" Color=""#ff4a3d"" />";

        public const string SpinKitExample = @"<SpinKit Type=""SpinKitType.Plane"" />";

        public const string SpinKitImportsExample = @"@using Blazorise.SpinKit";

        public const string SpinKitNugetInstallExample = @"Install-Package Blazorise.SpinKit";

        public const string SpinKitResourcesExample = @"<link href=""_content/Blazorise.SpinKit/blazorise.spinkit.css"" rel=""stylesheet"" />";

        public const string SpinKitSizeExample = @"<SpinKit Type=""SpinKitType.Plane"" Size=""20px"" />";

        public const string TreeViewExample = @"<TreeView Nodes=""Items""
          GetChildNodes=""@(item => item.Children)""
          HasChildNodes=""@(item => item.Children?.Any() == true)""
          @bind-SelectedNode=""selectedNode""
          @bind-ExpandedNodes=""expandedNodes"">
    <NodeContent>
        <Icon Name=""IconName.Folder"" />
        @context.Text
    </NodeContent>
</TreeView>

@code{
    public class Item
    {
        public string Text { get; set; }
        public IEnumerable<Item> Children { get; set; }
    }

    IEnumerable<Item> Items = new[]
    {
        new Item { Text = ""Item 1"" },
        new Item
        {
            Text = ""Item 2"",
            Children = new []
            {
                new Item { Text = ""Item 2.1"" },
                new Item
                {
                    Text = ""Item 2.2"",
                    Children = new []
                    {
                        new Item { Text = ""Item 2.2.1"" },
                        new Item { Text = ""Item 2.2.2"" },
                        new Item { Text = ""Item 2.2.3"" },
                        new Item { Text = ""Item 2.2.4"" }
                    }
                },
                new Item { Text = ""Item 2.3"" },
                new Item { Text = ""Item 2.4"" }
            }
        },
        new Item { Text = ""Item 3"" },
    };

    IList<Item> expandedNodes = new List<Item>();
    Item selectedNode;
}";

        public const string TreeViewExpandExample = @"<Button Color=""Color.Primary"" Clicked=""@(()=>treeViewRef.ExpandAll())"">Expand all</Button>
<Button Color=""Color.Secondary"" Clicked=""@(()=>treeViewRef.CollapseAll())"">Collapse all</Button>

<TreeView @ref=""@treeViewRef"" Nodes=""Items"" GetChildNodes=""@(item => item.Children)"" HasChildNodes=""@(item => item.Children?.Any() == true)"">
    <NodeContent>
        <Icon Name=""IconName.Folder"" />
        @context.Text
    </NodeContent>
</TreeView>

@code {
    TreeView<Item> treeViewRef;

    public class Item
    {
        public string Text { get; set; }
        public IEnumerable<Item> Children { get; set; }
    }

    IEnumerable<Item> Items = new[]
    {
        new Item { Text = ""Item 1"" },
        new Item
        {
            Text = ""Item 2"",
            Children = new []
            {
                new Item { Text = ""Item 2.1"" },
                new Item
                {
                    Text = ""Item 2.2"",
                    Children = new []
                    {
                        new Item { Text = ""Item 2.2.1"" },
                        new Item { Text = ""Item 2.2.2"" },
                        new Item { Text = ""Item 2.2.3"" },
                        new Item { Text = ""Item 2.2.4"" }
                    }
                },
                new Item { Text = ""Item 2.3"" },
                new Item { Text = ""Item 2.4"" }
            }
        },
        new Item { Text = ""Item 3"" },
    };
}";

        public const string TreeViewImportsExample = @"@using Blazorise.TreeView";

        public const string TreeViewMultiSelectExample = @"<TreeView Nodes=""Items""
          GetChildNodes=""@(item => item.Children)""
          HasChildNodes=""@(item => item.Children?.Any() == true)""
          SelectionMode=""TreeViewSelectionMode.Multiple""
          @bind-SelectedNodes=""selectedNodes"">
    <NodeContent>
        <Icon Name=""IconName.Folder"" />
        @context.Text
    </NodeContent>
</TreeView>

@code {
    public class Item
    {
        public string Text { get; set; }
        public IEnumerable<Item> Children { get; set; }
    }

    IEnumerable<Item> Items = new[]
    {
        new Item { Text = ""Item 1"" },
        new Item
        {
            Text = ""Item 2"",
            Children = new []
            {
                new Item { Text = ""Item 2.1"" },
                new Item
                {
                    Text = ""Item 2.2"",
                    Children = new []
                    {
                        new Item { Text = ""Item 2.2.1"" },
                        new Item { Text = ""Item 2.2.2"" },
                        new Item { Text = ""Item 2.2.3"" },
                        new Item { Text = ""Item 2.2.4"" }
                    }
                },
                new Item { Text = ""Item 2.3"" },
                new Item { Text = ""Item 2.4"" }
            }
        },
        new Item { Text = ""Item 3"" },
    };

    IList<Item> selectedNodes = new List<Item>();
}";

        public const string TreeViewNugetInstall2Example = @"dotnet add package Blazorise.TreeView";

        public const string TreeViewNugetInstallExample = @"Install-Package Blazorise.TreeView";

        public const string TreeViewResourcesExample = @"<link href=""_content/Blazorise.TreeView/blazorise.treeview.css"" rel=""stylesheet"" />";

        public const string BasicVideoExample = @"<Video Source=""@(""http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4"")"" />";

        public const string DRMVideoExample = @"<Video Source=""@(""https://media.axprod.net/TestVectors/v7-MultiDRM-SingleKey/Manifest_1080p.mpd"")""
       StreamingLibrary=""StreamingLibrary.Dash""
       ProtectionType=""VideoProtectionType.Widevine""
       ProtectionServerUrl=""https://drm-widevine-licensing.axtest.net/AcquireLicense""
       ProtectionHttpRequestHeaders=""eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZXJzaW9uIjoxLCJjb21fa2V5X2lkIjoiYjMzNjRlYjUtNTFmNi00YWUzLThjOTgtMzNjZWQ1ZTMxYzc4IiwibWVzc2FnZSI6eyJ0eXBlIjoiZW50aXRsZW1lbnRfbWVzc2FnZSIsImZpcnN0X3BsYXlfZXhwaXJhdGlvbiI6NjAsInBsYXlyZWFkeSI6eyJyZWFsX3RpbWVfZXhwaXJhdGlvbiI6dHJ1ZX0sImtleXMiOlt7ImlkIjoiOWViNDA1MGQtZTQ0Yi00ODAyLTkzMmUtMjdkNzUwODNlMjY2IiwiZW5jcnlwdGVkX2tleSI6ImxLM09qSExZVzI0Y3Iya3RSNzRmbnc9PSJ9XX19.FAbIiPxX8BHi9RwfzD7Yn-wugU19ghrkBFKsaCPrZmU"" />";

        public const string ImportVideoExample = @"@using Blazorise.Video";

        public const string StreamingVideoExample = @"<Video Source=""@(""https://dash.akamaized.net/akamai/bbb_30fps/bbb_30fps.mpd"")"" StreamingLibrary=""StreamingLibrary.Dash"" />";

        public const string VideoNugetInstallExample = @"Install-Package Blazorise.Video";

        public const string AntDesignGuideNuget1Example = @"Install-Package Blazorise.AntDesign";

        public const string AntDesignGuideNuget2Example = @"Install-Package Blazorise.Icons.FontAwesome";

        public const string AntDesignGuideRegistrationExample = @"using Blazorise;
using Blazorise.AntDesign;
using Blazorise.Icons.FontAwesome;

builder.Services
    .AddBlazorise( options =>
    {
        options.Immediate = true;
    } )
    .AddAntDesignProviders()
    .AddFontAwesomeIcons();";

        public const string AntDesignGuideSourceFilesExample = @"<link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/antd/4.0.0/antd.css"" integrity=""sha256-nzhI/tsi9npc5ir08wCgBpg43SEIrc7crRJLsHE0/60="" crossorigin=""anonymous"" />
<link rel=""stylesheet"" href=""https://use.fontawesome.com/releases/v5.15.4/css/all.css"">

<link href=""_content/Blazorise/blazorise.css"" rel=""stylesheet"" />
<link href=""_content/Blazorise.AntDesign/blazorise.antdesign.css"" rel=""stylesheet"" />";

        public const string AntDesignGuideUsingExample = @"@using Blazorise";

        public const string BootstrapGuideNuget1Example = @"Install-Package Blazorise.Bootstrap";

        public const string BootstrapGuideNuget2Example = @"Install-Package Blazorise.Icons.FontAwesome";

        public const string BootstrapGuideRegistrationExample = @"using Blazorise;
using Blazorise.Bootstrap;
using Blazorise.Icons.FontAwesome;

builder.Services
    .AddBlazorise( options =>
    {
        options.Immediate = true;
    } )
    .AddBootstrapProviders()
    .AddFontAwesomeIcons();";

        public const string BootstrapGuideSourceFilesExample = @"<html>
<head>
	<!-- inside of head section -->
	<link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css"" integrity=""sha384-zCbKRCUGaJDkqS1kPbPd7TveP5iyJE0EjAuZQTgFLD2ylzuqKfdKlfG/eSrtxUkn"" crossorigin=""anonymous"">
	<link rel=""stylesheet"" href=""https://use.fontawesome.com/releases/v5.15.4/css/all.css"">

	<link href=""_content/Blazorise/blazorise.css"" rel=""stylesheet"" />
	<link href=""_content/Blazorise.Bootstrap/blazorise.bootstrap.css"" rel=""stylesheet"" />
</head>
<body>
	<div id=""app""></div>

	<!-- inside of body section and after the div/app tag  -->
	<!-- These are the standard js dependencies this provider tipically dependes upon, but Blazorise deems these as optional as Blazorise Components should work correctly without these  -->
	<script src=""https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js"" integrity=""sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"" crossorigin=""anonymous""></script>
	<script src=""https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"" integrity=""sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN"" crossorigin=""anonymous""></script>
	<script src=""https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/js/bootstrap.min.js"" integrity=""sha384-VHvPCCyXqtD5DqJeNxl2dtTyhF78xXNXdkwX1CZeRusQfRKp+tA7hAShOK/B/fQ2"" crossorigin=""anonymous""></script>
</body>
</html>";

        public const string BootstrapGuideUsingExample = @"@using Blazorise";

        public const string Bootstrap5GuideNuget1Example = @"Install-Package Blazorise.Bootstrap5";

        public const string Bootstrap5GuideNuget2Example = @"Install-Package Blazorise.Icons.FontAwesome";

        public const string Bootstrap5GuideRegistrationExample = @"using Blazorise;
using Blazorise.Bootstrap5;
using Blazorise.Icons.FontAwesome;

builder.Services
    .AddBlazorise( options =>
    {
        options.Immediate = true;
    } )
    .AddBootstrap5Providers()
    .AddFontAwesomeIcons();";

        public const string Bootstrap5GuideSourceFilesExample = @"<html>
<head>
  <!-- inside of head section -->
  <link href=""https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css"" rel=""stylesheet"" integrity=""sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU"" crossorigin=""anonymous"">
  <link rel=""stylesheet"" href=""https://use.fontawesome.com/releases/v5.15.4/css/all.css"">

  <link href=""_content/Blazorise/blazorise.css"" rel=""stylesheet"" />
  <link href=""_content/Blazorise.Bootstrap5/blazorise.bootstrap5.css"" rel=""stylesheet"" />
</head>
<body>
  <div id=""app""></div>

  <!-- inside of body section and after the div/app tag  -->
  <!-- These are the standard js dependencies this provider tipically dependes upon, but Blazorise deems these as optional as Blazorise Components should work correctly without these  -->
  <script src=""https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js"" integrity=""sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ"" crossorigin=""anonymous""></script>
</body>
</html>";

        public const string Bootstrap5GuideUsingExample = @"@using Blazorise";

        public const string BulmaGuideNuget1Example = @"Install-Package Blazorise.Bulma";

        public const string BulmaGuideNuget2Example = @"Install-Package Blazorise.Icons.FontAwesome";

        public const string BulmaGuideRegistrationExample = @"using Blazorise;
using Blazorise.Bulma;
using Blazorise.Icons.FontAwesome;

builder.Services
    .AddBlazorise( options =>
    {
        options.Immediate = true;
    } )
    .AddBulmaProviders()
    .AddFontAwesomeIcons();";

        public const string BulmaGuideSourceFilesExample = @"<link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/bulma@0.9.1/css/bulma.min.css"" />
<link href=""_content/Blazorise/blazorise.css"" rel=""stylesheet"" />
<link href=""_content/Blazorise.Bulma/blazorise.bulma.css"" rel=""stylesheet"" />

<link rel=""stylesheet"" href=""https://use.fontawesome.com/releases/v5.15.4/css/all.css"" />";

        public const string BulmaGuideUsingExample = @"@using Blazorise";

        public const string MaterialGuideFileStructureExample = @"blazorproject.client/
â””â”€â”€ wwwroot/
    â”œâ”€â”€ css/
    â””â”€â”€ js/";

        public const string MaterialGuideNuget1Example = @"Install-Package Blazorise.Material";

        public const string MaterialGuideNuget2Example = @"Install-Package Blazorise.Icons.Material";

        public const string MaterialGuideRegistrationExample = @"using Blazorise;
using Blazorise.Material;
using Blazorise.Icons.Material;

builder.Services
    .AddBlazorise( options =>
    {
        options.Immediate = true;
    } )
    .AddMaterialProviders()
    .AddMaterialIcons();";

        public const string MaterialGuideSourceFilesExample = @"<!-- Material CSS -->
<link href=""css/material.min.css"" rel=""stylesheet"">

<!-- Add Material font (Roboto) and Material icon as needed -->
<link href=""https://fonts.googleapis.com/css?family=Roboto:300,300i,400,400i,500,500i,700,700i|Roboto+Mono:300,400,700|Roboto+Slab:300,400,700"" rel=""stylesheet"">
<link href=""https://fonts.googleapis.com/icon?family=Material+Icons"" rel=""stylesheet"">

<link href=""_content/Blazorise/blazorise.css"" rel=""stylesheet"" />
<link href=""_content/Blazorise.Material/blazorise.material.css"" rel=""stylesheet"" />
<link href=""_content/Blazorise.Icons.Material/blazorise.icons.material.css"" rel=""stylesheet"" />

<!-- Optional JavaScript -->
<!-- These are the standard js dependencies this provider tipically dependes upon, but Blazorise deems these as optional as Blazorise Components should work correctly without these  -->
<!-- jQuery first, then Popper.js, then Material JS -->
<script src=""https://code.jquery.com/jquery-3.5.0.slim.min.js""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js""></script>
<script src=""https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js""></script>

<!-- Mandatory JavaScript -->
<script src=""js/material.min.js""></script>
<script src=""_content/Blazorise.Material/blazorise.material.js""></script>";

        public const string MaterialGuideUsingExample = @"@using Blazorise";

        public const string TailwindGuideNuget1Example = @"Install-Package Blazorise.Tailwind";

        public const string TailwindGuideNuget2Example = @"Install-Package Blazorise.Icons.FontAwesome";

        public const string TailwindGuideRegistrationExample = @"using Blazorise;
using Blazorise.Tailwind;
using Blazorise.Icons.FontAwesome;

builder.Services
    .AddBlazorise()
    .AddTailwindProviders()
    .AddFontAwesomeIcons();";

        public const string TailwindGuideSourceFiles1Example = @"<link href=""https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&amp;display=swap"" rel=""stylesheet"">
<link rel=""stylesheet"" href=""https://unpkg.com/flowbite@1.5.4/dist/flowbite.min.css"" />
<link rel=""stylesheet"" href=""https://use.fontawesome.com/releases/v5.15.4/css/all.css"" />

<script src=""https://cdn.tailwindcss.com""></script>
<script src=""_content/Blazorise.Tailwind/blazorise.tailwind.config.js?v=1.2.0.0""></script>

<link href=""_content/Blazorise/blazorise.css"" rel=""stylesheet"" />
<link href=""_content/Blazorise.Tailwind/blazorise.tailwind.css"" rel=""stylesheet"" />";

        public const string TailwindGuideSourceFiles2Example = @"<script src=""https://unpkg.com/flowbite@1.5.4/dist/flowbite.js""></script>";

        public const string TailwindGuideUsingExample = @"@using Blazorise";

        public const string CustomLanguageExample = @"<Field>
    <FileEdit Multiple=""false"" />
    <FileEdit Multiple />
</Field>
<Field>
    <Button Clicked=""OnButtonClick"">Change culture to polish</Button>
</Field>

@code{
    [Inject]
    Blazorise.Localization.ITextLocalizerService LocalizationService { get; set; }

    // By using FileEdit as generic typeparam, Blazorise will know
    // what component need to update localization resources.
    [Inject]
    Blazorise.Localization.ITextLocalizer<FileEdit> FileEditLocalizer { get; set; }

    protected override Task OnInitializedAsync()
    {
        FileEditLocalizer.AddLanguageResource( new Blazorise.Localization.TextLocalizationResource
        {
            Culture = ""pl-PL"",
            Translations = new Dictionary<string, string>()
{
            { ""Choose file"", ""Wybierz plik"" },
            { ""Choose files"", ""Wybierz pliki"" },
        }
        } );

        return base.OnInitializedAsync();
    }

    Task OnButtonClick()
    {
        return SelectCulture( ""pl-PL"" );
    }

    Task SelectCulture( string name )
    {
        LocalizationService.ChangeLanguage( name );

        return Task.CompletedTask;
    }
}";

        public const string ITextLocalizerServiceExample = @"@using System.Globalization

<Field>
    <FileEdit />
</Field>
<Field>
    <Addons>
        <Addon AddonType=""AddonType.Start"">
            <SelectList TItem=""CultureInfo""
                        TValue=""string""
                        Data=""@LocalizationService.AvailableCultures""
                        TextField=""@((item)=>item.IsNeutralCulture ? item.EnglishName : item.Parent.EnglishName)""
                        ValueField=""@((item)=>item.Name)""
                        @bind-SelectedValue=""selectedCulture""
                        DefaultItemText=""Choose your culture"" />
        </Addon>
        <Addon AddonType=""AddonType.Body"">
            <Button Clicked=""OnButtonClick"">Change culture</Button>
        </Addon>
    </Addons>
</Field>

@code{
    [Inject]
    Blazorise.Localization.ITextLocalizerService LocalizationService { get; set; }

    private string selectedCulture;

    Task OnButtonClick()
    {
        if ( string.IsNullOrWhiteSpace( selectedCulture ) )
            return Task.CompletedTask;

        return SelectCulture( selectedCulture );
    }

    Task SelectCulture( string name )
    {
        LocalizationService.ChangeLanguage( name );

        return Task.CompletedTask;
    }
}";

        public const string TextLocalizerHandlerExample = @"<Field>
    <FileEdit BrowseButtonLocalizer=""@((name, arguments)=>"" My custom browse button"")"" />
</Field>";

        public const string BorderExample = @"<Span Border=""Border.Is1"">Border on all sides</Span>

<Span Border=""Border.Is1.Rounded"">Rounded</Span>

<Span Border=""Border.Primary"">Borders with primary color</Span>";

        public const string ColumnSizeExample = @"<Row>
    <Column ColumnSize=""ColumnSize.Is4.OnTablet.Is3.OnWidescreen.Is12.OnMobile"">
    Some content...    
    </Column>
</Row>";

        public const string DisplayExample = @"<Paragraph Display=""Display.None.Block.OnFullHD"">
    Hides on screens smaller than lg
</Paragraph>";

        public const string FlexAlignItemsExample = @"<Div Flex=""Flex.AlignItems.Start"" Margin=""Margin.Is3.FromBottom"" Style=""@alignItemsFlexContainerStyle"">
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 1
    </Div>
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 2
    </Div>
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 3
    </Div>
</Div>
<Div Flex=""Flex.AlignItems.End"" Margin=""Margin.Is3.FromBottom"" Style=""@alignItemsFlexContainerStyle"">
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 1
    </Div>
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 2
    </Div>
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 3
    </Div>
</Div>
<Div Flex=""Flex.AlignItems.Center"" Margin=""Margin.Is3.FromBottom"" Style=""@alignItemsFlexContainerStyle"">
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 1
    </Div>
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 2
    </Div>
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 3
    </Div>
</Div>
<Div Flex=""Flex.AlignItems.Baseline"" Margin=""Margin.Is3.FromBottom"" Style=""@alignItemsFlexContainerStyle"">
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 1
    </Div>
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 2
    </Div>
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 3
    </Div>
</Div>
<Div Flex=""Flex.AlignItems.Stretch"" Margin=""Margin.Is3.FromBottom"" Style=""@alignItemsFlexContainerStyle"">
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 1
    </Div>
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 2
    </Div>
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 3
    </Div>
</Div>
@code {
    const string ContainerBackgroundColor = ""rgba(165, 181, 167,.15)"";
    const string ContainerBorderColor = ""rgba(165, 181, 167,.15)"";

    const string ItemBackgroundColor = ""rgba(95, 163, 103,.15)"";
    const string ItemBorderColor = ""rgba(95, 163, 103,.15)"";

    string flexContainerStyle = $""background-color: {ContainerBackgroundColor};border: 1px solid {ContainerBorderColor};"";
    string alignItemsFlexContainerStyle = $""background-color: {ContainerBackgroundColor};border: 1px solid {ContainerBorderColor};height: 100px;"";

    string flexItemStyle = $""background-color: {ItemBackgroundColor}; border: 1px solid {ItemBorderColor};"";
}";

        public const string FlexJustifyContentExample = @"<Div Flex=""Flex.JustifyContent.Start"" Margin=""Margin.Is3.FromBottom"" Style=""@flexContainerStyle"">
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 1
    </Div>
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 2
    </Div>
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 3
    </Div>
</Div>
<Div Flex=""Flex.JustifyContent.End"" Margin=""Margin.Is3.FromBottom"" Style=""@flexContainerStyle"">
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 1
    </Div>
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 2
    </Div>
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 3
    </Div>
</Div>
<Div Flex=""Flex.JustifyContent.Center"" Margin=""Margin.Is3.FromBottom"" Style=""@flexContainerStyle"">
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 1
    </Div>
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 2
    </Div>
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 3
    </Div>
</Div>
<Div Flex=""Flex.JustifyContent.Between"" Margin=""Margin.Is3.FromBottom"" Style=""@flexContainerStyle"">
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 1
    </Div>
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 2
    </Div>
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 3
    </Div>
</Div>
<Div Flex=""Flex.JustifyContent.Around"" Margin=""Margin.Is3.FromBottom"" Style=""@flexContainerStyle"">
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 1
    </Div>
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 2
    </Div>
    <Div Padding=""Padding.Is2"" Style=""@flexItemStyle"">
        Flex item 3
    </Div>
</Div>
@code {
    const string ContainerBackgroundColor = ""rgba(165, 181, 167,.15)"";
    const string ContainerBorderColor = ""rgba(165, 181, 167,.15)"";

    const string ItemBackgroundColor = ""rgba(95, 163, 103,.15)"";
    const string ItemBorderColor = ""rgba(95, 163, 103,.15)"";

    string flexContainerStyle = $""background-color: {ContainerBackgroundColor};border: 1px solid {ContainerBorderColor};"";
    string alignItemsFlexContainerStyle = $""background-color: {ContainerBackgroundColor};border: 1px solid {ContainerBorderColor};height: 100px;"";

    string flexItemStyle = $""background-color: {ItemBackgroundColor}; border: 1px solid {ItemBorderColor};"";
}";

        public const string OverflowExample = @"<Div Display=""Display.Flex.Row.OnDesktop"">
    <Div Overflow=""Overflow.Auto"" Padding=""Padding.Is3"" Margin=""Margin.Is3.FromBottom.Is0.FromBottom.OnDesktop.Is3.FromEnd.OnDesktop"" Background=""Background.Light"" Style=""max-width: 260px; max-height: 100px;"">
        This is an example of using <code>Overflow.Auto</code> on an element with set width and height dimensions. By design, this content will vertically scroll.
    </Div>
    <Div Overflow=""Overflow.Hidden"" Padding=""Padding.Is3"" Margin=""Margin.Is3.FromBottom.Is0.FromBottom.OnDesktop.Is3.FromEnd.OnDesktop"" Background=""Background.Light"" Style=""max-width: 260px; max-height: 100px;"">
        This is an example of using <code>Overflow.Hidden</code> on an element with set width and height dimensions.
    </Div>
    <Div Overflow=""Overflow.Visible"" Padding=""Padding.Is3"" Margin=""Margin.Is3.FromBottom.Is0.FromBottom.OnDesktop.Is3.FromEnd.OnDesktop"" Background=""Background.Light"" Style=""max-width: 260px; max-height: 100px;"">
        This is an example of using <code>Overflow.Visible</code> on an element with set width and height dimensions.
    </Div>
    <Div Overflow=""Overflow.Scroll"" Padding=""Padding.Is3"" Margin=""Margin.Is3.FromBottom.Is0.FromBottom.OnDesktop.Is3.FromEnd.OnDesktop"" Background=""Background.Light"" Style=""max-width: 260px; max-height: 100px;"">
        This is an example of using <code>Overflow.Scroll</code> on an element with set width and height dimensions.
    </Div>
</Div>";

        public const string SpacingExample = @"<Card>
    <CardBody Margin=""Margin.Is2.OnMobile.Is5.OnDesktop"">
        This example sets the margins for mobile(xs) and desktop(md) breakpoints
    </CardBody>
</Card>";

        public const string BasicPositionExample = @"<Div Position=""Position.Static"">...</Div>
<Div Position=""Position.Relative"">...</Div>
<Div Position=""Position.Absolute"">...</Div>
<Div Position=""Position.Fixed"">...</Div>
<Div Position=""Position.Sticky"">...</Div>";

        public const string PositionArrangeElementsExample = @"<Div Position=""Position.Relative"">
    <Div Position=""Position.Absolute.Top.Is0.Start.Is0""></Div>
    <Div Position=""Position.Absolute.Top.Is0.End.Is0""></Div>
    <Div Position=""Position.Absolute.Top.Is50.Start.Is50""></Div>
    <Div Position=""Position.Absolute.Bottom.Is50.End.Is50""></Div>
    <Div Position=""Position.Absolute.Bottom.Is0.Start.Is0""></Div>
    <Div Position=""Position.Absolute.Bottom.Is0.End.Is0""></Div>
</Div>";

        public const string PositionCenterElements1Example = @"<Div Position=""Position.Relative"">
    <Div Position=""Position.Absolute.Top.Is0.Start.Is0.Translate.Middle""></Div>
    <Div Position=""Position.Absolute.Top.Is0.Start.Is50.Translate.Middle""></Div>
    <Div Position=""Position.Absolute.Top.Is0.Start.Is100.Translate.Middle""></Div>
    <Div Position=""Position.Absolute.Top.Is50.Start.Is0.Translate.Middle""></Div>
    <Div Position=""Position.Absolute.Top.Is50.Start.Is50.Translate.Middle""></Div>
    <Div Position=""Position.Absolute.Top.Is50.Start.Is100.Translate.Middle""></Div>
    <Div Position=""Position.Absolute.Top.Is100.Start.Is0.Translate.Middle""></Div>
    <Div Position=""Position.Absolute.Top.Is100.Start.Is50.Translate.Middle""></Div>
    <Div Position=""Position.Absolute.Top.Is100.Start.Is100.Translate.Middle""></Div>
</Div>";

        public const string PositionCenterElements2Example = @"<Div Position=""Position.Relative"">
    <Div Position=""Position.Absolute.Top.Is0.Start.Is0""></Div>
    <Div Position=""Position.Absolute.Top.Is0.Start.Is50.Translate.MiddleX""></Div>
    <Div Position=""Position.Absolute.Top.Is0.End.Is0""></Div>
    <Div Position=""Position.Absolute.Top.Is50.Start.Is0.Translate.MiddleY""></Div>
    <Div Position=""Position.Absolute.Top.Is50.Start.Is50.Translate.Middle""></Div>
    <Div Position=""Position.Absolute.Top.Is50.End.Is0.Translate.MiddleY""></Div>
    <Div Position=""Position.Absolute.Bottom.Is0.Start.Is0""></Div>
    <Div Position=""Position.Absolute.Bottom.Is0.Start.Is50.Translate.MiddleX""></Div>
    <Div Position=""Position.Absolute.Bottom.Is0.End.Is0""></Div>
</Div>";

        public const string PositionRealExample = @"<Button Color=""Color.Primary"" Position=""Position.Relative"">
    Mails
    <Badge Color=""Color.Secondary"" Pill Position=""Position.Absolute.Top.Is0.Start.Is100.Translate.Middle"">
        +99
    </Badge>
</Button>
<Button Color=""Color.Primary"" Position=""Position.Relative"">
    Alerts
    <Badge Color=""Color.Danger"" Pill Position=""Position.Absolute.Top.Is0.Start.Is100.Translate.Middle"" Border=""Border.Light.OnAll.RoundedCircle"" Padding=""Padding.Is2"">
        <Span Visibility=""Visibility.Invisible"" Position=""Position.Absolute"">unread messages</Span>
    </Badge>
</Button>";

        public const string BasicMessageServiceExample = @"<Button Color=""Color.Primary"" Clicked=""@ShowInfoMessage"">Say hi!</Button>
<Button Color=""Color.Danger"" Clicked=""@ShowConfirmMessage"">Confirm</Button>

@code{
    [Inject] IMessageService MessageService { get; set; }

    Task ShowInfoMessage()
    {
        return MessageService.Info( ""This is a simple info message!"", ""Hello"" );
    }

    async Task ShowConfirmMessage()
    {
        if ( await MessageService.Confirm( ""Are you sure you want to confirm?"", ""Confirmation"" ) )
        {
            Console.WriteLine( ""OK Clicked"" );
        }
        else
        {
            Console.WriteLine( ""Cancel Clicked"" );
        }
    }
}";

        public const string MessageServiceUsageExample = @"<Router AppAssembly=""typeof(App).Assembly"">
    <Found>...</Found>
    <NotFound>...</NotFound>
</Router>

<MessageProvider />";

        public const string CounterExample = @"<Heading>Counter</Heading>

<Paragraph>@Value</Paragraph>

@code {
    [Parameter] public long Value { get; set; }
}";

        public const string CustomStructureModalExample = @"<ModalHeader>
    <ModalTitle>My Custom Structure</ModalTitle>
    <CloseButton />
</ModalHeader>
<ModalBody MaxHeight=""70"">
    Welcome @UserName!
</ModalBody>
<ModalFooter>
    <Button Color=""Color.Success"" Clicked=""Confirm"">Cheers!</Button>
</ModalFooter>

@code {
    [Inject] public IModalService ModalService { get; set; }

    [Parameter] public string UserName { get; set; }

    private async Task Confirm()
    {
        await ModalService.Hide();
    }
}";

        public const string FormularyModalExample = @"<ModalHeader>
    <ModalTitle>
        Please fill in the formulary
    </ModalTitle>
    <CloseButton />
</ModalHeader>
<ModalBody>
    <Field Horizontal>
        <FieldLabel ColumnSize=""ColumnSize.IsFull.OnTablet.Is3.OnDesktop"">First Name</FieldLabel>
        <FieldBody ColumnSize=""ColumnSize.IsFull.OnTablet.Is9.OnDesktop"">
            <TextEdit @bind-Text=""model.FirstName""></TextEdit>
        </FieldBody>
    </Field>

    <Field Horizontal>
        <FieldLabel ColumnSize=""ColumnSize.IsFull.OnTablet.Is3.OnDesktop"">Email</FieldLabel>
        <FieldBody ColumnSize=""ColumnSize.IsFull.OnTablet.Is9.OnDesktop"">
            <TextEdit @bind-Text=""model.Email""></TextEdit>
        </FieldBody>
    </Field>

    @if ( !isValid )
    {
        <Paragraph>
            <Label>Invalid Submission!</Label>
        </Paragraph>
    }
</ModalBody>
<ModalFooter>
    <Button Color=""Color.Success "" Clicked=""Confirm"">Confirm</Button>
    <Button Color=""Color.Secondary"" Clicked=""ModalService.Hide"">Close</Button>
</ModalFooter>
@code {
    private Employee model = new();
    private bool isValid = true;
    [Inject] public IModalService ModalService { get; set; }
    [Parameter] public Func<Employee, Task<bool>> OnValidate { get; set; }
    [Parameter] public Func<Employee, Task> OnSuccess { get; set; }

    private async Task Confirm()
    {
        if ( OnValidate is not null )
            isValid = await OnValidate( model );

        if ( !isValid )
        {
            return;
        }

        await OnSuccess( model );
        await ModalService.Hide();
    }
}";

        public const string ModalProviderCustomRenderFragmentExample = @"<Button Color=""Color.Primary"" Clicked=""ShowRenderFragment"">Show Custom Structure</Button>

@code {
    [Inject] public IModalService ModalService { get; set; }

    private RenderFragment customFragment => __builder =>
    {
        <Paragraph>This content is provided by a custom RenderFragment</Paragraph>
    };

    public Task ShowRenderFragment()
    {
        return ModalService.Show( ""My Custom RenderFragment!"", customFragment );
    }
}";

        public const string ModalProviderCustomStructureExample = @"<Field Horizontal>
    <FieldLabel ColumnSize=""ColumnSize.IsFull.OnTablet.Is2.OnDesktop"">User Name</FieldLabel>
    <FieldBody ColumnSize=""ColumnSize.IsFull.OnTablet.Is10.OnDesktop"">
        <TextEdit @bind-Text=""userName""></TextEdit>
    </FieldBody>
</Field>

<Button Color=""Color.Primary"" Clicked=""ShowCustomStructure"">Show Custom Structure</Button>

@code {
    [Inject] public IModalService ModalService { get; set; }
    private string userName = ""John Doe"";

    public Task ShowCustomStructure()
    {
        return ModalService.Show<CustomStructureModalExample>( parameters => parameters.Add( x => x.UserName, userName ), new ModalInstanceOptions() { UseModalStructure = false } );
    }
}";

        public const string ModalProviderFormularyExample = @"<Paragraph>
    @formularyMessage
</Paragraph>
<Button Color=""Color.Primary"" Clicked=""ShowFormulary"">Show</Button>

@code {
    [Inject] public IModalService ModalService { get; set; }

    private string formularyMessage = """";

    public Task ShowFormulary()
    {
        formularyMessage = string.Empty;
        return ModalService.Show<FormularyModalExample>( x =>
        {
            x.Add( x => x.OnValidate, FormularyValidate );
            x.Add( x => x.OnSuccess, FormularySuccess );
        },
        new ModalInstanceOptions()
            {
                UseModalStructure = false
            } );
    }

    private Task<bool> FormularyValidate( Employee employee )
        => Task.FromResult( !string.IsNullOrWhiteSpace( employee.FirstName ) && !string.IsNullOrWhiteSpace( employee.Email ) );

    private Task FormularySuccess( Employee employee )
    {
        formularyMessage = $""Employee : {employee.FirstName} saved successfully!"";
        return InvokeAsync( StateHasChanged );
    }
}";

        public const string ModalProviderInstantiationExample = @"<Button Color=""Color.Primary"" Clicked=""ShowCounter"">Show Counter</Button>

@code {
    [Inject] public IModalService ModalService { get; set; }

    public Task ShowCounter()
    {
        Random random = new();
        var newValue = random.NextInt64( 100 );
        return ModalService.Show<CounterExample>( ""My Custom Content!"", x => x.Add( x => x.Value, newValue ) );
    }
}";

        public const string ModalProviderOptionsExample = @"<Router AppAssembly=""typeof(App).Assembly"">
    <Found>...</Found>
    <NotFound>...</NotFound>
</Router>

<ModalProvider UseModalStructure Animated Size=""ModalSize.Fullscreen"" />";

        public const string ModalProviderUsageExample = @"<Router AppAssembly=""typeof(App).Assembly"">
    <Found>...</Found>
    <NotFound>...</NotFound>
</Router>

<ModalProvider />";

        public const string ModalServiceOptionsExample = @"<Button Clicked=""InstantiateModal""></Button>
@code {
    [Inject] public IModalService ModalService { get; set; }

    public Task InstantiateModal()
    {
        return ModalService.Show<ModalServiceOptionsExample>( ""Override Options Example"", new ModalInstanceOptions()
        {
            Animated = false,
            UseModalStructure = false,
            Size = ModalSize.Small
        } );
    }
}";

        public const string BasicNotificationServiceExample = @"<Button Color=""Color.Warning"" Clicked=""@ShowWarningNotification"">Show alert!</Button>

@code{
    [Inject] INotificationService NotificationService { get; set; }

    Task ShowWarningNotification()
    {
        return NotificationService.Warning( ""This is a simple notification message!"", ""Hello"" );
    }
}";

        public const string NotificationServiceInstallationExample = @"Install-Package Blazorise.Components";

        public const string NotificationServiceUsageExample = @"<Router AppAssembly=""typeof(App).Assembly"">
    <Found>...</Found>
    <NotFound>...</NotFound>
</Router>

<NotificationProvider />";

        public const string BasicPageProgressServiceExample = @"<Button Color=""Color.Primary"" Clicked=""@SetPageProgress25"">25 %</Button>
<Button Color=""Color.Primary"" Clicked=""@SetPageProgress50"">50 %</Button>
<Button Color=""Color.Primary"" Clicked=""@SetPageProgress75"">75 %</Button>
<Button Color=""Color.Primary"" Clicked=""@SetPageProgress100"">100 %</Button>

<Button Color=""Color.Secondary"" Clicked=""@SetPageProgressIndeterminate"">Indeterminate</Button>

<Button Color=""Color.Secondary"" Clicked=""@SetPageProgressHidden"">Hide</Button>

@code{
    [Inject] IPageProgressService PageProgressService { get; set; }

    Task SetPageProgress25()
    {
        return PageProgressService.Go( 25, options => { options.Color = Color.Warning; } );
    }

    Task SetPageProgress50()
    {
        return PageProgressService.Go( 50, options => { options.Color = Color.Warning; } );
    }

    Task SetPageProgress75()
    {
        return PageProgressService.Go( 75, options => { options.Color = Color.Warning; } );
    }

    Task SetPageProgress100()
    {
        return PageProgressService.Go( 100, options => { options.Color = Color.Warning; } );
    }

    Task SetPageProgressIndeterminate()
    {
        return PageProgressService.Go( null, options => { options.Color = Color.Warning; } );
    }

    Task SetPageProgressHidden()
    {
        // setting it to -1 will hide the progress bar
        return PageProgressService.Go( -1 );
    }
}";

        public const string PageProgressServiceUsageExample = @"<Router AppAssembly=""typeof(App).Assembly"">
    <Found>...</Found>
    <NotFound>...</NotFound>
</Router>

<PageProgressProvider />";

        public const string ComponentsNugetInstallExample = @"Install-Package Blazorise.Components";

        public const string _0941CodeExample = @"<link href=""_content/Blazorise/blazorise.css?v=1.2.0.0"" rel=""stylesheet"" />
<link href=""_content/Blazorise.Bootstrap/blazorise.bootstrap.css?v=1.2.0.0"" rel=""stylesheet"" />

<script src=""_content/Blazorise/blazorise.js?v=1.2.0.0""></script>
<script src=""_content/Blazorise.Bootstrap/blazorise.bootstrap.js?v=1.2.0.0""></script>
<script src=""_content/Blazorise.Bootstrap/blazorise.bootstrap.js?v=1.2.0.0""></script>";

    }
}
