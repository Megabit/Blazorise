<DocsPageSubtitle>
    API
</DocsPageSubtitle>

@{
    IReadOnlyList<ApiDocsForComponent> apiDocsForComponents = ComponentTypes.Select(x => ComponentsApiDocsSource.Instance.Components.GetValueOrDefault(x)).Where(x => x is not null).ToList();
    var hasComponentTypes = ComponentTypes.Any();
    var multipleComponentTypes = ComponentTypes.Count > 1;
    var hasMethods = apiDocsForComponents.Any(x => x.Methods.Any());
}

@if (hasComponentTypes)
{
    <ComponentApiDocsProperty ApiDocsForComponents="apiDocsForComponents"
                              MultipleComponentTypes="multipleComponentTypes"
                              PropertyType="ComponentApiDocsProperty.PropertyTypes.Parameters"/>


    <ComponentApiDocsProperty ApiDocsForComponents="apiDocsForComponents"
                              MultipleComponentTypes="multipleComponentTypes"
                              PropertyType="ComponentApiDocsProperty.PropertyTypes.Events"/>
}

@if (hasMethods)
{
    <Heading Margin="Margin.Is2.FromTop.Is3.FromBottom" Size="HeadingSize.Is3">
        Methods
    </Heading>

    @foreach(var apiDocsForComponent in apiDocsForComponents.Where(x => x?.Methods?.Count > 0))
    {
        <DocsMethods Name="Method" Title="@(multipleComponentTypes ? apiDocsForComponent.TypeName : null)">
            @foreach(ApiDocsForComponentMethod method in apiDocsForComponent.Methods)
            {
                <DocsMethodsItem Name="@method.Name" ReturnType="@method.ReturnTypeName"
                                 Parameters="@(string.Join(", ", method.Parameters.Select(x => $"{x.TypeName} {x.Name}")))">
                    @((MarkupString)method.Description)
                    <ComponentApiDocsRemarks Value="@method.Remarks"/>
                </DocsMethodsItem>
            }
        </DocsMethods>
    }
}

@code {
    [Parameter, EditorRequired] public List<Type> ComponentTypes { get; set; } = [];
}