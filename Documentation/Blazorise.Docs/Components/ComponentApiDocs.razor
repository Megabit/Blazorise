@using Blazorise.Docs.Models.ApiDocsDtos
<DocsPageSubtitle>
    API
</DocsPageSubtitle>

@if (hasComponentTypes)
{
    <ComponentApiDocsProperty ApiDocsForComponents="apiDocsForComponents"
                              MultipleComponentTypes="multipleComponentTypes"
                              PropertyType="ComponentApiDocsProperty.PropertyTypes.Parameters" />


    <ComponentApiDocsProperty ApiDocsForComponents="apiDocsForComponents"
                              MultipleComponentTypes="multipleComponentTypes"
                              PropertyType="ComponentApiDocsProperty.PropertyTypes.Events" />
}

@if (apiDocsForComponentsMethods.Any())
{
    <Heading Margin="Margin.Is2.FromTop.Is3.FromBottom" Size="HeadingSize.Is3">
        Methods
    </Heading>

    @foreach (var apiDocsForComponent in apiDocsForComponentsMethods)
    {
        <DocsMethods Name="Method" Title="@(multipleComponentTypes ? apiDocsForComponent.TypeName : null)">
            @foreach (var method in apiDocsForComponent.Methods.Where(m => !SkipMethods.Any(n => n == m.Name)))
            {
                <DocsMethodsItem Name="@method.Name" ReturnType="@method.ReturnTypeName"
                                 Parameters="@(string.Join(", ", method.Parameters.Select(x => $"{x.TypeName} {x.Name}")))">
                    @((MarkupString)method.Summary)
                    <ComponentApiDocsRemarks Value="@method.Remarks" />
                </DocsMethodsItem>
            }
        </DocsMethods>
    }
}

@code {
    string[] SkipMethods = new[] { "Dispose", "DisposeAsync", "Equals", "GetHashCode", "GetType", "MemberwiseClone", "ToString" };

    [Parameter, EditorRequired] public List<Type> ComponentTypes { get; set; } = [];

    IReadOnlyList<ApiDocsForComponent> apiDocsForComponents;
    List<ApiDocsForComponent> apiDocsForComponentsMethods;
    bool multipleComponentTypes;
    bool hasComponentTypes;

    protected override void OnInitialized()
    {
        apiDocsForComponents = ComponentTypes.Select(x => ComponentsApiDocsSource.Instance.Components.GetValueOrDefault(x)).Where(x => x is not null).ToList();
        hasComponentTypes = ComponentTypes.Any();
        multipleComponentTypes = ComponentTypes.Count > 1;
        apiDocsForComponentsMethods = apiDocsForComponents.Where(x => x.Methods.Any()).ToList();
    }
}