<DocsPageSubtitle>
    API
</DocsPageSubtitle>


@foreach(ApiDocsForComponent apiDocsForComponent in ComponentTypes.Select(x => ComponentsApiDocsSource.Components.GetValueOrDefault(x)).Where(x=> x is not null))
{
    <Heading Margin="Margin.Is2.FromTop" Size="HeadingSize.Is3">
        @apiDocsForComponent.Type.Name
    </Heading>
   
    <DocsAttributes Name="Parameter">
        @if (apiDocsForComponent?.Properties != null)
        {
            foreach(var property in apiDocsForComponent.Properties.OrderBy(x => x.Name))
            {
                <DocsAttributesItem @key="@property.Name" Name="@property.Name" Type="@property.TypeName"
                                    Default="@property.DefaultValueString">
                    @((MarkupString)property.Description)

                    @if (property.IsBlazoriseEnum)
                    {
                        <text>Possible values: </text>
                        for (int i = 0; i < Enum.GetNames(property.Type).Length; i++)
                        {
                            int i1 = i;
                            <Span>@Enum.GetNames(property.Type)[i1]</Span>
                            @(i < Enum.GetNames(property.Type).Length - 1 ? ", " : "")
                        }
                    }
                </DocsAttributesItem>
            }
        }
    </DocsAttributes>

    if (apiDocsForComponent.Methods.Any())
    {
        <DocsMethods Name="Method">
            @foreach(ApiDocsForComponentMethod method in apiDocsForComponent.Methods)
            {
            <DocsMethodsItem Name="@method.Name" ReturnType="@method.ReturnTypeName" Parameters="@(string.Join(',',method.Parameters.Select(x=>$"{x.TypeName} {x.Name}") ))">
                @method.Description
            </DocsMethodsItem>
            }
        </DocsMethods>
    }
    
}


@code {
    [Parameter, EditorRequired] public List<Type> ComponentTypes { get; set; } = [];
}