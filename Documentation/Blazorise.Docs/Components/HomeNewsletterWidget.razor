@using Microsoft.Extensions.Configuration
@using Microsoft.Extensions.DependencyInjection
@using Microsoft.Extensions.Logging
@using SendGrid
@using System.Text.Json
<Row Class="home-newsletter-container">
    <Column ColumnSize="ColumnSize.Is12.Is6.OnWidescreen" Padding="Padding.Is0.FromStart">
        <Heading Size="HeadingSize.Is3" TextColor="TextColor.White">Subscribe to the Newsletter</Heading>
        <Paragraph TextColor="TextColor.White">
            Get information about happenings in Blazorise like new releases, free sources, posts, and more.
        </Paragraph>
    </Column>
    <Column ColumnSize="ColumnSize.Is12.Is6.OnWidescreen">
        <Validations @ref="@validationsRef" Mode="ValidationMode.Manual" ValidateOnLoad>
            <Row Margin="Margin.Is2.FromBottom">
                <Column ColumnSize="ColumnSize.Is8.Is9.OnDesktop" Padding="Padding.Is2.FromEnd">
                    <Validation Validator="ValidationRule.IsEmail">
                        <Field>
                            <TextEdit Role="TextRole.Email" Placeholder="E-mail Address" aria-label="Subscription">
                                <Feedback>
                                    <ValidationError Style="font-size: .85rem;" TextColor="TextColor.Warning">Please complete this required field.</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    @if ( emailSent )
                    {
                        <Alert Color="Color.Success" Visible Style="font-size: .85rem;">
                            <AlertDescription>
                                Thank you for subscribing.
                            </AlertDescription>
                        </Alert>
                    }
                </Column>
                <Column ColumnSize="ColumnSize.Is4.Is3.OnDesktop" Padding="Padding.Is0">
                    <Button Color="Color.Primary" Clicked="@OnSubscribeClicked">Subscribe</Button>
                </Column>
            </Row>
            <Row>
                <Column>
                    @*<Paragraph Style="font-size: .8rem;">
                    Blazorise needs the contact information you provide to contact you about our products and services. You may unsubscribe from these communications at anytime. For information on how to unsubscribe, as well as our privacy practices and commitment to protecting your privacy, check out our <Anchor To="terms" Title="Link to Terms" TextColor="TextColor.White">Terms &amp; Conditions</Anchor> and <Anchor To="privacy" Title="Link to Privacy Policy" TextColor="TextColor.White">Privacy Policy</Anchor>.
                    </Paragraph>*@
                    <Validation Validator="ValidationRule.IsChecked">
                        <Field Margin="Margin.Is1.FromBottom">
                            <Check @bind-Checked="@termsAgreed">
                                <ChildContent>
                                    I agree to the <Anchor To="terms" TextColor="TextColor.White">Terms &amp; Conditions</Anchor> and <Anchor To="privacy" TextColor="TextColor.White">Privacy Policy</Anchor>.
                                </ChildContent>
                                <Feedback>
                                    <ValidationError Style="font-size: .85rem;" TextColor="TextColor.Warning">You must agree to our terms and privacy policy.</ValidationError>
                                </Feedback>
                            </Check>
                        </Field>
                    </Validation>
                    <Field>
                        <Check TValue="bool" @bind-Checked="@marketingAgreed">
                            I would like to receive marketing materials like product deals &amp; special offers.
                        </Check>
                    </Field>
                </Column>
            </Row>
        </Validations>
    </Column>
</Row>

@code {
    Validations validationsRef;
    string email;
    bool termsAgreed;
    bool marketingAgreed;
    bool emailSent;

    [Parameter] public bool ShowHeading { get; set; } = true;

    [Parameter] public bool Small { get; set; }

    [Inject] public ILogger<NewsletterWidget> Logger { get; set; }

    [Inject] public IConfiguration Configuration { get; set; }

    async Task OnSubscribeClicked()
    {
        emailSent = false;

        try
        {
            if ( await validationsRef.ValidateAll() )
            {
                var apiKey = Configuration["SendGrid:ApiKey"];

                var content = JsonSerializer.Serialize( new
                {
                    list_ids = new[] { Configuration["SendGrid:ListId"] },
                    contacts = new[] { new { email = email } }
                } );

                var sendGridClient = new SendGridClient( apiKey );

                var response = await sendGridClient.RequestAsync( BaseClient.Method.PUT, content, null, "marketing/contacts" );

                if ( response.IsSuccessStatusCode )
                {
                    email = null;
                    emailSent = true;
                }

                await validationsRef.ClearAll();
            }
        }
        catch ( Exception exc )
        {
            Logger.LogError( exc.Message );
        }
    }
}
