@page "/news/release-notes/130"

<Seo Canonical="news/release-notes/130" Title="Blazorise v1.3" Description="This blog post contains the changelog of the most recent bug fixes, improvements and new features included in the Blazorise v1.3 release." ImageUrl="img/news/empty.png" />

<NewsPageImage Source="img/news/empty.png" Text="Blazorise v1.3" />

<NewsPageTitle>
    Announcing Blazorise 1.3
</NewsPageTitle>

<Paragraph>
    TODO
</Paragraph>

<NewsPageSubtitle>
    Blazorise 1.3 Highlights 💡
</NewsPageSubtitle>

<UnorderedList>
    <UnorderedListItem>
        TODO
    </UnorderedListItem>
</UnorderedList>

<NewsPageSubtitle>
    Upgrade an existing Blazorise project 👨‍🔧
</NewsPageSubtitle>

<Paragraph>
    To upgrade an existing Blazorise applications from <Strong>1.1.x</Strong> to <Strong>1.3</Strong>:
</Paragraph>

<UnorderedList>
    <UnorderedListItem>
        Update all <Strong>Blazorise.*</Strong> package references to <Strong>1.3</Strong>.
    </UnorderedListItem>
</UnorderedList>

<Paragraph>
    You should now be able to use Blazorise without any breaking changes.
</Paragraph>

<NewsPageSubtitle>
    Breaking Behaviour
</NewsPageSubtitle>

<OrderedList>
    <OrderedListItem>
        <Paragraph>
            <Code>DataGrid</Code> : The data collection no longer automatically updates upon mutating the collection, for example, by using methods like <Code>Add</Code> or <Code>Remove</Code>.
        </Paragraph>
        <Paragraph>
            While this feature was good to have by default, the way it was implemented, was a general performance hit on <Code>DataGrid</Code> usage, even if it wasn't in the interest of the consumer to use it.
        </Paragraph>
        <Paragraph>
            As such we now recommended the following, either:
        </Paragraph>
        <Paragraph>
            <UnorderedList>
                <UnorderedListItem>Invoke <Code>gridRef.Reload();</Code> when you're done mutating your collection;</UnorderedListItem>
                <UnorderedListItem>Have your data be observable by using any implementation of the <Code>INotifyCollectionChanged</Code>, like the <Code>ObservableCollection</Code>. The example below ilustrates this.</UnorderedListItem>
            </UnorderedList>
        </Paragraph>
        <Paragraph>
            Please visit, <Anchor To="docs/extensions/datagrid/binding-data/observable">observable data docs</Anchor> for more information.
        </Paragraph>
    </OrderedListItem>
</OrderedList>
<NewsPageSubtitle>
    New Features 🚀
</NewsPageSubtitle>

<Heading Size="HeadingSize.Is3">
    Message Provider
</Heading>

<Paragraph>
    We have added localization support to the MessageProvider. This update will allow developers to create applications that can support multiple languages and locales.
</Paragraph>

<Paragraph>
    The MessageProvider is a vital component in Blazorise that enables the display of notifications, alerts, and other messages to users. With the added localization support, developers can now customize the messages displayed to users based on their preferred language and locale.
</Paragraph>

<Paragraph>
    This update will make it easier for developers to create applications that can cater to a global audience. We hope this update will be beneficial to our users and help them create more accessible and user-friendly applications.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    DataGrid
</Heading>

<Paragraph>
    There is now a new <Code>FilterMode</Code> option that allows you to specify a new Filter Mode. By setting the <Code>FilterMode</Code> to the new <Code>DataGridFilterMode.Menu</Code>, the <Code>DataGrid</Code> will now show a filter icon by each column allowing your users to dinamically customize the filter to apply on per column basis.
</Paragraph>

<Paragraph>
    Please visit, <Anchor To="docs/extensions/datagrid/features/filtering">datagrid filtering docs</Anchor> to find a new example showcasing this feature.
</Paragraph>

<Paragraph>
    The <Code>DataGridSelectColumn</Code> will now enable you to provide new parameters so you can quickly render a select structure.
</Paragraph>

<Paragraph>
    We've changed the <Code>CancellableRowChange</Code> argument that's provided in the RowInserting, RowUpdating and RowRemoving callbacks and the <Code>SavedRowItem</Code> that's provided in the RowInserted, RowUpdated callbacks to now provide both an <Code>OldItem</Code> and <Code>NewItem</Code>.
</Paragraph>

<Paragraph>
    <Code>OldItem</Code> will replace the regular existing <Code>Item</Code> as it's easier to understand what it represents.
    <Code>Item</Code> is now marked as obsolete and will be removed in a future release.
</Paragraph>

<Paragraph>
    <Code>NewItem</Code> is a deep clone of the item that's being inserted or updated with the updated edit values.
</Paragraph>

<Paragraph>
    The existing <Code>Values</Code> Dictionary will still exist, but this allows you to promptly get a mapped <Code>TItem</Code> without having to write your own mapping code from the <Code>Dictionary</Code>.
</Paragraph>

<Paragraph>
    Introduced a new <Code>ApplySorting</Code> method that allows you to programatically define the columns that you'd like the grid to be sorted on.
</Paragraph>

<Paragraph>
    Please visit, <Anchor To="docs/extensions/datagrid/features/sorting">datagrid sorting docs</Anchor> for more information.
</Paragraph>

<Paragraph>
    You are now able to use pre defined filtering on a per-column basis by specifying <Code>FilterMethod</Code> on <Code>DataGridColumn</Code>.
</Paragraph>

<Heading Size="HeadingSize.Is4">
    Expandable row groups
</Heading>

<Paragraph>
    Introduced <Code>ExpandGroups</Code> and <Code>CollapseGroups</Code> methods that allows you to programatically expand or collapse specific groups.
</Paragraph>

<Paragraph>
    These new methods provide you with more control over how the data is presented and viewed, allowing you to tailor the user experience to specific usage scenarios and user preferences.
</Paragraph>

<Heading Size="HeadingSize.Is4">
    Filtering
</Heading>

<Paragraph>
    Added a new <Code>ClearFilter</Code> overload. You are now able to clear the filter on specific columns.
</Paragraph>

<Heading Size="HeadingSize.Is4">
    HeaderGroupCaption
</Heading>

<Paragraph>
    We are excited to introduce the new <Strong>HeaderGroupCaption</Strong> feature for the DataGrid component. This feature allows you to group together multiple DataGrid column headers under a single, overarching caption.
</Paragraph>

<Paragraph>
    This is especially useful when you have related columns that need to be grouped under a common heading for better understanding and organization. For instance, if you have a DataGrid displaying product details, you can group columns like 'Price', 'Discount', and 'Total Cost' under a header group captioned 'Financial Details'.
</Paragraph>

<Paragraph>
    With this enhancement, you can now structure your data more effectively and provide more clarity to users. Grouping column headers using <Strong>HeaderGroupCaption</Strong> significantly improves the readability of complex grids and enhances user experience by enabling more intuitive navigation through the DataGrid.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Contributions
</Heading>

<Paragraph>
    DataGrid : ApplySorting was contributed by <Anchor To="https://github.com/danm-de">danm-de</Anchor>
</Paragraph>
<Paragraph>
    Introduced a new <Code>RowOverlayTemplate</Code> that allows you to render an overlay with adittional information on top of the row.
</Paragraph>

<Paragraph>
    Please visit, <Anchor To="docs/extensions/datagrid/templates/row-overlay">row overlay docs</Anchor> for more information.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    FieldLabel
</Heading>

<Paragraph>
    A new <Code>RequiredIndicator</Code> parameter was introduced. By enabling this parameter. The label will display a a required indicator by appending a relevant class which by default will render an asterix by the label with the theme's danger color. Which you can of course override the css class to your liking.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Dropdown
</Heading>

<Paragraph>
    We have added a new <Code>Checkbox</Code> parameter to the <Code>DropdownItem</Code> so you may now render dropdown items with checkboxes. You can also track the state of each one by binding to the new <Code>Checked</Code> and <Code>CheckedChanged</Code> parameters.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    DropdownList
</Heading>

<Paragraph>
    Introduced a new <Code>SelectionMode</Code> parameter, which allows the selection of a new Checkbox mode, that will set the <Code>DropdownList</Code> into a multiple selection mode. You can track the state of the selection by binding to the new <Code>SelectedValues</Code> and <Code>SelectedValuesChanged</Code> parameters.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    TreeView
</Heading>

<Paragraph>
    Introduced <Code>RemoveNode</Code> method that allows you to remove a node from the tree if it's found.
</Paragraph>

<Paragraph>
    You are now able to make node children collections observable (retrieved by <Code>GetChildNodes</Code> / <Code>GetChildNodesAsync</Code> ) and any changes to them should be reflected on the UI.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Autocomplete
</Heading>

<Paragraph>
    1. We have added a new <Code>FreeTypingNotFoundTemplate</Code> parameter so you may provide a custom template when the user types in a value that is not found in the data source and <Code>FreeTyping</Code> is enabled.
</Paragraph>

<Paragraph>
    This is useful when you want to provide a message for the user related to an item that's not in the data source. For example, presenting the following message for the Singapore text that's not in the data source: Add "Singapore"?
</Paragraph>

<Paragraph>
    2. We have added a new <Code>AutocompleteTagContext</Code> parameter so you may customize tags to your liking when using <Code>Autocomplete</Code> multiple selection mode.
</Paragraph>

<Paragraph>
    3. We've added EventCallbacks for the events that we currently listen to in the <Code>Autocomplete</Code>, these are called when the <Code>Autocomplete</Code> finishes handling the corresponding event.
    <UnorderedList>
        <UnorderedListItem><Code>SearchTextChanged</Code></UnorderedListItem>
        <UnorderedListItem><Code>SearchKeyDown</Code></UnorderedListItem>
        <UnorderedListItem><Code>SearchFocus</Code></UnorderedListItem>
        <UnorderedListItem><Code>SearchBlur</Code></UnorderedListItem>
    </UnorderedList>
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Signature Pad
</Heading>

<Paragraph>
    We are pleased to announce that Signature Pad now supports the capture and storage of digital signatures. This update will allow developers to create applications that require the collection of signatures from users, such as contracts, agreements, and other legal documents.
</Paragraph>

<Paragraph>
    The Signature Pad is a crucial component in Blazorise that enables users to sign and submit documents electronically. With this update, developers can now capture and store signatures in a secure and reliable manner, ensuring the authenticity and integrity of the documents.
</Paragraph>

<Paragraph>
    This update will make it easier for developers to create applications that require the collection of digital signatures, saving time and effort for both the users and the developers. We hope this update will be beneficial to our users and help them create more efficient and effective applications.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Splitter
</Heading>

<Paragraph>
    We're thrilled to announce the introduction of a new <Strong>Splitter</Strong> component in the latest update of Blazorise. This interactive and flexible layout component provides a way to create resizable panels in your application.
</Paragraph>

<Paragraph>
    <UnorderedList>
        <UnorderedListItem>
            <Paragraph>
                <Strong>GutterSize</Strong>: Controls the width of the draggable area between sections, allowing users to adjust the relative sizes of the sections.
            </Paragraph>
        </UnorderedListItem>
        <UnorderedListItem>
            <Paragraph>
                <Strong>MinSize</Strong>: Specifies the minimum size to which a section can be resized, ensuring the usability and readability of content in each section.
            </Paragraph>
        </UnorderedListItem>
        <UnorderedListItem>
            <Paragraph>
                <Strong>MaxSize</Strong>: Specifies the maximum size to which a section can be resized, ensuring the usability and readability of content in each section.
            </Paragraph>
        </UnorderedListItem>
        <UnorderedListItem>
            <Paragraph>
                and more
            </Paragraph>
        </UnorderedListItem>
    </UnorderedList>
</Paragraph>

<Paragraph>
    We would like to express our sincere thanks to <Anchor To="https://github.com/smfields">smfields</Anchor>, a dedicated member of our community, who initially developed this feature. <Anchor To="https://github.com/smfields">smfields</Anchor> generously granted us the rights to include it in Blazorise, enabling all users of our library to benefit from this versatile component.
</Paragraph>

<Paragraph>
    We look forward to seeing the creative ways in which you'll incorporate this new feature into your projects!
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Video
</Heading>

<Paragraph>
    In this release, we've added a significant enhancement to the <Anchor To="docs/extensions/video">Blazorise Video player</Anchor>. Users now have the ability to define multiple sources for a single video, each with different qualities. This includes options for 576p, 720p, and 1080p. The chosen video file, hosted at a unique URL for each quality, will load based on the user's preference or network conditions. By default, the player is set to display the video in 720p. This new feature offers users a more tailored and efficient video viewing experience by adapting to their specific needs and conditions.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Dropdown
</Heading>

<Paragraph>
    We've migrated the underlying library that takes care of dynamically "anchor position" the dropdown menu according to the UI constraints. It has been migrated from <Anchor To="https://popper.js.org/">Popper</Anchor> to the newer <Anchor To="https://floating-ui.com/">Floating UI</Anchor> library.
    Behaviour should remain unchanged and your dropdown menus should still be cleverly positioned!
</Paragraph>

<Paragraph>
    Added a new <Code>PositionStrategy</Code> parameter, that allows you to set the positioning strategy for your dropdown. Please read <Anchor To="https://floating-ui.com/docs/computeposition#strategy">Floating UI Strategy</Anchor> for more details on how it can affect the positioning of your dropdown.
</Paragraph>

<Paragraph>
    Fixed an issue where in some certain cases, if buttons existed inside the Dropdown the menu positioning would not be handled correctly.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Validation
</Heading>

<Paragraph>
    We've added support for <Strong>IValidatableObject</Strong>. This new feature enhances the flexibility and robustness of your form validation processes. By implementing the <Strong>IValidatableObject</Strong> interface in your models, you can now provide custom validation logic that is more complex and situation-specific than what can be achieved with simple data annotation validation. This interface includes the <Strong>Validate</Strong> method, which you can override to define your custom validation rules. This method is automatically invoked when performing model validation, ensuring that your custom rules are adhered to. This feature is useful when the validity of a property's value is dependent on another property's value, or when an intricate validation process is required.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Offcanvas
</Heading>

<Paragraph>
    The Offcanvas component offers the flexibility to appear from the top, bottom, left, or right of your screen, making it highly adaptable to a variety of design contexts. This makes it a perfect fit for both desktop and mobile layouts, allowing you to create responsive designs with ease.
</Paragraph>

<Paragraph>
    The Offcanvas component consists of three main elements: Offcanvas, OffcanvasHeader, and OffcanvasBody. The Offcanvas element is the main container, the OffcanvasHeader is designed to hold the title or heading, and the OffcanvasBody is where you put the main content or items for your offcanvas. This structured approach ensures a clear and intuitive setup process for developers.
</Paragraph>

<Paragraph>
    We believe the Offcanvas component will offer our developers a new level of versatility when crafting unique user interfaces, making it easier to manage additional content or navigation in a user-friendly and accessible way.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Utilities
</Heading>

<Heading Size="HeadingSize.Is4">
    CSS Grid
</Heading>

<Paragraph>
    The grid is a two-dimensional layout model, comprised of 12 columns and up to 6 rows, providing a robust structure for building complex layouts. This structure allows developers to craft visually appealing and responsive designs that will adapt seamlessly across various devices and screen sizes.
</Paragraph>

<Paragraph>
    One of the standout features is its built-in responsiveness with mobile breakpoints. This ensures that the layout will automatically adjust to provide an optimal viewing experience on different devices, from large desktop monitors down to mobile phones. The alignment and positioning within the grid have been carefully designed to offer a straightforward yet powerful way to arrange your components.
</Paragraph>

<Paragraph>
    We believe this new grid system will offer our developers more control and creativity in crafting layouts, making it easier to produce stunning, responsive designs. We encourage you to explore this new feature and as always, your feedback is most welcome.
</Paragraph>

<Heading Size="HeadingSize.Is3">  
    Charts Annotations
</Heading>

<Paragraph>
    This innovative extension is based on the powerful <Anchor To="https://www.chartjs.org/chartjs-plugin-annotation/latest/" Title="Link to chart Chart Annotation plugin" Target="Target.Blank">chartjs-plugin-annotation</Anchor> and offers a new level of flexibility and functionality for your chart visualizations.
</Paragraph>

<Paragraph>
    The <Strong>Charts.Annotation</Strong> extension lets you draw lines, boxes, points, labels, polygons, and ellipses directly on the chart area, adding context and enhancing data visualization. This feature is versatile and can be used in conjunction with line, bar, scatter, and bubble charts, providing meaningful insights for your data sets.
</Paragraph>

<Paragraph>
    Whether you're using linear, logarithmic, time, or category scales, you'll find the annotations provide a new dimension to your charts. However, please note that annotations will not work on charts that do not have two or more axes, including pie, radar, and polar area charts.
</Paragraph>

<Paragraph>
    This new extension is a significant step towards making Blazorise's charting features more comprehensive and versatile. We encourage you to experiment with these new capabilities to see how they can add depth to your data visualizations. As always, we look forward to hearing your feedback!
</Paragraph>

<NewsPagePostInto UserName="Mladen Macanović" ImageName="mladen" PostedOn="June 1st, 2023" Read="7 min" />