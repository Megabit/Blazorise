@page "/news/release-notes/150"

<Seo Canonical="news/release-notes/150" Title="Blazorise v1.5" Description="This blog post contains the changelog of the most recent bug fixes, improvements and new features included in the Blazorise v1.5 release." ImageUrl="img/news/150/v150.png" />

<NewsPageImage Source="img/news/150/v150.png" Text="Blazorise v1.5" />

<NewsPageTitle>
    Announcing Blazorise 1.5 -
</NewsPageTitle>

<Paragraph>
    We're excited to unveil the latest iteration of Blazorise, version 1.5, packed with new features, improvements, and upgrades to enhance your development experience. Let's dive into the highlights and guide you through upgrading your existing projects.
</Paragraph>

<NewsPageSubtitle>
    Key Blazorise 1.5 Highlights 💡
</NewsPageSubtitle>

<Paragraph>
    Here's a summary of what’s new in this release:
</Paragraph>

<UnorderedList>
    <UnorderedListItem>
        <Paragraph>
            <Strong>Fluent UI 2</Strong>: Adoption of CSS provider based on the Microsoft Fluent 2 design system.
        </Paragraph>
    </UnorderedListItem>
    <UnorderedListItem>
        <Paragraph>
            <Strong>Toast Component</Strong>: New component for displaying push notifications with ease.
        </Paragraph>
    </UnorderedListItem>
    <UnorderedListItem>
        <Paragraph>
            <Strong>Progress Bar</Strong>: Introduction of an indeterminate state for more dynamic UI feedback.
        </Paragraph>
    </UnorderedListItem>
    <UnorderedListItem>
        <Paragraph>
            <Strong>Accordion Components</Strong>: Dedicated components for a more flexible and efficient accordion implementation.
        </Paragraph>
    </UnorderedListItem>
    <UnorderedListItem>
        <Paragraph>
            <Strong>Font Awesome Update</Strong>: Enhanced iconography with Font Awesome v6.x integration.
        </Paragraph>
    </UnorderedListItem>
    <UnorderedListItem>
        <Paragraph>
            <Strong>Extended Breakpoints</Strong>: Introduction of XXL (QuadHD) size for superior control on larger screens.
        </Paragraph>
    </UnorderedListItem>
    <UnorderedListItem>
        <Paragraph>
            <Strong>AntDesign Update</Strong>: Transition to the latest 4.x version of AntDesign, enhancing UI capabilities.
        </Paragraph>
    </UnorderedListItem>
</UnorderedList>

<NewsPageSubtitle>
    Upgrading from 1.4.x to 1.5 👨‍🔧
</NewsPageSubtitle>

<Paragraph>
    Upgrade your Blazorise application seamlessly with the following steps:
</Paragraph>

<OrderedList>
    <OrderedListItem>
        <Paragraph>
            Update all <Strong>Blazorise.*</Strong> package references to <Strong>1.5</Strong>.
        </Paragraph>
    </OrderedListItem>
    <OrderedListItem>
        <Paragraph>
            Enjoy the latest features without any breaking changes to the API.
        </Paragraph>
    </OrderedListItem>
</OrderedList>

<NewsPageSubtitle>
    New Features & Enhancements 🚀
</NewsPageSubtitle>

<Heading Size="HeadingSize.Is3">
    Fluent UI 2
</Heading>

<Paragraph>
    The introduction of the new Blazorise Fluent provider stands as the centerpiece of this release, marking a significant milestone in our ongoing development efforts. It required three months of focused work to complete this feature, and we are now able to offer it to our users. This provider is based on the Microsoft Fluent 2 design system, and we have invested considerable effort to integrate it across all Blazorise components, ensuring a consistent and modern user interface experience.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Toast component
</Heading>

<Paragraph>
    We have introduced a new Toast component. Toasts are brief alerts made to resemble push notifications, which are more common on desktop and mobile devices. Since they are flexbox-built, they are simple to align and reposition.
</Paragraph>

<Paragraph>
    Please find an example of how to use this component in the <Anchor To="docs/components/toast" Title="Link to Toast page">Toast</Anchor> page.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Progress Bar: Indeterminate State
</Heading>

<Paragraph>
    The Progress Bar now features an indeterminate state, designed to indicate ongoing processes whose duration cannot be predicted. This enhancement improves the user interface by providing a visual indicator for operations that are in progress, enhancing the overall user experience.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Accordion dedicated components
</Heading>

<Paragraph>
    The Accordion functionality has been enhanced with the introduction of dedicated components. This change aims to improve the performance and flexibility of accordions within applications. It addresses previous limitations by replacing the use of the Collapse component, facilitating a more efficient and straightforward implementation.
</Paragraph>

<Paragraph>
    The Collapse will still continue to work, but in the future you should expect it to be completelly removed from the Accordion.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    AntDesign upgrade to latest 4.24 version
</Heading>

<Paragraph>
    In this update, the AntDesign provider has been upgraded. Before this, we utilized the earlier 4.0 version of AntDesign, which was not fully leveraging the capabilities of this advanced framework. While our goal is to transition to the newer AntDesign 5.1 version in a future Blazorise release, the current upgrade resolves numerous challenges encountered during the development of Blazorise 1.5.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Icon Updates and Additions
</Heading>

<Paragraph>
    We're excited to announce the introduction of the <Strong>Blazorise.Icons.Fluent</Strong> package, featuring a new collection of icons derived from the Microsoft Fluent Icons library. This addition enriches the variety of icons available for your projects.
</Paragraph>

<Paragraph>
    Furthermore, we've integrated the most recent icons from the Font Awesome v6 branch, significantly expanding the selection of icon names at your disposal.
</Paragraph>

<Paragraph>
    With this update, we've also adjusted how Font Awesome icons are utilized. The <Strong>Blazorise.Icons.FontAwesome</Strong> package now encompasses all icons from both the <Strong>v5.x</Strong>, and <Strong>v6.x</Strong> branches of Font Awesome. This modification was necessary due to the lack of a Content Delivery Network (CDN) for the <Strong>v6.x</Strong> icons. By incorporating these icons directly into Blazorise, we offer a direct path to leverage them in your projects. Should you prefer using your own CDN, that option remains available as an alternative.
</Paragraph>

<Paragraph>
    It's important to note that following the integration of <Strong>FontAWesome v6.x</Strong>, certain icons from the <Strong>v5.x</Strong> collection may not function as expected. We recommend updating your CSS link to the latest <Strong>v6.x</Strong> version to ensure optimal compatibility and performance.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Enhancements to DataGrid
</Heading>

<Heading Size="HeadingSize.Is4">
    1. State Management
</Heading>

<Paragraph>
    A new feature has been added for the efficient management of DataGrid states, allowing the saving and loading of DataGrid states as needed through a centralized API. Utilize the newly introduced <Code>LoadState</Code> and <code>GetState</code> methods for managing the DataGrid's state efficiently.
</Paragraph>

<Paragraph>
    For practical applications of this feature, refer to the <Anchor To="docs/extensions/datagrid/features/state-management" Title="Link to DataGrid State Management">DataGrid State Management</Anchor> page.
</Paragraph>

<Heading Size="HeadingSize.Is4">
    2. PreventRowClick
</Heading>

<Paragraph>
    We've implemented enhancements to <Strong>TableRowCell</Strong>, introducing the ability to halt default actions and stop propagation of events upon cell clicks, through <Strong>ClickPreventDefault</Strong> and <Strong>ClickStopPropagation</Strong> functionalities. This update also addresses and resolves previous issues with the DataGrid's <Strong>PreventRowClick</Strong> feature not functioning as intended.
</Paragraph>

<Heading Size="HeadingSize.Is4">
    3. Column Chooser
</Heading>

<Paragraph>
    The introduction of the Column Chooser feature, activated by setting <Strong>ColumnChooser</Strong> to true, empowers users to dynamically show or hide columns within the DataGrid, enhancing the customization and flexibility of data presentation.
</Paragraph>

<Heading Size="HeadingSize.Is4">
    4. Aggregate Template for DataGrid Columns
</Heading>

<Paragraph>
    The addition of the <Strong>AggregateTemplate</Strong> parameter to DataGridColumn represents a significant enhancement, addressing previous limitations by enabling the assignment of aggregate templates to both DataGridColumn and DataGridMultiSelectColumn, thus expanding the framework's data aggregation capabilities.
    
    Introduced an <Code>AggregateTemplate</Code> Parameter to the <Code>DataGridColumn</Code>.
    This new Parameter fixes a gap in functionality where it was not possible to set an aggregate template for the <Code>DataGridColumn</Code> and <Code>DataGridMultiSelectColumn</Code>
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Show Tooltips on Rating
</Heading>

<Paragraph>
    Now it is possible to show an extra information on the <Code>Rating</Code> component. By defining the <Code>GetTooltip</Code> callback you can show the tooltip to indicate what is the rating value that it represents.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    DropdownList
</Heading>

<Paragraph>
    Added a new Parameter <Code>DisabledItem</Code>. By defining this, you can set the disabled items from the supplied data source.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Autocomplete
</Heading>

<Paragraph>
    We've reworked the <Code>Autocomplete</Code> <Code>SelectionMode.Checkbox</Code> so it more closely follows the standard look of the checkboxes across the application.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Responsive font sizes
</Heading>

<Paragraph>
    Adjusting font sizes for multiple screen sizes can be challenging. That's why we have made it possible to define different sizes for different screen sizes. This is made possible with out flexible "fluent-based" utilities.
</Paragraph>

<Paragraph>
    Defining the font size follows the same pattern as all out fluent-based utilties, eg. <Code>TextSize="TextSize.IsLarge.OnMobile.IsSmall.OnDesktop"</Code>.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Validation API
</Heading>

<Paragraph>
    To make it easier to customize Blazorise behavior, we have exposed some internal <Code>Validation</Code>, and <Code>Validations</Code> component APIs and made them public. This will enable more customization to your forms and make it possible to implement new validation methods.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    New Breakpoints
</Heading>

<Paragraph>
    We have introduced new XXL Breakpoints(QuadHD alias) that is supposed to be used on extra large screens, like 2K and above. This will enable more fine control over what can be visible on screen for thos large screens.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Bar
</Heading>

<Paragraph>
    Introduced a new <Code>BarMenuToggleBehavior</Code>.
    By default, it is set to <Code>BarMenuToggleBehavior.AllowMultipleMenus</Code> which will keep all the menus you toggle open.
    You can also set it to <Code>BarMenuToggleBehavior.AllowSingleMenu</Code> to only keep a menu open at a time.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    RichTextEdit
</Heading>

<Paragraph>
    As with many other features in this release we have updated internals of RichTextEdit to work with the latest version of <Anchor To="https://github.com/quilljs/quill" Title="Link to Quill JS">Quill JS</Anchor> library. This update means there will be less security risks that were reported by using an older version.
</Paragraph>

<Paragraph>
    We also made dynamic loading of RichTextEdit JS obsolete, and made it work similar to all other Blazorise components. JavaScript is now loaded as a JS module.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    TreeView context menu
</Heading>

<Paragraph>
    It is now possible to detect when the user right click on a TreeView node. By using the <Code>NodeContextMenu</Code> event callback you can detect the clicked Node and mouse coordinates tos how your custom context menu.
</Paragraph>

<NewsPagePostInfo UserName="Mladen Macanović" ImageName="mladen" PostedOn="February 29th, 2024" Read="9 min" />