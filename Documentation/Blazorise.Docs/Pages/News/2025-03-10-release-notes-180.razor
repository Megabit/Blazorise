@page "/news/release-notes/180"

<Seo Canonical="news/release-notes/180" Title="Blazorise v1.8" Description="Welcome to the Blazorise 1.8 release, packed with exciting new features, optimizations, and support for the latest .NET framework." ImageUrl="img/news/180/v180.png" />

<NewsPageImage Source="img/news/180/v180.png" Text="Blazorise v1.8" />

<NewsPageTitle>
    Announcing Blazorise 1.8 -
</NewsPageTitle>

<Paragraph>
    Welcome to the Blazorise 1.8 release, ...
</Paragraph>

<NewsPageSubtitle>
    Key Blazorise 1.8 Highlights 💡
</NewsPageSubtitle>

<Paragraph>
    Here's a summary of what's new in this release:
</Paragraph>

<UnorderedList>
    <UnorderedListItem>
        <Paragraph>
            <Strong>Chart Plugins</Strong>: Optimized Lifecycle
        </Paragraph>
    </UnorderedListItem>
    <UnorderedListItem>
        <Paragraph>
            <Strong>MessageService</Strong>: New Choices Method
        </Paragraph>
    </UnorderedListItem>
</UnorderedList>

<Paragraph>
    Dive into each section for a comprehensive overview of these features and learn how they can enhance your projects. We value your feedback and encourage you to share your thoughts as we continue to refine and improve Blazorise.
</Paragraph>

<NewsPageSubtitle>
    Upgrading from 1.7.x to 1.8 👨‍🔧
</NewsPageSubtitle>

<Paragraph>
    Upgrade your Blazorise application seamlessly with the following steps:
</Paragraph>

<OrderedList>
    <OrderedListItem>
        <Paragraph>
            Update all <Strong>Blazorise.*</Strong> package references to <Strong>1.8</Strong>.
        </Paragraph>
    </OrderedListItem>
    <OrderedListItem>
        <Paragraph>
            Blazorise should now work without any major breaking change to the API, but there are some necessary changes that we had to do to make Blazorise better. Continue reading the Migration section for more details.
        </Paragraph>
    </OrderedListItem>
</OrderedList>

<NewsPageSubtitle>
    New Features & Enhancements 🚀
</NewsPageSubtitle>

<Heading Size="HeadingSize.Is3">
    Localization Support for RouterTabs
</Heading>

<Paragraph>
    <Code>RouterTabs</Code> now supports localization, allowing dynamic tab titles based on the current culture. Titles can be set via resource files or other localization strategies, ensuring consistency with the app’s language settings.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Cropper Component Enhancements
</Heading>

<Paragraph>
    The <Code>Cropper</Code> component has been enhanced with the <Code>ImageLoadingFailed</Code> event, which triggers when an image fails to load. This event provides a way to handle errors and display a custom message or image in place of the failed image.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Custom Time Increments on TimePicker
</Heading>

<Paragraph>
    The <Code>TimePicker</Code> component now supports <Code>HourIncrement</Code> and <Code>MinuteIncrement</Code> parameters. These allow you to customize the step intervals shown in the time selection dropdown.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    PdfViewer Component Enhancements
</Heading>

<Paragraph>
    From our community member <Anchor To="https://github.com/11bthornton" Title="Link to 11bthornton">11bthornton</Anchor>, we have received a contribution that enhances the <Code>PdfViewer</Code> component. The component now supports the <Code>PrintRequested</Code> event callback, which triggers when the user requests to print the PDF document. It is a small but significant improvement that enhances the user experience.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Download Support for PdfViewer
</Heading>

<Paragraph>
    <Code>PdfViewer</Code> now includes built-in support for downloading the displayed PDF document. When enabled, a download button appears in the viewer toolbar, allowing users to save the PDF to their device. It supports both direct file URLs and base64-encoded data sources.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Localization Support for PdfViewer Toolbar
</Heading>

<Paragraph>
    The <Code>PdfViewer</Code> component now supports localization for its toolbar UI. All interactive elements are now localized.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    DataGrid: Programmatic Addition of Items to Batch Edit Collection
</Heading>

<Paragraph>
    Introduced the <Code>Task New( TItem newItem )</Code> overload method in DataGrid, enabling the programmatic addition of new items to the batch edit collection when batch editing is enabled. This method ensures that newly added items are tracked as unsaved changes, allowing them to be persisted upon saving or discarded upon cancellation.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    DataGrid: Added support for default item in filter for DataGridSelectColumn
</Heading>

<Paragraph>
    New parameters <Code>FilterDefaultItemText</Code>, <Code>FilterDefaultItemValue</Code>, <Code>FilterDefaultItemDisabled</Code>, and <Code>FilterDefaultItemHidden</Code> allow customizing the default item shown in filter dropdowns of <Code>DataGridSelectColumn</Code>. This gives developers more control over how filter options are presented and improves the user experience when working with dropdown filters.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Show Week Numbers On DatePicker
</Heading>

<Paragraph>
    The <Code>DatePicker</Code> component now includes a <Code>ShowWeekNumbers</Code> parameter. When enabled, the calendar displays ISO week numbers alongside each row. This can be helpful for planning or referencing by week.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Show "Today" Button on DatePicker
</Heading>

<Paragraph>
    The <Code>DatePicker</Code> component now includes a <Code>ShowTodayButton</Code> parameter. When enabled, a "Today" button appears at the bottom of the calendar, allowing users to quickly jump to the current date.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Optimized Chart Plugins
</Heading>

<Paragraph>
    This release introduces a major optimization to the Chart plugin system by centralizing shared logic and lifecycle handling within the ChartPlugin base class. By moving common properties, initialization, and disposal routines into a unified location, the update significantly reduces duplicated code across individual plugins and simplifies their overall structure. This change also enhances how plugins are connected to BaseChart, resulting in cleaner integration and more reliable async event handling between charts and their plugins.
</Paragraph>

<Paragraph>
    The refactoring addresses longstanding pain points related to plugin lifecycle management and ensures that disposal and initialization are consistently handled. This unified approach not only improves maintainability but also helps prevent potential bugs across all plugins. As part of this effort, it was also noted that some plugins, such as the Streaming plugin, may require implementations of methods like OnParametersSetAsync to ensure all configuration parameters are properly updated during the component lifecycle.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Autocomplete: Disabled Items
</Heading>

<Paragraph>
    The <Code>Autocomplete</Code> component now supports disabling specific items in the suggestion list. You can provide a function to determine which items should be inactive, preventing users from selecting them. This is helpful in cases where some options shouldn't be available for interaction.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Export Semantic HTML for RichTextEdit
</Heading>

<Paragraph>
    The <Code>RichTextEdit</Code> component now includes an <Code>GetHtmlAsync</Code> overload that allows you to export the current content as semantic HTML. This is particularly useful for applications that require clean and structured HTML output, such as when saving or sharing content.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Multiple Highlights Support for Highlighter
</Heading>

<Paragraph>
    The <code>Highlighter</code> component now supports highlighting multiple phrases within the same text using the new <code>HighlightedTexts</code> parameter. This enhancement allows developers to pass a list of strings to be highlighted simultaneously, replacing the previous limitation of only a single <code>HighlightedText</code>. The update enables more dynamic and flexible highlighting scenarios, such as multi-word search, filtering, and complex keyword matching — all with minimal changes to existing implementations.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Choices on MessageService
</Heading>

<Paragraph>
    The <Code>MessageService</Code> now supports the <Code>Choices</Code> method, allowing you to display a list of options in a message dialog. This feature is useful for scenarios where you want to present users with multiple choices and handle their selection accordingly.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Culture-specific overloads for text localization
</Heading>

<Paragraph>
    The <Code>ITextLocalizer</Code> interface now includes overloads for the <Code>GetString</Code> method that accept a <Code>CultureInfo</Code> parameter. The <Code>CultureInfo</Code> parameter can be used to specify the desired culture for localization, enabling you to retrieve strings that are tailored to the user's language and region. This is particularly useful in scenarios where you need to support multiple languages or regions within your application.
</Paragraph>

<NewsPagePostInfo UserName="Mladen Macanović" ImageName="mladen" PostedOn="March 10th, 2025" Read="7 min" />