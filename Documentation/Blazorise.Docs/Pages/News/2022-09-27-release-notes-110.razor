@page "/news/release-notes/110"

<Seo Canonical="news/release-notes/110" Title="Blazorise v1.1" Description="This blog post contains the changelog of the most recent bug fixes, improvements and new features included in the Blazorise v1.1 release." ImageUrl="img/news/110/v110.png" />

<NewsPageImage Source="img/news/110/v110.png" Text="Blazorise v1.1" />

<NewsPageTitle>
    Announcing Blazorise 1.1
</NewsPageTitle>

<Paragraph>
    After 6 months of development, Blazorise is out and it comes packed with features and quality of life improvements!
</Paragraph>

<Paragraph>
    Internal changes are hard to showcase, but if you are curious to learn a bit more, we have documented all changes in <Anchor To="https://github.com/Megabit/Blazorise/issues/3575">1.1 ticket on GitHub</Anchor>. Also, don't forget to look at <Anchor To="https://github.com/Megabit/Blazorise/issues/3540">1.0.x fixes</Anchor>, which are also included in this release.
</Paragraph>

<Paragraph>
    <Strong>
        Blazorise 1.1 is compatible with Blazorise 1.0.x projects and is a recommended upgrade for all 1.0.x users.
    </Strong>
</Paragraph>

<Paragraph>
    There are no breaking changes in this release, but we will slowly start with some API changes by making existing APIs obsolete and introducing new as a replacements. Once we reach stable <Strong>v2.0</Strong> the APIs marked with obsolete will eventually be removed.
</Paragraph>

<NewsPageSubtitle>
    Blazorise 1.1 Highlights 💡
</NewsPageSubtitle>

<UnorderedList>
    <UnorderedListItem>
        New <Strong>FocusTrap</Strong> component.
    </UnorderedListItem>
    <UnorderedListItem>
        New <Strong>Highlighter</Strong> component.
    </UnorderedListItem>
    <UnorderedListItem>
        New <Strong>FluentValidation</Strong> component.
    </UnorderedListItem>
    <UnorderedListItem>
        New <Strong>FilePicker</Strong> component.
    </UnorderedListItem>
    <UnorderedListItem>
        New <Strong>ModalProvider</Strong> component.
    </UnorderedListItem>
    <UnorderedListItem>
        New <Strong>FilePicker</Strong> component.
    </UnorderedListItem>
    <UnorderedListItem>
        New <Strong>LoadingIndicator</Strong> component.
    </UnorderedListItem>
    <UnorderedListItem>
        <Strong>FileEdit</Strong> performance improvements to <Code>WriteToStreamAsync</Code> and <Code>OpenReadStreamAsync</Code> APIs.
    </UnorderedListItem>
    <UnorderedListItem>
        DataGrid improvements.
    </UnorderedListItem>
</UnorderedList>

<NewsPageSubtitle>
    Upgrade an existing project
</NewsPageSubtitle>

<Paragraph>
    To upgrade an existing Blazorise app from <Strong>1.0.x</Strong> to <Strong>1.1</Strong>:
</Paragraph>

<UnorderedList>
    <UnorderedListItem>
        Update all <Strong>Blazorise.*</Strong> package references to <Strong>1.1</Strong>.
    </UnorderedListItem>
</UnorderedList>

<NewsPageSubtitle>
    Migration
</NewsPageSubtitle>

<Heading Size="HeadingSize.Is3">
    1. Tuple Values
</Heading>

<Paragraph>
    Due to a <Anchor To="https://github.com/dotnet/razor-compiler/issues/332"> bug in Visual Studio razor tooling</Anchor> you might experience problems if you try to define tuple values as a component parameter. In Blazorise case, this problem might manifest itself on the <Anchor To="docs/components/grid">Row component</Anchor>. For example if you have <Code Tag>Row Gutter="(32, 16)"</Code> you will get build errors. To workaround it we have introduced new parameters, named <Code>HorizontalGutter</Code>, and <Code>VerticalGutter</Code>.
</Paragraph>

<Paragraph>
    To use them you will just need to define it as <Code Tag>Row HorizontalGutter="32" VerticalGutter="16"</Code>.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    2. Recommended Renames
</Heading>

<OrderedList>
    <UnorderedListItem>
        Change all usages of <Code>MessageAlert</Code> into <Code>MessageProvider</Code>.
    </UnorderedListItem>
    <UnorderedListItem>
        Change all usages of <Code>NotificationAlert</Code> into <Code>NotificationProvider</Code>.
    </UnorderedListItem>
    <UnorderedListItem>
        Change all usages of <Code>PageProgressAlert</Code> into <Code>PageProgressProvider</Code>.
    </UnorderedListItem>
</OrderedList>

<Heading Size="HeadingSize.Is3">
    3. Recommended Removals
</Heading>

<Paragraph>
    The explicit usage of Markdown extension CSS and JS files are not needed and they can be safely removed:
</Paragraph>

<UnorderedList>
    <UnorderedListItem>
        <Code>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/easymde/dist/easymde.min.css&quot;&gt;</Code>
    </UnorderedListItem>
    <UnorderedListItem>
        <Code>&lt;script src=&quot;https://unpkg.com/easymde/dist/easymde.min.js&quot;&gt;&lt;/script&gt;</Code>
    </UnorderedListItem>
    <UnorderedListItem>
        <Code>&lt;script src=&quot;https://cdn.jsdelivr.net/highlight.js/latest/highlight.min.js&quot;&gt;&lt;/script&gt;</Code>
    </UnorderedListItem>
</UnorderedList>

<NewsPageSubtitle>
    Features 🚀
</NewsPageSubtitle>

<Paragraph>
    Many new features have been added in Blazorise 1.1, both small and large. The following is a list of a few of the larger features that we are excited about in no particular order. For a complete list of all changes you can check out our <Anchor To="https://github.com/Megabit/Blazorise/issues/3575">curated changelog</Anchor>, as well as the <Anchor To="https://github.com/Megabit/Blazorise/issues/3540">1.0.x fixes</Anchor>, which are also included in this release.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    FocusTrap component
</Heading>

<Paragraph>
    As a continuous work to improve <Anchor To="https://www.aoda.ca/web-accessibility-guidelines-for-compatibility-with-assistive-technology/">AODA compatibility</Anchor> we have created a new FocusTrap component. FocusTrap is a component that manages focus for its descendants. This is useful when implementing overlays such as modal dialogs, which should not allow the input focus to escape while open.
</Paragraph>

<Paragraph>
    The new component is already part of the <Code>Modal</Code> which can be controlled by setting the <Code>FocusTrap</Code> parameter. If you wish to use new component on its own then you can look at the example on the <Anchor To="docs/components/focus-trap">FocusTrap page</Anchor>.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Highlighter component
</Heading>

<Paragraph>
    This is a relatively small component, but it can be beneficial when designing the UI for your application. For example, it helps you visually distinguish parts of the text by highlighting them based on the search term.
</Paragraph>

<Paragraph>
    If you wish to use new component look at few of the examples we have created on the <Anchor To="docs/components/highlighter">Highlighter page</Anchor>.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    FluentValidation component
</Heading>

<Paragraph>
    One of the most requested features we get from our community is a way to validate forms by using the <Anchor To="https://github.com/FluentValidation/FluentValidation" Title="Link to FluentValidation">FluentValidation</Anchor> library. In this Blazorise release, we are finally bringing it.
</Paragraph>

<Paragraph>
    The new <Strong>FluentValidation</Strong> component is created with the help of <Anchor To="https://github.com/aladotnet" Title="Link to GitHub user">aladotnet</Anchor>, a community member that has implemented the feature on his GitHub repository and was willing to give it away as part of the Blazorise core repository. Fortunately, he did all the hard work. As a result, we have only made minor optimizations to the API and added examples to the documentation.
</Paragraph>

<Paragraph>
    Big thanks to <Anchor To="https://github.com/aladotnet" Title="Link to GitHub user">aladotnet</Anchor> for his help in making it happen.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    DataGrid
</Heading>

<Paragraph>
    Added <Code>ShowDefaultSortIcon</Code> parameter to <Code>DataGrid</Code>. By enabling this parameter, a default sort icon will now display.
</Paragraph>

<Paragraph>
    Introduced <Code>PagerOptions</Code> with the following options:
    <UnorderedList>
        <UnorderedListItem><Strong>Size</Strong> : Configures the pager buttons size.</UnorderedListItem>
        <UnorderedListItem><Strong>ButtonRowPosition</Strong> : Configures the button row position.</UnorderedListItem>
        <UnorderedListItem><Strong>PaginationPosition</Strong> : Configures the pagination position.</UnorderedListItem>
        <UnorderedListItem><Strong>TotalItemsPosition</Strong> : Configures the total items position.</UnorderedListItem>
    </UnorderedList>
</Paragraph>

<Paragraph>
    Added <Code>ScrollRowOnEdit</Code> parameter to <Code>DataGrid</Code> <Code>VirtualizeOptions</Code>. When <Code>Virtualize</Code> is set, you may now disable the behaviour of scrolling the row to the top on edit when on <Code>DataGridEditMode.Inline</Code> or <Code>DataGridEditMode.Form</Code> by setting this new option to false.
</Paragraph>

<Paragraph>
    Added <Code>SelectedRowIndex</Code> getter to <Code>DataGrid</Code>. This is an helper so you can quickly find the Zero-based index of your <Code>SelectedRow</Code>. It can be an useful API in conjuction with the <Code>ScrollToRow</Code> method, that takes in a Zero-based index of <Code>DataGrid</Code> row to scroll to.
</Paragraph>

<Paragraph>
    Added <Code>SortOrder</Code> parameter to <Code>DataGrid</Code> so when the <Code>DataGrid</Code> sorting mechanism is set to multiple, you are able to configure the order of which the sorting of the columns takes place, this is specially useful, if you want to start the <Code>DataGrid</Code> sorted a certain way.
    Please do take note, that for the parameter to listen to changes and be able to dynamically be adjusted to the <Code>DataGrid</Code> changes, you should use <Code>bind-SortOrder</Code>.
    An example is when you have a Column A with a <Code>SortOrder</Code> of 2 And Column B with a <Code>SortOrder</Code> of 1, the moment the user removes the sorting out of Column B, the <Code>DataGrid</Code> will attempt to reset the <Code>SortOrder</Code> back to 0 as to accomodate the natural multiple sorting rules.
</Paragraph>

<Paragraph>
    Increased default <Code>PageSize</Code> parameter value from <Strong>5</Strong> to <Strong>10</Strong>.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    ModalProvider
</Heading>

<Paragraph>
    I believe this feature will be handy for a lot of people.
</Paragraph>

<Paragraph>
    The new ModalProvider is used to programmatically decide what custom content or component you want to instantiate inside your Modal, even with the support of parameters.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Autocomplete
</Heading>

<Paragraph>
    Introduced <Code>ReadData</Code> support enabling you to provide that to Autocomplete on demand according to the user's searched text.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    FileEdit
</Heading>

<Paragraph>
    We've noticed that <Code>WriteToStreamAsync</Code> would not update progress on the UI and also freeze when using this API on WebAssembly. This is currently inherit to Blazor WebAssembly as it is single threaded, we've improved on this so the UI should now be able to update while using this API.
</Paragraph>

<Paragraph>
    Added missing <Code>CancellationToken</Code> to <Code>OpenReadStreamAsync</Code>
</Paragraph>

<Paragraph>
    Both <Code>WriteToStreamAsync</Code> and <Code>OpenReadStreamAsync</Code> should now be more performant as we made changes to accomodate the following new features in .NET6
    <Blazorise.Link To="https://docs.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/call-dotnet-from-javascript?view=aspnetcore-6.0#byte-array-support">Byte Array Support</Blazorise.Link>
    <Blazorise.Link To="https://docs.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/call-dotnet-from-javascript?view=aspnetcore-6.0#stream-from-javascript-to-net">Stream from Javascript Support</Blazorise.Link>
    We now highly advise the usage of the <Code>OpenReadStreamAsync</Code> on Blazor WebAssembly as it is very performant.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    FilePicker
</Heading>

<Paragraph>
    The new <Code>FilePicker</Code> will give you an enhanced File Upload control, with more out of the box options then our <Code>FileEdit</Code> component.
    - Listing, detailing and controlling the look of the selected files.
    - Clear and upload buttons with built in progress bar
</Paragraph>

<Paragraph>
    Introduced <Code>SuggestSelectedItems</Code> support enabling the already selected options to show up on the suggested items.
</Paragraph>

<Paragraph>
    Introduced <Code>AutocompleteSelectionMode</Code>
    <UnorderedList>
        <UnorderedListItem><Strong>Default</Strong> : Default mode. Selection is single.</UnorderedListItem>
        <UnorderedListItem><Strong>Multiple</Strong> : Multiple mode. Selection is multiple.</UnorderedListItem>
        <UnorderedListItem><Strong>Checkbox</Strong> : Checkbox mode. Selection is multiple with checkbox selection support.</UnorderedListItem>
    </UnorderedList>

    You may still use the existing <Code>Multiple</Code> parameter to set the <Code>Autocomplete</Code> into Multiple selection mode, however take note that this Parameter has now been marked as <Code>Obsolete</Code> and will be removed in a future version. Please use the new <Code>SelectionMode</Code> Parameter.
</Paragraph>

<Paragraph>
    Introduced <Code>ConfirmKey</Code> parameter, you are now able to costumize the keyboard keys that should be considered as a Confirmation Key.
    Take note :
    If the value has a printed representation, this attribute's value is the same as the char attribute.
    Otherwise, it's one of the key value strings specified in 'Key values'.
</Paragraph>

<Paragraph>
    Introduced <Code>AutoPreSelect</Code>, this defaults to true, keeping the current behaviour. By setting it to false, the dropdown that shows the options, will no longer auto select the first item.
    This is specially useful for a use case reported by our users.
    When you have the <Code>AutoComplete</Code> set to <Code>Multiple</Code> + <Code>FreeTyping</Code>, and want to allow your user to just press the Confirm Key to accept the currently typed text.
</Paragraph>

<Paragraph>
    Improved keyboard support.
    You can now select items and remove selection using keyboard alone.
    Use navigation arrows to select an item in the dropdown.
    In multi-select mode use Backspace to remove most recently selected item or use [Shift-]Tab and Enter key to remove any previously selected item.
    Contributed by : <Anchor To="https://github.com/glutio" Target="Target.Blank">glutio</Anchor>, one of our community members.
</Paragraph>

<Paragraph>
    Introduced <Code>AutoSelectFirstItem</Code> parameter for single-select mode.
    Use this parameter to automatically select the first item from <Code>Data</Code> during <Code>Autocomplete</Code> initialization.
    Contributed by : <Anchor To="https://github.com/glutio" Target="Target.Blank">glutio</Anchor>, one of our community members.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    ListView
</Heading>

<Paragraph>
    Introduced <Code>ItemTemplate</Code> Parameter, you may now costumize the content that renders in each of the <Code>ListView</Code>'s items.
</Paragraph>

<Paragraph>
    Introduced a much needed missing <Code>ValueField</Code> Parameter, so you may uniquely identify each item in your list.
    This has been introduced with a return value of <Code>String</Code> for now. However we plan to make it return a generic type <Code>TValue</Code> in a future version, much like some of our other <Code>ValueField</Code> based components, so you can choose what type does your unique value return.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Loading Indicator
</Heading>

<Paragraph>
    This excellent component is done by <Anchor To="https://github.com/glutio" Target="Target.Blank">glutio</Anchor>, one of our community members. The amount of work that went into it is astounding. The purpose of this component is, as its names suggest, to indicate to the user that a long-running operation is happening. It supports many different working scenarios, like two-way binding, methods calls via reference, global control through the service, and many more.
</Paragraph>

<Paragraph>
    To see it in action with various examples just open the <Anchor To="docs/extensions/loadingindicator">Loading Indicator</Anchor> page.
</Paragraph>

<Heading Size="HeadingSize.Is3">
    Other improvements
</Heading>

<Paragraph>
    All our <Code>Clicked</Code> parameters on a <Code Tag>Button</Code>, <Code Tag>Link</Code>, <Code Tag>Tab</Code>, and other components, can now recieve a <Code>MouseEventArgs</Code> as an event parameter. This feature will allow you to determine how the clicked event was raised and what buttons and keys were pressed.
</Paragraph>

<NewsPageSubtitle>
    PRs
</NewsPageSubtitle>

<Heading Size="HeadingSize.Is3">
    Steps Navigation
</Heading>

<Paragraph>
    This feature was created by <Anchor To="https://github.com/Jimmys20">Jimmys20</Anchor>, one of our community members.
</Paragraph>

<Paragraph>
    Basic steps navigation has no constraints, so it is possible to jump to any steps by clicking on them. However, this is usually impossible in real-world scenarios as sometimes a user is required to enter valid data before proceeding to the next step.
</Paragraph>

<Paragraph>
    To control the navigation between the steps, it is now possible to use <Code>NavigationAllowed</Code> parameter, which acts as a function that has all the information you need to validate the page switch.
</Paragraph>

<Paragraph>
    The new feature can be seen on <Anchor To="docs/components/step">Step component</Anchor> page.
</Paragraph>

<NewsPagePostInto UserName="Mladen Macanović" ImageName="mladen" PostedOn="September 1st, 2022" Read="7 min" />