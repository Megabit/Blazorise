@page "/docs/extensions/loadingindicator"

<Seo Canonical="/docs/extensions/loadingindicator" Title="Blazorise LoadingIndicator component" Description="Learn how to use Blazorise LoadingIndicator extension component." />

<DocsPageTitle Path="Extensions/LoadingIndicator">
    Blazorise LoadingIndicator component
</DocsPageTitle>

<DocsPageLead>
    A wrapper component which adds busy / loading UI to child content. Default spinner courtesy of <Blazorise.Link To="https://icons8.com/preloaders/en/search/spinner#" Target="Target.Blank">icons8.com</Blazorise.Link>.
</DocsPageLead>

<DocsPageSubtitle>
    Installation
</DocsPageSubtitle>

<DocsPageSection>
    <DocsPageSectionHeader Title="NuGet">
        Install extension from NuGet.
    </DocsPageSectionHeader>
    <DocsPageSectionSource Code="LoadingIndicatorNugetInstallExample"></DocsPageSectionSource>
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Imports">
        In your main <Code>_Imports.razor</Code> add:
    </DocsPageSectionHeader>
    <DocsPageSectionSource Code="LoadingIndicatorImportsExample"></DocsPageSectionSource>
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Static files">
        Include CSS link into your <Code>index.html</Code> or <Code>_Layout.cshtml</Code> / <Code>_Host.cshtml</Code> file, depending if you’re using a Blazor WebAssembly or Blazor Server side project.
    </DocsPageSectionHeader>
    <DocsPageSectionSource Code="LoadingIndicatorResourcesExample" />
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Component DOM structure">
        This component adds a div for the indicator positioned in front (on top) of the child content. A spinner is positioned inside the indicator div.
    </DocsPageSectionHeader>
    <DocsPageSectionSource Code="LoadingIndicatorStructureExample" />
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Basic example">
        The basic usage scenario for <Code>LoadingIndicator</Code> with default settings.
    </DocsPageSectionHeader>
    <DocsPageSectionContent Outlined FullWidth>
        <LoadingIndicatorBasicExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="LoadingIndicatorBasicExample" />
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Application busy service">
        You can wrap the main layout of your application to create a global busy UI. Use the provided service class to control the wrapper from elsewhere in your code. The service class can also be used to control multiple <Code>LoadingIndicator</Code> instances.
    </DocsPageSectionHeader>
    <DocsPageSectionContent>
        Add <Code>LoadingIndicatorService</Code> as a scoped service.
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="LoadingIndicatorAddScopedExample" />
    <DocsPageSectionContent>
        Inject <Code>LoadingIndicatorService</Code> into main layout and set it on the global <Code>LoadingIndicator</Code> wrapper.
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="LoadingIndicatorApplicationWrapperExample" />
    <DocsPageSectionContent>
        Inject <Code>LoadingIndicatorService</Code> into your component where you want to trigger the application busy UI from.
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="LoadingIndicatorApplicationBusyExample" />
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Using as cascading parameter">
        You can also use the wrapper as a cascading parameter.
    </DocsPageSectionHeader>
    <DocsPageSectionContent>
        To implement a global application busy UI using cascading parameter add the wrapper to your main layout.
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="LoadingIndicatorCascadingWrapperExample" />
    <DocsPageSectionContent>
        Declare a <Code>CascadingParameter</Code> of type <Code>LoadingIndicator</Code> in your component.
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="LoadingIndicatorCascadingBusyExample" />
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Disabling input controls">
        While the busy screen prevents click events from reaching child content it has no effect on keyboard input. You may want to disable your input controls such as textboxes and buttons while your component is busy.
    </DocsPageSectionHeader>
    <DocsPageSectionContent>
        Using the <Code>Busy</Code> property directly.
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="LoadingIndicatorBusyReferenceExample" />
    <DocsPageSectionContent>
        Disabling your controls using <Code>LoadingIndicatorService</Code>.
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="LoadingIndicatorBusyServiceExample" />
</DocsPageSection>

<DocsPageSubtitle>
    Attributes
</DocsPageSubtitle>

<DocsAttributes>
    <DocsAttributesItem Name="Busy" Type="bool" Default="false">
        Current busy state.
    </DocsAttributesItem>
    <DocsAttributesItem Name="FullScreen" Type="bool" Default="false">
        Show indicator in full screen mode.
    </DocsAttributesItem>
    <DocsAttributesItem Name="IndicatorBackground" Type="Background" Default="rgba(255, 255, 255, 0.7)">
        Set overlay background color. Use alpha channel for opacity.
    </DocsAttributesItem>
    <DocsAttributesItem Name="IndicatorHorizontalPlacement" Type="LoadingIndicatorPlacement" Default="Middle">
        Indicator horizontal placement.
    </DocsAttributesItem>
    <DocsAttributesItem Name="IndicatorPadding" Type="FluentPadding" Default="null">
        Indicator div padding.
    </DocsAttributesItem>
    <DocsAttributesItem Name="IndicatorTemplate" Type="RenderFragment" Default="null">
        Busy indicator template.
    </DocsAttributesItem>
    <DocsAttributesItem Name="IndicatorVerticalPlacement" Type="LoadingIndicatorPlacement" Default="Middle">
        Indicator vertical placement.
    </DocsAttributesItem>
    <DocsAttributesItem Name="Inline" Type="bool" Default="false">
        Used when wrapping inline content such as input controls.
    </DocsAttributesItem>
    <DocsAttributesItem Name="Loaded" Type="bool" Default="true">
        Current loading state.
    </DocsAttributesItem>
    <DocsAttributesItem Name="LoadingTemplate" Type="RenderFragment" Default="null">
        Loading state template.
    </DocsAttributesItem>
    <DocsAttributesItem Name="Service" Type="LoadingIndicatorService" Default="null">
        Service that can control this LoadingIndicator instance.
    </DocsAttributesItem>
    <DocsAttributesItem Name="SpinnerBackground" Type="Background" Default="#c0c0c0">
        Set spinner background color.
    </DocsAttributesItem>
    <DocsAttributesItem Name="SpinnerColor" Type="Color" Default="#000000">
        Set spinner color.
    </DocsAttributesItem>
    <DocsAttributesItem Name="SpinnerHeight" Type="string" Default="64px">
        Set spinner height.
    </DocsAttributesItem>
    <DocsAttributesItem Name="SpinnerWidth" Type="string" Default="null">
        Set spinner width.
    </DocsAttributesItem>
    <DocsAttributesItem Name="ZIndex" Type="int?" Default="null">
        Manually set screen z-index.
    </DocsAttributesItem>
</DocsAttributes>