@page "/docs/extensions/datagrid/templates"

<Seo Canonical="/docs/extensions/datagrid/templates" Title="Blazorise DataGrid templates" Description="Learn to use and work with the Blazorise DataGrid templates to customize the appearance and behavior of the DataGrid fully." />

<DocsPageTitle Path="Extensions/DataGrid/Templates">
    Blazorise DataGrid Templates
</DocsPageTitle>

<DocsPageLead>
    Learn to use and work with the Blazorise DataGrid templates to customize the appearance and behavior of the DataGrid fully.
</DocsPageLead>

<DocsPageParagraph>
    Blazor includes templated components that can accept one or more UI segments as input and render them as part of the component during component rendering. DataGrid is a templated Blazor component that lets you customize various parts of the user interface with template parameters. It enables you to generate custom components or content using your own logic.
</DocsPageParagraph>

<Row RowColumns="RowColumns.Are4.OnTablet.Are2.OnMobile">
    @foreach ( var info in ( PageEntries ?? Enumerable.Empty<PageEntry>() ).Where( x => x.Url.StartsWith( "docs/extensions/datagrid/templates" ) && !string.IsNullOrEmpty( x.Description ) ) )
    {
        <Column Margin="Margin.Is3.FromBottom">
            <DocsPageComponentInfo @key="@info" Name="@info.Name" Description="@info.Description" To="@info.Url" />
        </Column>
    }
</Row>
@code {
    public IEnumerable<PageEntry> PageEntries;

    [Inject] public PageEntryData PageEntriesData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        PageEntries = await PageEntriesData.GetDataAsync();

        await base.OnInitializedAsync();
    }
}

<DocsPageApi>
    <DocsPageApiItem Url="docs/extensions/datagrid/api" Name="<DataGrid />" />
</DocsPageApi>