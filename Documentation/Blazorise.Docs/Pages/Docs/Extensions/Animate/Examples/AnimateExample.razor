@namespace Blazorise.Docs.Docs.Examples

@if (availableAnimations is not null)
{
    <Select TValue="string" SelectedValueChanged="SelectedAnimationChanged">
        @foreach (var availableAnimation in availableAnimations)
        {
            <SelectItem Value="@availableAnimation">@availableAnimation</SelectItem>
        }

</Select>
}

@if (showAnimate)
{
    <Div ElementId="#b-animate">
        <Animate Anchor="#b-animate" Auto Animation="selectedAnimation" DelayMilliseconds="500">
            <Card Margin="Margin.Is4.OnY">
                <CardBody>
                    <CardTitle Size="5">Animation Example</CardTitle>
                    <CardText>
                        Some content.
                    </CardText>
                </CardBody>
            </Card>
        </Animate>
    </Div>
}
<Button Color="Color.Primary" Clicked="@Animate">@btnText</Button>
@code {
    private IEnumerable<string> availableAnimations;
    private IAnimation selectedAnimation = Animations.FadeIn;
    private bool showAnimate = false;
    private string btnText = "Animate!";

    protected override void OnInitialized()
    {
        LoadAnimationOptions();
        base.OnInitialized();
    }

    private void LoadAnimationOptions()
    {
        var animationProps = typeof(Animations)
            .GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static);

        availableAnimations = animationProps.Select(x => x.Name);
    }

    private Task SelectedAnimationChanged(string selectedAnimation)
    {
        var animationProp = typeof(Animations)
            .GetProperty(selectedAnimation, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static);
            
        this.selectedAnimation = (IAnimation)animationProp.GetValue(null, null);
        return Task.CompletedTask;
    }

    private async Task Animate()
    {
        if (!showAnimate)
        {
            showAnimate = true;
            await InvokeAsync(StateHasChanged);
            btnText = "Restart!";
        }
        else
        {
            showAnimate = false;
            btnText = "Animate!";
        }
        await InvokeAsync(StateHasChanged);
    }
}