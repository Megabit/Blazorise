@page "/docs/components/check"

<Seo Canonical="/docs/components/check" Title="Blazorise Check component" Description="Learn to use and work with the Blazorise Check component, which provides users the ability to choose between two distinct values." />

<DocsPageTitle Path="Components/Check">
    Blazorise Check component
</DocsPageTitle>

<DocsPageLead>
    Check allow the user to toggle an option on or off.
</DocsPageLead>

<DocsPageParagraph>
    The <Code Tag>Check</Code> component provides users the ability to choose between two distinct values. These are very similar to a switch and can be used in complex forms and checklists. You can use this to supply a way for the user to toggle an option.
</DocsPageParagraph>

<DocsPageSection>
    <DocsPageSectionHeader Title="Check">
        Simple card
    </DocsPageSectionHeader>
    <DocsPageSectionContent Outlined>
        <CheckExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="CheckExample" />
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="With name">
        This example showcases two Blazorise checkboxes linked to the same identifier, <Strong>CheckMeOut</Strong>. Both checkboxes contribute to the same data field upon submission when included in a form. This setup is ideal for grouping related choices under one name but requires careful data handling to distinguish between the choices on the server side.
    </DocsPageSectionHeader>
    <DocsPageSectionContent Outlined>
        <CheckWithNameExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="CheckWithNameExample" />
</DocsPageSection>

<DocsPageSubtitle>
    Usage
</DocsPageSubtitle>

<DocsPageSection>
    <DocsPageSectionHeader Title="With bind attribute">
    </DocsPageSectionHeader>
    <DocsPageSectionContent Outlined>
        <CheckWithBindExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="CheckWithBindExample" />
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="With event">
    </DocsPageSectionHeader>
    <DocsPageSectionContent Outlined>
        <CheckWithEventExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="CheckWithEventExample" />
</DocsPageSection>

<DocsPageSubtitle>
    API
</DocsPageSubtitle>

<Heading Size="HeadingSize.Is3">
    Attributes
</Heading>

<DocsAttributes>
    <DocsAttributesItem Name="TValue" Type="generic">
        Data type of <Code>Checked</Code> value. Support types are <Code>bool</Code> and <Code>bool?</Code>.
    </DocsAttributesItem>
    <DocsAttributesItem Name="Checked" Type="TValue" Default="default">
        Gets or sets the checked flag.
    </DocsAttributesItem>
    <DocsAttributesItem Name="CheckedChanged" Type="EventCallback<TValue>">
        Occurs when the check state is changed.
    </DocsAttributesItem>
    <DocsAttributesItem Name="Indeterminate" Type="bool?" Default="null">
        The indeterminate property can help you to achieve a ‘check all’ effect.
    </DocsAttributesItem>
    <DocsAttributesItem Name="Inline" Type="bool" Default="false">
        Group checkboxes on the same horizontal row.
    </DocsAttributesItem>
    <DocsAttributesItem Name="Cursor" Type="Cursor" Default="Default">
        Defines the mouse cursor based on the behavior by the current CSS framework.
    </DocsAttributesItem>
    <DocsAttributesItem Name="Name" Type="Cursor" Default="Default">
        Defines the name attribute of a checkbox. The name attribute is used to identify form data after it has been submitted to the server, or to reference form data using JavaScript on the client side.
    </DocsAttributesItem>
</DocsAttributes>