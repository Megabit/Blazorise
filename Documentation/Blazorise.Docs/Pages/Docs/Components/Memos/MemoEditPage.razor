@page "/docs/components/memo"

<Seo Canonical="/docs/components/memo" Title="Blazorise MemoEdit system" Description="Learn to use and work with the Blazorise MemoEdit component, which is used to create multiline text input (textarea)." />

<DocsPageTitle Path="Components/Memo Edit">
    Blazorise MemoEdit component
</DocsPageTitle>

<DocsPageLead>
    MemoEdit collect data from the user and allow multiple lines of text.
</DocsPageLead>

<DocsPageParagraph>
    MemoEdit is an input field component for multi-line text input based on a <Code Tag>textarea</Code> element.
</DocsPageParagraph>

<DocsPageSection>
    <DocsPageSectionHeader Title="Basic">
    </DocsPageSectionHeader>
    <DocsPageSectionContent Outlined FullWidth>
        <BasicMemoEditExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="BasicMemoEditExample" />
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Tab override">
        By default a <Code Tag>textarea</Code> will lose focus when you press the tab key. If you want to allow tabs to be entered
        you just need to enable it with <Code>ReplaceTab</Code>, and optionally a <Code>TabSize</Code> parameter.
    </DocsPageSectionHeader>
    <DocsPageSectionContent Outlined FullWidth>
        <MemoEditTabExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="MemoEditTabExample" />
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Auto size">
        Unless set to a fixed height, MemoEdit adjusts its height automatically based on its content. The default and minimum height is two rows of text.
    </DocsPageSectionHeader>
    <DocsPageSectionContent Outlined FullWidth>
        <MemoEditAutoSizeExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="MemoEditAutoSizeExample" />
</DocsPageSection>

<DocsPageSubtitle>
    Binding
</DocsPageSubtitle>

<DocsPageSection>
    <DocsPageSectionHeader Title="Two-way binding">
        By using <Code>bind-*</Code> attribute the text will be automatically assigned to the member variable.
    </DocsPageSectionHeader>
    <DocsPageSectionContent Outlined FullWidth>
        <MemoEditWithBindExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="MemoEditWithBindExample" />
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Mannual event binding">
        When using the event <Code>ValueChanged</Code>, you also must define the <Code>Value</Code> value attribute.
    </DocsPageSectionHeader>
    <DocsPageSectionContent Outlined FullWidth>
        <MemoEditWithEventExample />
    </DocsPageSectionContent>
    <DocsPageSectionSource Code="MemoEditWithEventExample" />
</DocsPageSection>

<DocsPageSubtitle>
    Settings
</DocsPageSubtitle>

<DocsPageSection>
    <DocsPageSectionHeader Title="Text Changed mode">
        By default the <Code>ValueChanged</Code> event will be raised on every keypress.
        To override default behavior of <Code>ValueChanged</Code> event and to disable the change on every
        keypress you must set the <Code>Immediate</Code> to <Code>false</Code> on application start.
        After setting it to <Code>false</Code> the event will be raised only after the input loses focus.
    </DocsPageSectionHeader>
    <DocsPageSectionSource Code="MemoEditTextChangedModeExample" />
</DocsPageSection>

<DocsPageSection>
    <DocsPageSectionHeader Title="Text Delay mode">
        Because of some limitations in Blazor, sometimes there can be problems when <Code>Immediate</Code> is enabled.
        Basically if you try to type too fast into the text field the caret can jump randomly from current selection
        to the end of the text. To prevent that behaviour you need to enable <Code>Debounce</Code>. Once enabled it will
        slightly delay every value entered into the field to allow the Blazor engine to do it’s thing.
        By default this option is disabled.
    </DocsPageSectionHeader>
    <DocsPageSectionSource Code="MemoEditTextDelayModeExample" />
</DocsPageSection>

<Alert Color="Color.Info" Visible>
    <AlertDescription>
        <Strong>Note:</Strong> All of the options above can also be defined on each <Code>MemoEdit</Code> individually.
        Defining them on <Code>MemoEdit</Code> will override any global settings.
    </AlertDescription>
</Alert>

<ComponentApiDocs ComponentTypes="[typeof(MemoEdit)]" />