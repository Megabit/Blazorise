@namespace Blazorise.Docs.Server.Pages
@using Microsoft.AspNetCore.Components.Web
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="facebook-domain-verification" content="2i87m24mm2h376ki9qa5z0ln4fbub3" />

    <base href="~/" />

    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />

    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="manifest.json">

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU" crossorigin="anonymous">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css">

    <link href="_content/Blazorise/blazorise.min.css?v=1.2.0.0" rel="stylesheet" />
    <link href="_content/Blazorise.Bootstrap5/blazorise.bootstrap5.min.css?v=1.2.0.0" rel="stylesheet" />

    <link href="_content/Blazorise.Snackbar/blazorise.snackbar.min.css?v=1.2.0.0" rel="stylesheet" />
    <link href="_content/Blazorise.SpinKit/blazorise.spinkit.min.css?v=1.2.0.0" rel="stylesheet" />
    <link href="_content/Blazorise.LoadingIndicator/blazorise.loadingindicator.min.css?v=1.2.0.0" rel="stylesheet" />
    <link href="_content/Blazorise.TreeView/blazorise.treeview.min.css?v=1.2.0.0" rel="stylesheet" />
    <link href="_content/Blazorise.Docs/blazorise.docs.min.css?v=1.2.0.0" rel="stylesheet" />

    <link href="css/site.css?v=1.2.0.0" rel="stylesheet" />

    @*<script defer data-domain="blazorise.com" src="https://plausible.io/js/plausible.js"></script>*@

    <!-- Meta Pixel Code -->
    <script>
        !function (f, b, e, v, n, t, s) {
            if (f.fbq) return; n = f.fbq = function () {
                n.callMethod ?
                    n.callMethod.apply(n, arguments) : n.queue.push(arguments)
            };
            if (!f._fbq) f._fbq = n; n.push = n; n.loaded = !0; n.version = '2.0';
            n.queue = []; t = b.createElement(e); t.async = !0;
            t.src = v; s = b.getElementsByTagName(e)[0];
            s.parentNode.insertBefore(t, s)
        }(window, document, 'script',
            'https://connect.facebook.net/en_US/fbevents.js');
        fbq('consent', 'revoke');
    </script>
    <!-- End Meta Pixel Code -->
</head>
<body>
    <noscript>
        <img height="1" width="1" style="display:none" src="https://www.facebook.com/tr?id=516578876725861&ev=PageView&noscript=1" alt="Pixel image" />
    </noscript>

    @RenderBody()

    <link rel="stylesheet" type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.css" />
    <script src="//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js"></script>
    <script>
        window.addEventListener("load", function () {
            window.cookieconsent.initialise({
                "palette": {
                    "popup": {
                        "background": "#494e52"
                    },
                    "button": {
                        "background": "#71489f",
                        "text": "#ffffff"
                    }
                },
                "revokable": false,
                "showLink": true,
                "position": "bottom-right",
                "type": "opt-out",
                "content": {
                    "message": "This website uses cookies to ensure you get the best experience on our website.",
                    "href": "/terms/"
                },
                onInitialise: function (status) {
                    var type = this.options.type;
                    var didConsent = this.hasConsented();
                    if (type == 'opt-in' && didConsent) {
                        // enable cookies
                        setTracking(true);

                        fbq('init', '516578876725861');
                        fbq('track', 'PageView');
                    }
                    if (type == 'opt-out' && !didConsent) {
                        // disable cookies
                        setTracking(false);
                        fbq('consent', 'revoke');
                    }
                },
                onStatusChange: function (status, chosenBefore) {
                    var type = this.options.type;
                    var didConsent = this.hasConsented();
                    if (type == 'opt-in' && didConsent) {
                        // enable cookies
                        setTracking(true);

                        fbq('init', '516578876725861');
                        fbq('track', 'PageView');
                    }
                    if (type == 'opt-out' && !didConsent) {
                        // disable cookies
                        setTracking(false);

                        fbq('consent', 'revoke');
                    }
                },
                onRevokeChoice: function () {
                    var type = this.options.type;
                    if (type == 'opt-in') {
                        // disable cookies
                        setTracking(false);

                        fbq('init', '516578876725861');
                        fbq('track', 'PageView');
                    }
                    if (type == 'opt-out') {
                        // enable cookies
                        setTracking(true);

                        fbq('consent', 'revoke');
                    }
                },
            })
        });

        // enables or disables google analytics
        setTracking = (track) => {
            if (track === true) {
                window['ga-disable-UA-131035631-1'] = false;
            }
            else {
                window['ga-disable-UA-131035631-1'] = true;
            }
        };
    </script>

    <!-- inside of body section and after the div/app tag  -->
    @*<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ" crossorigin="anonymous"></script>*@

    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.1/chart.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/luxon@1.28.1"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-luxon@1.0.0"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-streaming@2.0.0"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-trendline"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.11.1/tocbot.min.js"></script>

    <script id="GA_SCRIPT_UNIVERSAL">
        (function (i, s, o, g, r, a, m) {
            i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
                (i[r].q = i[r].q || []).push(arguments)
            }, i[r].l = 1 * new Date(); a = s.createElement(o),
                m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
        })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');

        ga('create', 'UA-131035631-1', 'auto');
        ga('set', 'anonymizeIp', true)
        ga('send', 'pageview');
    </script>

    <script src="_content/Blazorise.Animate/blazorise.animate.js?v=1.2.0.0"></script>
    <script src="_content/Blazorise.Docs/blazorise.docs.min.js?v=1.2.0.0"></script>
    <script src="_framework/blazor.server.js" autostart="false"></script>
    <script>
        Blazor.start({
            reconnectionHandler: {
                onConnectionDown: (options, error) => {
                    var isReloading = false;

                    async function attemptReload() {

                        if (!isReloading) {
                            isReloading = true;
                            var request = new Request({
                                url: '/healthcheck',
                                method: 'GET'
                            });
                            var result = await fetch(request);

                            if (result.status == 200) {
                                document.location.reload();
                            }
                            isReloading = false;
                        }
                    }
                    setInterval(attemptReload, 1500);
                }
            }
        });
    </script>
</body>
</html>
