@page "/"
@using System.Dynamic
@inject IVersionProvider VersionProvider
<Row>
    <Column>
        <DataGrid TItem="ExpandoObject"
                  Data="inMemoryData"
                  Responsive
                  ShowPager
                  ShowPageSizes
                  Editable
                  EditMode="DataGridEditMode.Inline"
        NewItemCreator="NewItemCreator">
            <DataGridAggregates>
                <DataGridAggregate Field="@nameof( Employee.Email )" Aggregate="DataGridAggregateType.Count">
                    <DisplayTemplate>
                        @($"Total emails: {context.Value}")
                    </DisplayTemplate>
                </DataGridAggregate>
                <DataGridAggregate Field="@nameof( Employee.Salary )" Aggregate="DataGridAggregateType.Sum" DisplayFormat="{0:C}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("fr-FR")" />
                <DataGridAggregate Field="@nameof( Employee.IsActive )" Aggregate="DataGridAggregateType.TrueCount" />
                <DataGridAggregate Field="@nameof( Employee.Childrens )" Aggregate="DataGridAggregateType.Sum" />
            </DataGridAggregates>
            <DataGridColumns>
                <DataGridCommandColumn></DataGridCommandColumn>
                <DataGridColumn Editable TextAlignment="TextAlignment.Center" Field="@nameof( Employee.Id )" Caption="#" Width="60px" />
                <DataGridColumn Editable Field="@nameof( Employee.FirstName )" Caption="First Name">
                </DataGridColumn>
                <DataGridColumn Editable Field="@nameof( Employee.LastName )" Caption="Last Name" />
                <DataGridColumn Editable Field="@nameof( Employee.Email )" Caption="Email" />
                <DataGridColumn Editable Field="@nameof( Employee.City )" Caption="City">
                    <CaptionTemplate>
                        <Icon Name="IconName.City" /> @context.Caption
                    </CaptionTemplate>
                </DataGridColumn>
                <DataGridColumn Editable Field="@nameof( Employee.Zip )" Caption="Zip">
                </DataGridColumn>
                <DataGridDateColumn Field="@nameof( Employee.DateOfBirth )" DisplayFormat="{0:dd.MM.yyyy}" Caption="Date Of Birth" Editable />
                <DataGridNumericColumn Field="@nameof( Employee.Childrens )" Caption="Childrens" ReverseSorting="true" Editable Filterable="false" />
                <DataGridSelectColumn Field="@nameof( Employee.Gender )" Caption="Gender" Editable Data="EmployeeData.Genders" ValueField="(x) => ((Gender)x).Code" TextField="(x) => ((Gender)x).Description" />
                <DataGridColumn Field="@nameof( Employee.Salary )" Caption="Salary" Editable Width="140px" DisplayFormat="{0:C}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("fr-FR")" TextAlignment="TextAlignment.End">
                </DataGridColumn>
                <DataGridCheckColumn Field="@nameof(Employee.IsActive)" Caption="Active" Editable Filterable="false">
                    <DisplayTemplate>
                        <Check TValue="bool" Checked='(context as dynamic).IsActive' Disabled ReadOnly />
                    </DisplayTemplate>
                </DataGridCheckColumn>
            </DataGridColumns>
        </DataGrid>
    </Column>
</Row>

<Row>
    Auto Generate Columns
    <Column>
        <DataGrid TItem="ExpandoObject"
                  Data="inMemoryData"
                  Responsive
                  ShowPager
                  ShowPageSizes
                  Editable
                  EditMode="DataGridEditMode.Inline"
                  NewItemCreator="NewItemCreator">
            <DataGridColumns>

            </DataGridColumns>
        </DataGrid>
    </Column>
</Row>

@code {

    [Inject] EmployeeData EmployeeData { get; set; }

    private List<ExpandoObject> inMemoryData;

    protected override async Task OnInitializedAsync()
    {
        inMemoryData = new();
        var data = ( await EmployeeData.GetDataAsync().ConfigureAwait( false ) ).Take( 25 );

        foreach ( var item in data )
        {

            IDictionary<string, object> expando = new ExpandoObject();

            foreach ( var property in typeof( Employee ).GetProperties() )
            {
                expando.Add( property.Name, property.GetValue( item ) );
            }
            inMemoryData.Add( (ExpandoObject)expando );
        }


        await base.OnInitializedAsync();
    }

    private ExpandoObject NewItemCreator()
    {
        IDictionary<string, object> expando = new ExpandoObject();

        foreach ( var property in typeof( Employee ).GetProperties() )
        {
            expando.Add( property.Name, property.PropertyType.IsValueType ? Activator.CreateInstance( property.PropertyType ) : null );
        }

        return (ExpandoObject)expando;
    }
}