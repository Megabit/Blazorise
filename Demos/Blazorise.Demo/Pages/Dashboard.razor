@page "/"
@inject IVersionProvider VersionProvider
<Card Margin="Margin.Is4.OnY">
    <CardHeader>
        <CardTitle>Autocomplete Multiple Selection</CardTitle>
    </CardHeader>
    <CardBody>
        <Field>
            <FieldBody>
                <Check @bind-Checked="@multipleAutocompleteFreeTyping">FreeTyping</Check>
            </FieldBody>
        </Field>
        <Field Horizontal JustifyContent="JustifyContent.End">
            <FieldLabel ColumnSize="ColumnSize.Is2">Select Values</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is10">
                <Autocomplete TItem="Country"
                              TValue="string"
                              Data="@Countries"
                              TextField="@(( item ) => item.Name)"
                              ValueField="@((item) => item.Iso)"
                              Placeholder="Search..."
                              FreeTyping="multipleAutocompleteFreeTyping"
                              CloseOnSelection="false"
                              MinLength="1"
                              SelectionMode="AutocompleteSelectionMode.Checkbox"
                              @bind-SelectedValues="multipleSelectionData"
                              @bind-SelectedTexts="multipleSelectionTexts">
                </Autocomplete>
            </FieldBody>
        </Field>
        <Field Horizontal JustifyContent="JustifyContent.End">
            <FieldBody ColumnSize="ColumnSize.Is10.Is2.WithOffset">
                Selected Values: @(multipleSelectionData != null ? string.Join( ',', multipleSelectionData ) : "");
            </FieldBody>
            <FieldBody ColumnSize="ColumnSize.Is10.Is2.WithOffset">
                Selected Texts: @(multipleSelectionTexts != null ? string.Join( ',', multipleSelectionTexts ) : "");
            </FieldBody>
        </Field>
    </CardBody>
</Card>

@code {
    [Inject]
    public CountryData CountryData { get; set; }
    public IEnumerable<Country> Countries;
    public IEnumerable<Country> ReadDataCountries;
    public IEnumerable<Country> VirtualizeReadDataCountries;
    public int VirtualizeTotalReadDataCountries;

    private string selectedAutoCompleteSearchValue { get; set; }
    private string selectedAutoCompleteText { get; set; }

    private string selectedAutoCompleteReadDataSearchValue { get; set; }
    private string selectedAutoCompleteReadDataText { get; set; }

    private string selectedAutoCompleteVirtualizeSearchValue { get; set; }
    private string selectedAutoCompleteVirtualizeText { get; set; }

    private string selectedAutoCompleteVirtualizeReadDataSearchValue { get; set; }
    private string selectedAutoCompleteVirtualizeReadDataText { get; set; }

    private bool autocompleteFreeTyping = false;
    private bool autocompleteReadDataFreeTyping = false;
    private bool autocompleteVirtualizeFreeTyping = false;
    private bool autocompleteVirtualizeReadDataFreeTyping = false;

    private List<string> multipleReadDataSelectionData = new();
    private List<string> multipleReadDataSelectionTexts;

    private List<string> multipleSelectionData;
    private List<string> multipleSelectionTexts;
    private bool multipleAutocompleteFreeTyping = false;
    private bool multipleAutocompleteReadDataFreeTyping = false;

    private Random random = new();

    private async Task HandleReadData( AutocompleteReadDataEventArgs autocompleteReadDataEventArgs )
    {
        if ( !autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested )
        {
            await Task.Delay( random.Next( 100 ) );
            if ( !autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested )
            {
                ReadDataCountries = ( await CountryData.GetDataAsync() ).Where( x => x.Name.StartsWith( autocompleteReadDataEventArgs.SearchValue, StringComparison.InvariantCultureIgnoreCase ) );
            }
        }
    }

    private async Task HandleVirtualizeReadData( AutocompleteReadDataEventArgs autocompleteReadDataEventArgs )
    {
        if ( !autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested )
        {
            IEnumerable<Country> response = ( await GetDataFromExternalSource( autocompleteReadDataEventArgs.SearchValue, autocompleteReadDataEventArgs.VirtualizeOffset, autocompleteReadDataEventArgs.VirtualizeCount ) );

            if ( !autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested )
            {
                VirtualizeReadDataCountries = response;
                VirtualizeTotalReadDataCountries = await GetTotalFromExternalSource( autocompleteReadDataEventArgs.SearchValue );
            }
        }
    }

    /// <summary>
    /// Simplied version of getting Data from an external source.
    /// On a real world scenario, you should also handle filtering and sorting, please check our corresponding sections for further examples
    /// </summary>
    /// <param name="page"></param>
    /// <param name="pageSize"></param>
    /// <returns></returns>
    private async Task<IEnumerable<Country>> GetDataFromExternalSource( string searchValue, int virtualizeOffset, int virtualizeCount )
    {
        await Task.Delay( random.Next( 100 ) );
        return ( await CountryData.GetDataAsync() ).Where( x => x.Name.StartsWith( searchValue, StringComparison.InvariantCultureIgnoreCase ) ).Skip( virtualizeOffset ).Take( virtualizeCount );
    }

    /// <summary>
    /// Simplified version of getting Total from an external source.
    /// On a real world scenario, you should also handle filtering and sorting, please check our corresponding sections for further examples
    /// </summary>
    /// <returns></returns>
    private async Task<int> GetTotalFromExternalSource( string searchValue )
        => ( await CountryData.GetDataAsync() ).Where( x => x.Name.StartsWith( searchValue, StringComparison.InvariantCultureIgnoreCase ) ).Count();

    private async Task HandleMultipleReadData( AutocompleteReadDataEventArgs autocompleteReadDataEventArgs )
    {
        if ( !autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested )
        {
            await Task.Delay( random.Next( 100 ) );
            if ( !autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested )
            {
                ReadDataCountries = ( await CountryData.GetDataAsync() ).Where( x => x.Name.StartsWith( autocompleteReadDataEventArgs.SearchValue, StringComparison.InvariantCultureIgnoreCase ) && !( multipleReadDataSelectionTexts?.Contains( x.Name ) ?? false ) );
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Countries = await CountryData.GetDataAsync();
        multipleSelectionData = new List<string>() { Countries.ElementAt( 1 ).Iso.ToString(), Countries.ElementAt( 3 ).Iso.ToString() };
        await base.OnInitializedAsync();
    }
}