@page "/"
@inject IVersionProvider VersionProvider
<Row>
    <Column>
        <Card Margin="Margin.Is4.OnY">
            <CardHeader>
                <CardTitle>Datagrid: In Memory</CardTitle>
            </CardHeader>
            <CardBody>
                <Paragraph>
                    Our DataGrid allows you to display, manage, and manipulate tabular data with absolute ease. You can use
                    the <code>Data</code> property to bind the grid to a strongly typed collection. Initialize this collection
                    in the <code>OnInitialized</code> or <code>OnInitializedAsync</code> lifecycle method or before this method
                    is invoked. To display data within our DataGrid, simply add columns to the markup and use the Field
                    property to assign data fields as needed.
                </Paragraph>
            </CardBody>
            <CardBody>
                <DataGrid TItem="Employee"
                          Data="inMemoryData"
                          Responsive
                          ShowPager
                          ShowPageSizes>
                    <DataGridColumns>
                        <DataGridColumn TextAlignment="TextAlignment.Center" TItem="Employee" Field="@nameof( Employee.Id )" Caption="#" Width="60px" />
                        <DataGridColumn TItem="Employee" Field="@nameof( Employee.FirstName )" Caption="First Name">
                        </DataGridColumn>
                        <DataGridColumn TItem="Employee" Field="@nameof( Employee.LastName )" Caption="Last Name" />
                        <DataGridColumn TItem="Employee" Field="@nameof( Employee.Email )" Caption="Email" />
                        <DataGridColumn TItem="Employee" Field="@nameof( Employee.City )" Caption="City">
                            <CaptionTemplate>
                                <Icon Name="IconName.City" /> @context.Caption
                            </CaptionTemplate>
                        </DataGridColumn>
                        <DataGridColumn TItem="Employee" Field="@nameof( Employee.Zip )" Caption="Zip">
                        </DataGridColumn>
                        <DataGridDateColumn TItem="Employee" Field="@nameof( Employee.DateOfBirth )" DisplayFormat="{0:dd.MM.yyyy}" Caption="Date Of Birth" Editable />
                         <DataGridNumericColumn TItem="Employee" Field="@nameof( Employee.Childrens )" Caption="Childrens" ReverseSorting="true" Editable Filterable="false" />
                         <DataGridSelectColumn TItem="Employee" Field="@nameof( Employee.Gender )" Caption="Gender" Editable Data="EmployeeData.Genders" ValueField="(x) => ((Gender)x).Code" TextField="(x) => ((Gender)x).Description" />
                         <DataGridColumn TItem="Employee" Field="@nameof( Employee.Salary )" Caption="Salary" Editable Width="140px" DisplayFormat="{0:C}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("fr-FR")" TextAlignment="TextAlignment.End">
                         </DataGridColumn>
                         <DataGridCheckColumn TItem="Employee" Field="@nameof(Employee.IsActive)" Caption="Active" Editable Filterable="false">
                             <DisplayTemplate>
                                 <Check TValue="bool" Checked="context.IsActive" Disabled ReadOnly />
                             </DisplayTemplate>
                         </DataGridCheckColumn>
                     </DataGridColumns>
                 </DataGrid>
             </CardBody>
         </Card>
     </Column>
 </Row>

 <Row>
     <Autocomplete Data="@inMemoryData" TItem="Employee" TValue="string" ValueField="(x)=> x.Id.ToString()" TextField="(x) => x.Id.ToString()" MinLength="0"></Autocomplete>
 </Row>

 <Row>
     <ListView Data="@inMemoryData" TItem="Employee" ValueField="(x)=> x.Id.ToString()" TextField="(x) => x.Id.ToString()"></ListView>
 </Row>

 <Row>
     <Chart @ref="barChart" Type="ChartType.Bar" TItem="double" Data="@chartData" />
 </Row>
 <Row>

     <TreeView Nodes="inMemoryData"
               HasChildNodes="(x) => false">
         <NodeContent>
             @context.Id
        </NodeContent>
    </TreeView>
</Row>


@code {

    [Inject] EmployeeData EmployeeData { get; set; }
    Chart<double> barChart;
    private ChartData<double> chartData;
    private IEnumerable<Employee> inMemoryData;

    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        if ( firstRender )
        {
            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        await barChart.Clear();

        await barChart.AddLabelsDatasetsAndUpdate( Labels, GetBarChartDataset() );
    }

    private BarChartDataset<double> GetBarChartDataset()
    {
        return new()
            {
                Label = "# of randoms",
                Data = RandomizeData(),
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
                BorderWidth = 1
            };
    }

    string[] Labels = { "Red", "Blue", "Yellow", "Green", "Purple", "Orange", "Bar7", "Bar8", "Bar9", "Bar10", "Bar11", "Bar12" };
    List<string> backgroundColors = 
    new List<string> { ChartColor.FromRgba( 255, 99, 132, 0.2f ), ChartColor.FromRgba( 54, 162, 235, 0.2f ), ChartColor.FromRgba( 255, 206, 86, 0.2f ), ChartColor.FromRgba( 75, 192, 192, 0.2f ), ChartColor.FromRgba( 153, 102, 255, 0.2f ), ChartColor.FromRgba( 255, 159, 64, 0.2f ) };
    List<string> borderColors = 
    new List<string> { ChartColor.FromRgba( 255, 99, 132, 1f ), ChartColor.FromRgba( 54, 162, 235, 1f ), ChartColor.FromRgba( 255, 206, 86, 1f ), ChartColor.FromRgba( 75, 192, 192, 1f ), ChartColor.FromRgba( 153, 102, 255, 1f ), ChartColor.FromRgba( 255, 159, 64, 1f ) };

    List<double> RandomizeData()
    {
        var r = new Random( DateTime.Now.Millisecond );

        return new List<double> {
            r.Next( 3, 50 ) * r.NextDouble(),//1
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),//5
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),//10
            r.Next( 3, 50 ) * r.NextDouble(),//11
            r.Next( 3, 50 ) * r.NextDouble()};//12
    }

    protected override async Task OnInitializedAsync()
    {
        var result = ( await EmployeeData.GetDataAsync().ConfigureAwait( false ) );

        result.AddRange( result );
        result.AddRange( result );

        var finalResult = new List<Employee>();
        for ( int i = 0; i < result.Count; i++ )
        {
            var newEmployeeRef = new Employee( result[i] );
            newEmployeeRef.Id = i;
            finalResult.Add( newEmployeeRef );
        }

        Console.WriteLine( $"Data Count : {finalResult.Count}" );
        inMemoryData = finalResult;

        chartData = new ChartData<double>()
            {
                Datasets = new List<ChartDataset<double>>()
            {
                new ChartDataset<double>()
                {
                    Data = finalResult.Select(x=> double.Parse(x.Id.ToString())).ToList()
                }
            }
            };
        await base.OnInitializedAsync();
    }
}