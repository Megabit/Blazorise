@page "/tests/datagrid/validations"
<Row>
    <Column>
        <Card Margin="Margin.Is4.OnY">
            <CardHeader>
                <CardTitle>Datagrid: Validations</CardTitle>
            </CardHeader>
            <ListGroup Flush="true">
                <ListGroupItem>Try editing or creating a new item and watch validations working!</ListGroupItem>
                <ListGroupItem>Annotations: First Name, LastName and EmailAddress fields have the <code>[Required]</code> annotation. EmailAddress field additionally has the <code>[EmailAddress]</code> annotation. </ListGroupItem>
                <ListGroupItem>Validator: The City field has an inbuilt Validator provided by Blazorise that checks if the input has only UpperCase letters.</ListGroupItem>
                <ListGroupItem>Validator: The Gender field uses the Validator to provide a custom validation checking whether the value provided is within the expected "M"/"F"/"D" values.</ListGroupItem>
                <ListGroupItem>Validator: The Active field uses the Validator to provide a custom validation checking whether the value is set to true.</ListGroupItem>
                <ListGroupItem>Validation Pattern: The Zip field has a ValidationPattern that checks whether a zip follows a format like 12345-6789.</ListGroupItem>
            </ListGroup>
            <CardBody>
                <Field>
                    <FieldLabel>
                        Edit Mode
                    </FieldLabel>
                    <FieldBody>
                        <Select @bind-SelectedValue="@editMode">
                            <SelectItem Value="DataGridEditMode.Form">Form</SelectItem>
                            <SelectItem Value="DataGridEditMode.Inline">Inline</SelectItem>
                            <SelectItem Value="DataGridEditMode.Popup">Popup</SelectItem>
                        </Select>
                    </FieldBody>
                </Field>
                <DataGrid TItem="Employee"
                          Data="inMemoryData"
                          ShowPager
                          ShowPageSizes
                          @bind-SelectedRow="@selectedEmployee"
                          Editable
                          EditMode="editMode"
                          UseValidation
                          ValidationsSummaryLabel="The following validation errors have occurred..."
                          ShowValidationsSummary>
                    <DataGridColumns>
                        <DataGridCommandColumn TItem="Employee"></DataGridCommandColumn>
                        <DataGridColumn TextAlignment="TextAlignment.Center" TItem="Employee" Field="@nameof( Employee.Id )" Caption="#" Width="60px" />
                        <DataGridColumn TItem="Employee" Field="@nameof( Employee.FirstName )" Caption="First Name" Editable="true" />
                        <DataGridColumn TItem="Employee" Field="@nameof( Employee.LastName )" Caption="Last Name" Editable="true" />
                        <DataGridColumn TItem="Employee" Field="@nameof( Employee.Email )" Caption="Email" Editable="true" />
                        <DataGridColumn TItem="Employee" Field="@nameof( Employee.City )" Caption="City" Validator="ValidationRule.IsUppercase" Editable="true">
                            <CaptionTemplate>
                                <Icon Name="IconName.City" /> @context.Caption
                            </CaptionTemplate>
                        </DataGridColumn>
                        <DataGridColumn TItem="Employee" Field="@nameof( Employee.Zip )" ValidationPattern="^\d{5}(?:[-]\d{4})$" Caption="Zip">
                        </DataGridColumn>
                        <DataGridDateColumn TItem="Employee" Field="@nameof( Employee.DateOfBirth )" DisplayFormat="{0:dd.MM.yyyy}" Caption="Date Of Birth" Editable="true" />
                        <DataGridNumericColumn TItem="Employee" Field="@nameof( Employee.Childrens )" Caption="Childrens" Editable="true" Filterable="false" />
                        <DataGridSelectColumn TItem="Employee" Field="@nameof( Employee.Gender )" Caption="Gender" Editable="true" Validator="@ValidateGender">
                            <DisplayTemplate>
                                @{
                                    var gender = ( context as Employee )?.Gender;

                                    @if ( gender == "M" )
                                    {
                                        @("Male")
                                    }
                                    else if ( gender == "F" )
                                    {
                                        @("Female")
                                    }
                                    else if ( gender == "D" )
                                    {
                                        @("Diverse")
                                    }
                                }
                            </DisplayTemplate>
                        </DataGridSelectColumn>
                        <DataGridColumn TItem="Employee" Field="@nameof( Employee.Salary )" Caption="Salary" Editable="true" Width="140px" DisplayFormat="{0:C}" DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("fr-FR")" TextAlignment="TextAlignment.Right">
                        </DataGridColumn>
                        <DataGridCheckColumn TItem="Employee" Field="@nameof(Employee.IsActive)" Caption="Active" Editable="true" Filterable="false" Validator="@ValidateCheck">
                            <DisplayTemplate>
                                <Check TValue="bool" Checked="context.IsActive" Disabled="true" ReadOnly="true" />
                            </DisplayTemplate>
                        </DataGridCheckColumn>
                    </DataGridColumns>
                </DataGrid>
            </CardBody>
        </Card>
    </Column>
</Row>

@code {


    [Inject] EmployeeData EmployeeData { get; set; }

    private List<Employee> inMemoryData;
    private Employee selectedEmployee;
    private DataGridEditMode editMode = DataGridEditMode.Form;

    protected override async Task OnInitializedAsync()
    {
        inMemoryData = ( await EmployeeData.GetDataAsync().ConfigureAwait( false ) ).Take( 25 ).ToList();
        await base.OnInitializedAsync();
    }

    void ValidateCheck( ValidatorEventArgs e )
    {
        e.ErrorText = $"Field Active must be true";
        var value = e.Value?.ToString();
        e.Status = bool.TryParse( value, out bool result ) && result
                    ? ValidationStatus.Success
                    : ValidationStatus.Error;

    }

    void ValidateGender( ValidatorEventArgs e )
    {
        var validValues = new[] { "M", "F", "D" };
        e.ErrorText = $"Gender must be: {string.Join( ", ", validValues )} ";
        var value = e.Value?.ToString();
        e.Status = validValues.Contains( value )
                    ? ValidationStatus.Success
                    : ValidationStatus.Error;

    }
}