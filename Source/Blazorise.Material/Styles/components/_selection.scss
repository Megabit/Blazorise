.mui-check,
.mui-radio,
.mui-switch {
    --_size: 1.5rem;

    &-xs {
        --_size: 0.75rem;
    }

    &-sm {
        --_size: 1rem;
    }

    &-md {
        --_size: 1.75rem;
    }

    &-lg {
        --_size: 2rem;
    }

    &-xl {
        --_size: 2.5rem;
    }

    > .mui-check-label,
    > .mui-radio-label,
    > .mui-switch-label {
        direction: ltr;
        inline-size: auto;
        block-size: auto;
        line-height: normal;
        white-space: nowrap;
        cursor: pointer;
        display: inline-flex;
        align-items: center;

        > span::before,
        > span > i {
            --_size: 1.5rem;
            font-family: var(--mui-font-icon);
            font-weight: normal;
            font-style: normal;
            font-size: var(--_size);
            letter-spacing: normal;
            text-transform: none;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            white-space: nowrap;
            word-wrap: normal;
            direction: ltr;
            font-feature-settings: "liga";
            -webkit-font-smoothing: antialiased;
            vertical-align: middle;
            text-align: center;
            overflow: hidden;
            inline-size: var(--_size);
            min-inline-size: var(--_size);
            block-size: var(--_size);
            min-block-size: var(--_size);
            box-sizing: content-box;
            line-height: normal;
            border-radius: 0;
        }

        > span {
            display: inline-flex;
            align-items: center;
            color: var(--mui-on-surface);
            font-size: 0.875rem;
        }

        > span::before,
        > span > i {
            --_size: inherit;
            content: '';
            inline-size: var(--_size);
            block-size: var(--_size);
            box-sizing: border-box;
            margin: 0 auto;
            outline: none;
            color: var(--mui-primary);
            position: absolute;
            inset: auto auto auto calc(var(--_size) * -1);
            border-radius: 50%;
            user-select: none;
            z-index: 1;
        }

        &.icon > span::before {
            content: "" !important;
            font-variation-settings: unset !important;
        }

        &.icon > input:checked + span > i:first-child,
        &.icon > span > i:last-child {
            opacity: 0;
        }

        &.icon > input:checked + span > i:last-child,
        &.icon > span > i:first-child {
            opacity: 1;
        }

        > input:disabled + span {
            opacity: 0.5;
            cursor: not-allowed;
        }
    }
}

.mui-check,
.mui-radio {
    > .mui-check-label,
    > .mui-radio-label {
        > input {
            inline-size: var(--_size);
            block-size: var(--_size);
            opacity: 0;
        }

        > span:not(:empty) {
            padding-inline-start: 0.25rem;
        }

        > span::after {
            --_size: inherit;
            content: '';
            inline-size: var(--_size);
            block-size: var(--_size);
            box-sizing: border-box;
            margin: 0 auto;
            outline: none;
            color: var(--mui-primary);
            position: absolute;
            inset: auto auto auto calc(var(--_size) * -1);
            border-radius: 50%;
            user-select: none;
            z-index: 1;
        }

        > span::after {
            transition: all var(--mui-duration-normal);
            background-color: currentColor;
            box-shadow: 0 0 0 0 currentColor;
            opacity: 0;
        }

        &:hover > input:not(:disabled) + span::after,
        > input:not(:disabled):focus + span::after {
            box-shadow: 0 0 0 0.5rem currentColor;
            opacity: 0.1;
        }

        > input:checked + span::before,
        &.icon > input:checked + span > i {
            color: var(--mui-primary);
        }

        > :focus-visible + span::before {
            outline: 0.125rem solid var(--mui-primary);
            outline-offset: 0.375rem;
        }
    }
}

.mui-check {
    > .mui-check-label {
        > span::before {
            content: "check_box_outline_blank";
        }

        > input:checked + span::before {
            content: "check_box";
            font-variation-settings: "FILL" 1;
        }

        > input:indeterminate + span::before {
            content: "indeterminate_check_box";
        }
    }

    @each $variant in $theme-variants {
        @include make-check-variant($variant, $variant);
    }

    @include make-check-variant("link", "primary");
}

.mui-radio {
    > .mui-radio-label {
        > span::before {
            content: "radio_button_unchecked";
        }

        > input:checked + span::before {
            content: "radio_button_checked";
        }
    }

    @each $variant in $theme-variants {
        @include make-radio-variant($variant, $variant);
    }

    @include make-radio-variant("link", "primary");
}

.mui-switch {
    .mui-switch-label {
        > input {
            inline-size: 3.25rem;
            block-size: 2rem;
            opacity: 0;
        }

        > span {
            padding-left: 0.5rem;
        }

        > span::before,
        &.icon > span > i {
            position: absolute;
            inset: 50% auto auto 0;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: all var(--mui-duration-normal);
            font-size: calc(var(--_size) - 0.5rem);
            user-select: none;
            min-inline-size: var(--_size);
            min-block-size: var(--_size);
            content: "";
            color: var(--mui-surface-variant);
            background-color: var(--mui-outline);
        }

        > span::before,
        &.icon > span > i {
            transform: translate(-3rem, -50%) scale(0.6);
        }

        &.icon > span > i {
            transform: translate(-3rem, -50%) scale(1);
        }

        > input:not(:disabled):is(:focus, :hover) + span::before,
        &.icon > input:not(:disabled):is(:focus, :hover) + span > i {
            box-shadow: 0 0 0 0.5rem var(--mui-active);
        }

        > input:checked + span::after {
            border: none;
            background-color: var(--mui-primary);
        }

        > input:checked + span::before,
        &.icon > input:checked + span > i {
            content: "check";
            color: var(--mui-primary);
            background-color: var(--mui-on-primary);
            transform: translate(-1.75rem, -50%) scale(1);
        }

        > input:checked + span::before,
        &.icon > input:checked + span > i {
            content: "check";
            color: var(--mui-primary);
            background-color: var(--mui-on-primary);
            transform: translate(-1.75rem, -50%) scale(1);
        }

        > input:active:not(:disabled) + span::before,
        &.icon > input:active:not(:disabled) + span > i {
            transform: translate(-3rem, -50%) scale(1.2);
        }

        > input:active:checked:not(:disabled) + span::before,
        &.icon > input:active:checked:not(:disabled) + span > i {
            transform: translate(-1.75rem, -50%) scale(1.2);
        }

        > span::after {
            content: "";
            position: absolute;
            inset: 50% auto auto 0;
            background-color: var(--mui-active);
            border: 0.125rem solid var(--mui-outline);
            box-sizing: border-box;
            inline-size: 3.25rem;
            block-size: 2rem;
            border-radius: 2rem;
            transform: translate(-3.25rem, -50%);
        }

        > :focus-visible + span::after {
            outline: 0.125rem solid var(--mui-primary);
            outline-offset: 0.25rem;
        }
    }

    @each $variant in $theme-variants {
        @include make-switch-variant($variant, $variant);
    }

    @include make-switch-variant("link", "primary");
}
