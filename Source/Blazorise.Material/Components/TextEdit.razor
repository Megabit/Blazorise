@inherits Blazorise.TextEdit
@if ( IsImmediate && IsDebounce )
{
    <input @ref="@ElementRef" id="@ElementId" type="@Type" name="@NameAttributeValue" inputmode="@Mode" class="@ClassNames" style="@StyleNames" placeholder="@Placeholder" disabled="@IsDisabled" readonly="@ReadOnly" aria-readonly="@ReadOnlyAsString" maxlength="@MaxLength" size="@VisibleCharacters" pattern="@Pattern" tabindex="@TabIndex" value="@CurrentValue" @oninput="@OnInputHandler" @onkeydown="@OnKeyDownHandler" @onkeypress="@OnKeyPressHandler" @onkeyup="@OnKeyUpHandler" @onblur="@OnBlurHandler" @onfocus="@OnFocusHandler" @onfocusin="@OnFocusInHandler" @onfocusout="@OnFocusOutHandler" @attributes="@Attributes" />
}
else
{
    <input @ref="@ElementRef" id="@ElementId" type="@Type" name="@NameAttributeValue" inputmode="@Mode" class="@ClassNames" style="@StyleNames" placeholder="@Placeholder" disabled="@IsDisabled" readonly="@ReadOnly" aria-readonly="@ReadOnlyAsString" maxlength="@MaxLength" size="@VisibleCharacters" pattern="@Pattern" tabindex="@TabIndex" @bind-value="CurrentValueAsString" @bind-value:event="@BindValueEventName" @onkeydown="@OnKeyDownHandler" @onkeypress="@OnKeyPressHandler" @onkeyup="@OnKeyUpHandler" @onblur="@OnBlurHandler" @onfocus="@OnFocusHandler" @onfocusin="@OnFocusInHandler" @onfocusout="@OnFocusOutHandler" @attributes="@Attributes" />
}
@ChildContent
@Feedback
@code {
    protected override Task OnBlurHandler( FocusEventArgs eventArgs )
    {
        Console.WriteLine( $"OnBlurHandler called with value: {CurrentValue}" );

        if ( ParentFieldBody is Material.Components.FieldBody muiFieldBody )
        {
            muiFieldBody.NotifyInputComponentValue( this );
        }

        return base.OnBlurHandler( eventArgs );
    }
}