
namespace Blazorise;

/// will be removed in package (specified in csproj)
/// Necessary dtos for working with api docs.
/// Can be generated by Source generator, but needs to be done after Blazorise.Extensions are solved.
/// This almost keeps parity with ApiDocsDtos in sg project.
public class ApiDocsForComponent
{
    public ApiDocsForComponent( Type type,string typeName, List<ApiDocsForComponentProperty> properties, List<ApiDocsForComponentMethod> methods, List<Type> inheritsFromChain)
    {
        Type = type;
        TypeName = typeName;
        OwnProperties = properties;
        OwnMethods = methods;
        InheritsFromChain = inheritsFromChain;
    }
    public Type Type { get; set; }
    public string TypeName { get; }

    /// <summary>
    /// properties form the component and its parents
    /// </summary>
    public List<ApiDocsForComponentProperty> Properties
    {
        get
        {
            if(_properties!=null) return _properties;
            _properties = new List<ApiDocsForComponentProperty>();
            _properties.AddRange(OwnProperties);
            foreach ( Type typeInheritFrom in InheritsFromChain )
            {
               bool success = ComponentsApiDocsSource.Instance.Components.TryGetValue(typeInheritFrom, out var component);
               if(!success || component is null) continue;
               _properties.AddRange(component.OwnProperties); 
            }
            return _properties;
        }
    }

    private List<ApiDocsForComponentProperty>? _properties;   
    
    /// <summary>
    /// only properties from the component, not from parents
    /// </summary>
    public List<ApiDocsForComponentProperty> OwnProperties { get; set; } 
    /// <summary>
    /// Methods from the component and its parents
    /// </summary>
    public List<ApiDocsForComponentMethod> Methods
    {
        get
        {
            if (_methods != null) return _methods;
            _methods = new List<ApiDocsForComponentMethod>();
            _methods.AddRange(OwnMethods);
            foreach (Type typeInheritFrom in InheritsFromChain)
            {
                bool success = ComponentsApiDocsSource.Instance.Components.TryGetValue(typeInheritFrom, out var component);
                if (!success || component is null) continue;
                _methods.AddRange(component.OwnMethods);
            }
            return _methods;
        }
    }

    private List<ApiDocsForComponentMethod>? _methods;

    /// <summary>
    /// Only methods from the component, not from parents
    /// </summary>
    public List<ApiDocsForComponentMethod> OwnMethods { get; set; }

    
    //chain of inherited classes from component to BaseComponent
    public List<Type> InheritsFromChain { get; set; }

}

public class ApiDocsForComponentProperty
{
    public ApiDocsForComponentProperty( string name, Type type, string typeName, object defaultValue, string defaultValueString, string description, bool isBlazoriseEnum )
    {
        Name = name;
        Type = type;
        TypeName = typeName;
        DefaultValue = defaultValue;
        DefaultValueString = defaultValueString;
        Description = description;
        IsBlazoriseEnum = isBlazoriseEnum;
    }
    public string Name { get; set; }
    public Type Type { get; set; }
    public string TypeName { get; set; }
    public object DefaultValue { get; set; }
    public string DefaultValueString { get; set; }
    public string Description { get; set; }
    public bool IsBlazoriseEnum { get; set; }
}

public class ApiDocsForComponentMethod
{
    public ApiDocsForComponentMethod( string name, string returnTypeName, string description, IReadOnlyList<ApiDocsForComponentMethodParameter> parameters )
    {
        Name = name;
        ReturnTypeName = returnTypeName;
        Description = description;
        Parameters = parameters;
    }
    public string Name { get; set; }
    // public Type ReturnTypeSymbol { get; set; }
    public string ReturnTypeName { get; set; }
    public string Description { get; set; }
    
    public IReadOnlyList<ApiDocsForComponentMethodParameter> Parameters { get; set; }
    // public bool IsStatic { get; set; }
    // public bool IsAsync { get; set; }
}

public class ApiDocsForComponentMethodParameter
{
    public ApiDocsForComponentMethodParameter( string name, string typeName )
    {
        Name = name;
        TypeName = typeName;
    }
    public string Name { get; set; }
    // public Type Type { get; set; }
    public string TypeName { get; set; }
//     public string Description { get; set; }
//     public bool IsOptional { get; set; }
//     public object DefaultValue { get; set; }
//     public string DefaultValueString { get; set; }
}





