@using System.Text
@typeparam TValue
@inherits Blazorise.Select<TValue>
@attribute [CascadingTypeParameter( nameof( TValue ) )]
<span class="@InputClassNames">
    <CascadingValue Value="@this" IsFixed>
        <select @ref="@ElementRef" id="@ElementId" class="@ClassNames" style="@StyleNames" disabled="@Disabled" readonly="@ReadOnly" multiple="@Multiple" size="@MaxVisibleItems" value="@CurrentValueAsString" tabindex="@TabIndex" @onchange="@OnChangeHandler" @onkeydown="@OnKeyDownHandler" @onkeypress="@OnKeyPressHandler" @onkeyup="@OnKeyUpHandler" @onblur="@OnBlurHandler" @onfocus="@OnFocusHandler" @onfocusin="@OnFocusInHandler" @onfocusout="@OnFocusOutHandler" @attributes="@Attributes">
            @ChildContent
        </select>
        @if ( !Multiple )
        {
            <span class="fui-Select__icon">
                <svg fill="currentColor" class="___12fm75w f1w7gpdv fez10in fg4l7m0" aria-hidden="true" width="1em" height="1em" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M15.85 7.65c.2.2.2.5 0 .7l-5.46 5.49a.55.55 0 0 1-.78 0L4.15 8.35a.5.5 0 1 1 .7-.7L10 12.8l5.15-5.16c.2-.2.5-.2.7 0Z" fill="currentColor"></path></svg>
            </span>
        }
    </CascadingValue>
</span>
@Feedback
@code {
    string InputClassNames
    {
        get
        {
            var sb = new StringBuilder( "fui-Select" );

            if ( ParentValidation?.Status == ValidationStatus.Error )
            {
                sb.Append( " fui-Select__error" );
            }
            else if ( ParentValidation?.Status == ValidationStatus.Success )
            {
                sb.Append( " fui-Select__success" );
            }

            if ( Disabled )
            {
                sb.Append( " disabled" );
            }

            return sb.ToString();
        }
    }
}