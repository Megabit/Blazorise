@using System.Text
@inherits Blazorise.TextEdit
@if ( ParentIsAddons )
{
    <span class="@AddonClassNames">
        @InputElement
    </span>
}
else
{
    <div class="@InputClassNames">
        @InputElement
    </div>
}
@ChildContent
@Feedback
@code {
    private RenderFragment InputElement => __builder =>
    {
        @if ( IsImmediate && IsDebounce )
        {
            <input @ref="@ElementRef" id="@ElementId" type="@Type" inputmode="@Mode" class="@ClassNames" style="@StyleNames" placeholder="@Placeholder" disabled="@Disabled" readonly="@ReadOnly" aria-readonly="@ReadOnlyAsString" maxlength="@MaxLength" size="@VisibleCharacters" pattern="@Pattern" tabindex="@TabIndex" value="@CurrentValue" @oninput="@OnInputHandler" @onkeydown="@OnKeyDownHandler" @onkeypress="@OnKeyPressHandler" @onkeyup="@OnKeyUpHandler" @onblur="@OnBlurHandler" @onfocus="@OnFocusHandler" @onfocusin="@OnFocusInHandler" @onfocusout="@OnFocusOutHandler" @attributes="@Attributes" />
        }
        else
        {
            <input @ref="@ElementRef" id="@ElementId" type="@Type" inputmode="@Mode" class="@ClassNames" style="@StyleNames" placeholder="@Placeholder" disabled="@Disabled" readonly="@ReadOnly" aria-readonly="@ReadOnlyAsString" maxlength="@MaxLength" size="@VisibleCharacters" pattern="@Pattern" tabindex="@TabIndex" @bind-value="CurrentValueAsString" @bind-value:event="@BindValueEventName" @onkeydown="@OnKeyDownHandler" @onkeypress="@OnKeyPressHandler" @onkeyup="@OnKeyUpHandler" @onblur="@OnBlurHandler" @onfocus="@OnFocusHandler" @onfocusin="@OnFocusInHandler" @onfocusout="@OnFocusOutHandler" @attributes="@Attributes" />
        }
    };

    string AddonClassNames
    {
        get
        {
            return "fui-Input__content";       
        }
    }

    string InputClassNames
    {
        get
        {
            var sb = new StringBuilder( "fui-Input" );

            if ( ParentValidation?.Status == ValidationStatus.Error )
            {
                sb.Append( " fui-Input__error" );
            }
            else if ( ParentValidation?.Status == ValidationStatus.Success )
            {
                sb.Append( " fui-Input__success" );
            }

            if ( ThemeSize != Blazorise.Size.Default )
            {
                sb.Append( $" fui-Input-{ClassProvider.ToSize( ThemeSize )}" );
            }

            if ( Disabled )
            {
                sb.Append( " disabled" );
            }

            return sb.ToString();
        }
    }
}