.navbar-nav .nav-item:hover {
    cursor: pointer;
}

.navbar-nav .nav-link:hover {
    cursor: pointer;
}

.nav .nav-link:hover {
    cursor: pointer;
}

.modal-backdrop {
    z-index: -1;
}

table.table tbody tr.selected {
    background-color: var(--primary);
}

.form-check > .form-check-input.form-check-input-pointer,
.form-check > .form-check-label.form-check-label-pointer,
.custom-checkbox > .custom-control-input.custom-control-input-pointer,
.custom-checkbox > .custom-control-label.custom-control-label-pointer {
    cursor: pointer;
}

$white: #fff !default;
$black: #000 !default;
$gray-900: #212529 !default;

$primary: #007bff;
$secondary: #6c757d;
$success: #28a745;
$info: #17a2b8;
$warning: #ffc107;
$danger: #dc3545;
$light: #f8f9fa;
$dark: #343a40;

$theme-colors: () !default;
// stylelint-disable-next-line scss/dollar-variable-default
$theme-colors: map-merge( ( "primary": $primary, "secondary": $secondary, "success": $success, "info": $info, "warning": $warning, "danger": $danger, "light": $light, "dark": $dark ), $theme-colors );

// The yiq lightness value that determines when the lightness of color changes from "dark" to "light". Acceptable values are between 0 and 255.
$yiq-contrasted-threshold: 150 !default;

// Customize the light and dark text colors for use in our YIQ color contrast function.
$yiq-text-dark: $gray-900 !default;
$yiq-text-light: $white !default;

@function theme-color($key: "primary") {
    @return map-get($theme-colors, $key);
}

@function color-yiq($color, $dark: $yiq-text-dark, $light: $yiq-text-light) {
    $r: red($color);
    $g: green($color);
    $b: blue($color);

    $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;

    @return if($yiq >= $yiq-contrasted-threshold, $dark, $light);
}

@function color-yiq2($r, $g, $b, $dark: $yiq-text-dark, $light: $yiq-text-light) {
    @return calc(((($r * 299) + ($g * 587) + ($b * 114)) - 128000) * -1000);
}

$body-bg: $white !default;

$component-active-bg: theme-color("primary") !default;

$enable-shadows: false !default;
$enable-gradients: false !default;

$input-btn-focus-width: .2rem !default;
$input-btn-focus-color: rgba($component-active-bg, .25) !default;
$input-btn-focus-box-shadow: 0 0 0 $input-btn-focus-width $input-btn-focus-color !default;

$btn-box-shadow: inset 0 1px 0 rgba($white, .15), 0 1px 1px rgba($black, .075) !default;
$btn-focus-width: $input-btn-focus-width !default;
$btn-focus-box-shadow: $input-btn-focus-box-shadow !default;
$btn-active-box-shadow: inset 0 3px 5px rgba($black, .125) !default;

$colors: ( primary:$primary, secondary:$secondary,success:$success,info:$info,warning:$warning,danger:$danger,light:$light,dark:$dark);

@mixin gradient-bg($variable-name, $color) {
    @if $enable-gradients {
        background: $color linear-gradient(180deg, mix($body-bg, $color, 15%), $color) repeat-x;
    }
    @else {
        background-color: var(--b-button-#{$variable-name}-background, $color);
    }
}

@mixin box-shadow($shadow...) {
    @if $enable-shadows {
        $result: ();

        @if (length($shadow) == 1) {
            // We can pass `@include box-shadow(none);`
            $result: $shadow;
        }
        @else {
            // Filter to avoid invalid properties for example `box-shadow: none, 1px 1px black;`
            @for $i from 1 through length($shadow) {
                @if nth($shadow, $i) != "none" {
                    $result: append($result, nth($shadow, $i), "comma");
                }
            }
        }

        @if (length($result) > 0) {
            box-shadow: $result;
        }
    }
}

@mixin button-variant($variable-name, $background, $border, $hover-background: darken($background, 7.5%), $hover-border: darken($border, 10%), $active-background: darken($background, 10%), $active-border: darken($border, 12.5%)) {
    color: var(--b-button-#{$variable-name}-yiq-background);
    @include gradient-bg($variable-name, $background);
    border-color: var(--b-button-#{$variable-name}-border);
    @include box-shadow($btn-box-shadow);

    &:hover {
        color: var(--b-button-#{$variable-name}-yiq-hover-background);
        @include gradient-bg($variable-name, $hover-background);
        border-color: var(--b-button-#{$variable-name}-hover-border);
    }

    &:focus,
    &.focus {
        color: var(--b-button-#{$variable-name}-yiq-hover-background);
        @include gradient-bg($variable-name, $hover-background);
        border-color: var(--b-button-#{$variable-name}-hover-border);
        // Avoid using mixin so we can pass custom focus shadow properly
        @if $enable-shadows {
            box-shadow: $btn-box-shadow, 0 0 0 $btn-focus-width rgba(mix(color-yiq($background), $border, 15%), .5);
        }
        @else {
            box-shadow: 0 0 0 $btn-focus-width var(--b-button-#{$variable-name}-transparent);
        }
    }
    // Disabled comes first so active can properly restyle
    &.disabled,
    &:disabled {
        color: var(--b-button-#{$variable-name}-yiq-background);
        background-color: var(--b-button-#{$variable-name}-background);
        border-color: var(--b-button-#{$variable-name}-border);
        // Remove CSS gradients if they're enabled
        @if $enable-gradients {
            background-image: none;
        }
    }

    &:not(:disabled):not(.disabled):active,
    &:not(:disabled):not(.disabled).active,
    .show > &.dropdown-toggle {
        color: var(--b-button-#{$variable-name}-yiq-active-background);
        background-color: var(--b-button-#{$variable-name}-active-background);

        @if $enable-gradients {
            background-image: none; // Remove the gradient for the pressed/active state
        }

        border-color: var(--b-button-#{$variable-name}-active-border);

        &:focus {
            // Avoid using mixin so we can pass custom focus shadow properly
            @if $enable-shadows and $btn-active-box-shadow != none {
                box-shadow: $btn-active-box-shadow, 0 0 0 $btn-focus-width var(--b-button-#{$variable-name}-transparent);
            }
            @else {
                box-shadow: 0 0 0 $btn-focus-width var(--b-button-#{$variable-name}-transparent);
            }
        }
    }
}

@function to-rgba($color, $alpha) {
    @return unquote('rgba(' + $color + ', ' + $alpha + ')');
}

@function to-rgb($r, $g, $b) {
    @return unquote('rgb(' + $r + ', ' + $g + ', ' + $b + ')');
}

@mixin button-outline-variant($variant, $color, $color-hover: color-yiq($color)) {
    $r: var(--b-theme-variant-#{$variant}-r, 0);
    $g: var(--b-theme-variant-#{$variant}-g, 0);
    $b: var(--b-theme-variant-#{$variant}-b, 0);
    $mycolor: to-rgb($r, $g, $b);

    $active-background: $mycolor;
    $active-border: $mycolor;

    color: $mycolor;
    border-color: $mycolor;

    &:hover {
        color: $color-hover;
        background-color: $active-background;
        border-color: $active-border;
    }

    &:focus,
    &.focus {
        box-shadow: 0 0 0 var(--b-theme-button-focus-width, $btn-focus-width) to-rgba($mycolor, .5);
    }

    &.disabled,
    &:disabled {
        color: $mycolor;
        background-color: transparent;
    }

    &:not(:disabled):not(.disabled):active,
    &:not(:disabled):not(.disabled).active,
    .show > &.dropdown-toggle {
        color: color-yiq2(var(--b-theme-variant-#{$variant}-r, 0), var(--b-theme-variant-#{$variant}-g, 0), var(--b-theme-variant-#{$variant}-b, 0));
        background-color: $active-background;
        border-color: $active-border;

        &:focus {
            // Avoid using mixin so we can pass custom focus shadow properly
            @if $enable-shadows and $btn-active-box-shadow != none {
                box-shadow: $btn-active-box-shadow, 0 0 0 var(--b-theme-button-focus-width, $btn-focus-width) to-rgba($mycolor, .5);
            }
            @else {
                box-shadow: 0 0 0 var(--b-theme-button-focus-width, $btn-focus-width) to-rgba($mycolor, .5);
            }
        }
    }
}

@mixin set-background-color($key, $val) {
    background-color: var(--b-theme-variant-#{$key}, #{$val});
}

@mixin set-border-color($key, $val) {
    border-color: var(--b-theme-variant-#{$key}, #{$val});
}
