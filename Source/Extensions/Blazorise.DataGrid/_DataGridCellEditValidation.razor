@typeparam TItem
@inherits _DataGridCellEdit<TItem>
@if ( ValueType == typeof( string ) )
{
    <TextEdit Text="@CellEditContext.CellValue?.ToString()" TextChanged="@OnEditValueChanged" TextExpression="@stringExpression" ReadOnly="@Column.Readonly" Pattern="@ValidationPattern">
        <Feedback>
            @if ( ShowValidationFeedback )
            {
                <ValidationError />
            }
        </Feedback>
    </TextEdit>
}
else if ( ValueType == typeof( decimal ) )
{
    <NumericEdit TValue="decimal" Value="@((decimal)CellEditContext.CellValue)" ValueChanged="@OnEditValueChanged" ValueExpression="@decimalExpression" ReadOnly="@Readonly" Pattern="@ValidationPattern" Step="@Step" Decimals="@Decimals" DecimalsSeparator="@DecimalsSeparator" Culture="@Culture" ShowStepButtons="@ShowStepButtons" EnableStep="@EnableStep">
        <Feedback>
            @if ( ShowValidationFeedback )
            {
                <ValidationError />
            }
        </Feedback>
    </NumericEdit>
}
else if ( ValueType == typeof( decimal? ) )
{
    <NumericEdit TValue="decimal?" Value="@((decimal?)CellEditContext.CellValue)" ValueChanged="@OnEditValueChanged" ValueExpression="@nullableDecimalExpression" ReadOnly="@Readonly" Pattern="@ValidationPattern" Step="@Step" Decimals="@Decimals" DecimalsSeparator="@DecimalsSeparator" Culture="@Culture" ShowStepButtons="@ShowStepButtons" EnableStep="@EnableStep">
        <Feedback>
            @if ( ShowValidationFeedback )
            {
                <ValidationError />
            }
        </Feedback>
    </NumericEdit>
}
else if ( ValueType == typeof( double ) )
{
    <NumericEdit TValue="double" Value="@((double)CellEditContext.CellValue)" ValueChanged="@OnEditValueChanged" ValueExpression="@doubleExpression" ReadOnly="@Readonly" Pattern="@ValidationPattern" Step="@Step" Decimals="@Decimals" DecimalsSeparator="@DecimalsSeparator" Culture="@Culture" ShowStepButtons="@ShowStepButtons" EnableStep="@EnableStep">
        <Feedback>
            @if ( ShowValidationFeedback )
            {
                <ValidationError />
            }
        </Feedback>
    </NumericEdit>
}
else if ( ValueType == typeof( double? ) )
{
    <NumericEdit TValue="double?" Value="@(( double?)CellEditContext.CellValue)" ValueChanged="@OnEditValueChanged" ValueExpression="@nullableDoubleExpression" ReadOnly="@Readonly" Pattern="@ValidationPattern" Step="@Step" Decimals="@Decimals" DecimalsSeparator="@DecimalsSeparator" Culture="@Culture" ShowStepButtons="@ShowStepButtons" EnableStep="@EnableStep">
        <Feedback>
            @if ( ShowValidationFeedback )
            {
                <ValidationError />
            }
        </Feedback>
    </NumericEdit>
}
else if ( ValueType == typeof( float ) )
{
    <NumericEdit TValue="float" Value="@((float)CellEditContext.CellValue)" ValueChanged="@OnEditValueChanged" ValueExpression="@floatExpression" ReadOnly="@Readonly" Pattern="@ValidationPattern" Step="@Step" Decimals="@Decimals" DecimalsSeparator="@DecimalsSeparator" Culture="@Culture" ShowStepButtons="@ShowStepButtons" EnableStep="@EnableStep">
        <Feedback>
            @if ( ShowValidationFeedback )
            {
                <ValidationError />
            }
        </Feedback>
    </NumericEdit>
}
else if ( ValueType == typeof( float? ) )
{
    <NumericEdit TValue="float?" Value="@((float?)CellEditContext.CellValue)" ValueChanged="@OnEditValueChanged" ValueExpression="@nullableFloatExpression" ReadOnly="@Readonly" Pattern="@ValidationPattern" Step="@Step" Decimals="@Decimals" DecimalsSeparator="@DecimalsSeparator" Culture="@Culture" ShowStepButtons="@ShowStepButtons" EnableStep="@EnableStep">
        <Feedback>
            @if ( ShowValidationFeedback )
            {
                <ValidationError />
            }
        </Feedback>
    </NumericEdit>
}
else if ( ValueType == typeof( int ) )
{
    <NumericEdit TValue="int" Value="@((int)CellEditContext.CellValue)" ValueChanged="@OnEditValueChanged" ValueExpression="@intExpression" ReadOnly="@Readonly" Pattern="@ValidationPattern" Step="@Step" Decimals="@Decimals" DecimalsSeparator="@DecimalsSeparator" Culture="@Culture" ShowStepButtons="@ShowStepButtons" EnableStep="@EnableStep">
        <Feedback>
            @if ( ShowValidationFeedback )
            {
                <ValidationError />
            }
        </Feedback>
    </NumericEdit>
}
else if ( ValueType == typeof( int? ) )
{
    <NumericEdit TValue="int?" Value="@((int?)CellEditContext.CellValue)" ValueChanged="@OnEditValueChanged" ValueExpression="@nullableIntExpression" ReadOnly="@Readonly" Pattern="@ValidationPattern" Step="@Step" Decimals="@Decimals" DecimalsSeparator="@DecimalsSeparator" Culture="@Culture" ShowStepButtons="@ShowStepButtons" EnableStep="@EnableStep">
        <Feedback>
            @if ( ShowValidationFeedback )
            {
                <ValidationError />
            }
        </Feedback>
    </NumericEdit>
}
else if ( ValueType == typeof( long ) )
{
    <NumericEdit TValue="long" Value="@((long)CellEditContext.CellValue)" ValueChanged="@OnEditValueChanged" ValueExpression="@longExpression" ReadOnly="@Readonly" Pattern="@ValidationPattern" Step="@Step" Decimals="@Decimals" DecimalsSeparator="@DecimalsSeparator" Culture="@Culture" ShowStepButtons="@ShowStepButtons" EnableStep="@EnableStep">
        <Feedback>
            @if ( ShowValidationFeedback )
            {
                <ValidationError />
            }
        </Feedback>
    </NumericEdit>
}
else if ( ValueType == typeof( long? ) )
{
    <NumericEdit TValue="long?" Value="@((long?)CellEditContext.CellValue)" ValueChanged="@OnEditValueChanged" ValueExpression="@nullableLongExpression" ReadOnly="@Readonly" Pattern="@ValidationPattern" Step="@Step" Decimals="@Decimals" DecimalsSeparator="@DecimalsSeparator" Culture="@Culture" ShowStepButtons="@ShowStepButtons" EnableStep="@EnableStep">
        <Feedback>
            @if ( ShowValidationFeedback )
            {
                <ValidationError />
            }
        </Feedback>
    </NumericEdit>
}
else if ( ValueType == typeof( bool ) )
{
    <Check TValue="bool" Checked="@((bool)CellEditContext.CellValue)" CheckedChanged="@OnEditValueChanged" CheckedExpression="@boolExpression" ReadOnly="@Readonly">
        <Feedback>
            @if ( ShowValidationFeedback )
            {
                <ValidationError />
            }
        </Feedback>
    </Check>
}
else if ( ValueType == typeof( bool? ) )
{
    <Check TValue="bool?" Checked="@((bool?)CellEditContext.CellValue)" CheckedChanged="@OnEditValueChanged" CheckedExpression="@nullableBoolExpression" ReadOnly="@Readonly">
        <Feedback>
            @if ( ShowValidationFeedback )
            {
                <ValidationError />
            }
        </Feedback>
    </Check>
}
else if ( ValueType == typeof( DateTime ) )
{
    <DateEdit TValue="DateTime" Date="@((DateTime)CellEditContext.CellValue)" DateChanged="@OnEditValueChanged" DateExpression="@dateTimeExpression" ReadOnly="@Readonly" Pattern="@ValidationPattern">
        <Feedback>
            @if ( ShowValidationFeedback )
            {
                <ValidationError />
            }
        </Feedback>
    </DateEdit>
}
else if ( ValueType == typeof( DateTime? ) )
{
    <DateEdit TValue="DateTime?" Date="@((DateTime?)CellEditContext.CellValue)" DateChanged="@OnEditValueChanged" DateExpression="@nullableDateTimeExpression" ReadOnly="@Readonly" Pattern="@ValidationPattern">
        <Feedback>
            @if ( ShowValidationFeedback )
            {
                <ValidationError />
            }
        </Feedback>
    </DateEdit>
}
else if ( ValueType == typeof( DateTimeOffset ) )
{
    <DateEdit TValue="DateTimeOffset" Date="@((DateTimeOffset)CellEditContext.CellValue)" DateChanged="@OnEditValueChanged" DateExpression="@dateTimeOffsetExpression" ReadOnly="@Readonly" Pattern="@ValidationPattern">
        <Feedback>
            @if ( ShowValidationFeedback )
            {
                <ValidationError />
            }
        </Feedback>
    </DateEdit>
}
else if ( ValueType == typeof( DateTimeOffset? ) )
{
    <DateEdit TValue="DateTimeOffset?" Date="@((DateTimeOffset?)CellEditContext.CellValue)" DateChanged="@OnEditValueChanged" DateExpression="@nullableDateTimeOffsetExpression" ReadOnly="@Readonly" Pattern="@ValidationPattern">
        <Feedback>
            @if ( ShowValidationFeedback )
            {
                <ValidationError />
            }
        </Feedback>
    </DateEdit>
}
else if ( ValueType == typeof( TimeSpan ) )
{
    <TimeEdit TValue="TimeSpan" Time="@((TimeSpan)CellEditContext.CellValue)" TimeChanged="@OnEditValueChanged" TimeExpression="@timeSpanExpression" ReadOnly="@Readonly">
        <Feedback>
            @if ( ShowValidationFeedback )
            {
                <ValidationError />
            }
        </Feedback>
    </TimeEdit>
}
else if ( ValueType == typeof( TimeSpan? ) )
{
    <TimeEdit TValue="TimeSpan?" Time="@((TimeSpan?)CellEditContext.CellValue)" TimeChanged="@OnEditValueChanged" TimeExpression="@nullableTimeSpanExpression" ReadOnly="@Readonly">
        <Feedback>
            @if ( ShowValidationFeedback )
            {
                <ValidationError />
            }
        </Feedback>
    </TimeEdit>
}