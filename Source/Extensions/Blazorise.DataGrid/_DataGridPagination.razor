@inject IClassProvider ClassProvider
<Row>
    <Column ColumnSize="ColumnSize.Is12.Is10.OnTablet">
        <Inline Float="Float.Left">
            <Field Margin="Margin.Is0.FromBottom">
                <Pagination Margin="Margin.Is3.FromTop">
                    <PaginationItem Disabled="@(PaginationContext.CurrentPage <= 1)">
                        <PaginationLink Page="first" Clicked="@OnPaginationItemClick">
                            @if (FirstPageButtonTemplate != null)
                            {
                                @FirstPageButtonTemplate
                            }
                            else
                            {
                                @("First")
                            }
                        </PaginationLink>
                    </PaginationItem>
                    <PaginationItem Disabled="@(PaginationContext.CurrentPage <= 1)">
                        <PaginationLink Page="prev" Clicked="@OnPaginationItemClick">
                            @if (PreviousPageButtonTemplate != null)
                            {
                                @PreviousPageButtonTemplate
                            }
                            else
                            {
                                @("Prev")
                            }
                        </PaginationLink>
                    </PaginationItem>
                    @for (int i = PaginationContext.FirstVisiblePage; i <= PaginationContext.LastVisiblePage; ++i)
                    {
                        var pageNumber = i;
                        var pageNumberString = i.ToString();
                        var pageActive = pageNumber == PaginationContext.CurrentPage;

                        <PaginationItem Display="Display.None.Block.OnTablet" Disabled="@(pageNumber == PaginationContext.CurrentPage)" Active="@pageActive">
                            <PaginationLink Page="@pageNumberString" Clicked="@OnPaginationItemClick">
                                @pageNumberString
                            </PaginationLink>
                        </PaginationItem>
                    }
                    <PaginationItem Display="Display.Block.None.OnTablet">
                        <Select @bind-SelectedValue="@PaginationContext.CurrentPage">
                            @for (int i = PaginationContext.FirstVisiblePage; i <= PaginationContext.LastVisiblePage; ++i)
                            {
                                var pageNumber = i;
                                <SelectItem Value="@pageNumber">@pageNumber</SelectItem>
                            }
                        </Select>
                    </PaginationItem>
                    <PaginationItem Disabled="@(PaginationContext.CurrentPage >= PaginationContext.LastPage)">
                        <PaginationLink Page="next" Clicked="@OnPaginationItemClick">
                            @if (NextPageButtonTemplate != null)
                            {
                                @NextPageButtonTemplate
                            }
                            else
                            {
                                @("Next")
                            }
                        </PaginationLink>
                    </PaginationItem>
                    <PaginationItem Disabled="@(PaginationContext.CurrentPage >= PaginationContext.LastPage)">
                        <PaginationLink Page="last" Clicked="@OnPaginationItemClick">
                            @if (LastPageButtonTemplate != null)
                            {
                                @LastPageButtonTemplate
                            }
                            else
                            {
                                @("Last")
                            }
                        </PaginationLink>
                    </PaginationItem>
                </Pagination>
            </Field>
            @if (PaginationContext.ShowPageSizes)
            {
                <Field Margin="Margin.Is0.FromBottom.Is3.FromLeft">
                    <Select @bind-SelectedValue="@PaginationContext.CurrentPageSize">
                        @foreach (var curPageSize in PaginationContext.PageSizes)
                            {
                            <SelectItem Value="@curPageSize">@curPageSize</SelectItem>
                            }
                    </Select>
                </Field>
                <Field Margin="Margin.Is0.FromBottom.Is2.FromLeft" Display="Display.None.InlineBlock.OnDesktop">
                    @if (ItemsPerPageTemplate != null)
                    {
                        @ItemsPerPageTemplate
                    }
                    else
                    {
                        <TextEdit Plaintext="true" ReadOnly="true" Text="items per page" />
                    }
                </Field>
            }
        </Inline>
    </Column>
    <Column Display="Display.None.Block.OnTablet" ColumnSize="ColumnSize.Is2" Margin="Margin.Is3.FromTop">
        <Inline Class="@ClassProvider.FlexAlignment(Alignment.End)">
            <Field Display="Display.None.Block.OnDesktop">
                @if (TotalItemsTemplate != null)
                {
                    @TotalItemsTemplate(PaginationContext)
                }
                else
                {
                    var curStart = ((PaginationContext.CurrentPage - 1) * PaginationContext.CurrentPageSize + 1);
                    var curEnd = (PaginationContext.CurrentPage * PaginationContext.CurrentPageSize);
                    var text = curStart + " - " + curEnd + " of " + PaginationContext.TotalItems + " items";
                    <TextEdit Plaintext="true" ReadOnly="true" Text="@text" VisibleCharacters="@(text.Length - 4)" />
                }
            </Field>
            <Field Display="Display.Block.None.OnDesktop">
                @if (TotalItemsTemplate != null)
                {
                    @TotalItemsTemplate(PaginationContext)
                }
                else
                {
                    var text = PaginationContext.TotalItems + " items";
                    <TextEdit Plaintext="true" ReadOnly="true" Text="@text" VisibleCharacters="@(text.Length - 4)" />
                }
            </Field>
        </Inline>
    </Column>
</Row>