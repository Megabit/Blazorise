@typeparam TItem
@inherits _BaseDataGridRowEdit<TItem>
@if ( EditMode == DataGridEditMode.Form )
{
    <Validations @ref="validations" Mode="ValidationMode.Manual" StatusChanged="@ValidationsStatusChanged" Model="@ValidationItem" HandlerType="@ParentDataGrid?.ValidationsHandlerType">
        <TableRow>
            <TableRowCell ColumnSpan="@(Columns.Count() + 1)">
                @if ( ParentDataGrid.ShowValidationsSummary )
                {
                    <Row Display="@(ParentDataGrid.HasValidationsSummary || isInvalid ? Display.Always : Display.None)">
                        <ValidationSummary Label="@ParentDataGrid.ValidationsSummaryLabel" Errors="@ParentDataGrid.ValidationsSummaryErrors" />
                    </Row>
                }
                <Row>
                    <Column>
                        <Fields>
                            @foreach ( var column in OrderedEditableColumns )
                            {
                                <Field ColumnSize="@(column.EditFieldColumnSize ?? ColumnSize.IsHalf.OnDesktop)" Padding="Blazorise.Padding.Is2.OnX.Is2.OnY">
                                    <FieldLabel>
                                        @column.Caption
                                    </FieldLabel>
                                    <FieldBody>
                                        <_DataGridCell TItem="TItem" Column="@column" Item="@Item" ValidationItem="@ValidationItem" CellEditContext="@CellValues[column.ElementId]" ShowValidationFeedback="@ParentDataGrid.ShowValidationFeedback" />
                                    </FieldBody>
                                </Field>
                            }
                        </Fields>
                    </Column>
                </Row>
                @if ( ParentDataGrid.CommandColumn is null || ParentDataGrid.CommandColumn.SaveCommandAllowed || ParentDataGrid.CommandColumn.CancelCommandAllowed )
                {
                    <Row>
                        <Column Flex="@ParentDataGrid.CommandColumn?.Flex" Gap="@ParentDataGrid.CommandColumn?.Gap">
                            <Div Flex="@DefaultFlex" Gap="@DefaultGap">
                                @if ( ParentDataGrid.CommandColumn is null || ParentDataGrid.CommandColumn.SaveCommandAllowed )
                                {
                                    var saveButtonString = Localizer.Localize( ParentDataGrid.Localizers?.SaveButtonLocalizer, "Save" );

                                    @if ( ParentDataGrid.CommandColumn?.SaveCommandTemplate != null )
                                    {
                                        @ParentDataGrid.CommandColumn.SaveCommandTemplate( new()
                                        {
                                            Clicked = callbackFactory.Create( this, Save ),
                                            LocalizationString = saveButtonString,
                                            Item = Item,
                                        } );
                                    }
                                    else
                                    {
                                        @if ( ParentDataGrid.SubmitFormOnEnter )
                                        {
                                            <Button Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Link" Clicked="@Save">
                                                 @saveButtonString
                                            </Button>
                                        }
                                        else
                                        {
                                            <Button Color="Color.Link" Clicked="@Save">
                                                @saveButtonString
                                            </Button>
                                        }
                                    }
                                }
                                @if ( ParentDataGrid.CommandColumn is null || ParentDataGrid.CommandColumn.CancelCommandAllowed )
                                {
                                    var cancelButtonString = Localizer.Localize( ParentDataGrid.Localizers?.CancelButtonLocalizer, "Cancel" );

                                    @if ( ParentDataGrid.CommandColumn?.CancelCommandTemplate != null )
                                    {
                                        @ParentDataGrid.CommandColumn.CancelCommandTemplate( new()
                                        {
                                            Clicked = Cancel,
                                            LocalizationString = cancelButtonString,
                                            Item = Item,
                                        } );
                                    }
                                    else
                                    {
                                        <Button Color="Color.Link" Clicked="@Cancel">
                                            @cancelButtonString
                                        </Button>
                                    }
                                }
                            </Div>
                        </Column>
                    </Row>
                }
            </TableRowCell>
        </TableRow>
    </Validations>
}
else if ( EditMode == DataGridEditMode.Inline || EditMode == DataGridEditMode.Cell )
{
    <Validations @ref="validations" Mode="ValidationMode.Manual" StatusChanged="@ValidationsStatusChanged" Model="@ValidationItem" HandlerType="@ParentDataGrid?.ValidationsHandlerType">
        @if ( ParentDataGrid.ShowValidationsSummary )
        {
            <TableRow Display="@(ParentDataGrid.HasValidationsSummary || isInvalid ? Display.TableRow : Display.None)">
                <TableRowCell ColumnSpan="@Columns.Count()">
                    <ValidationSummary Label="@ParentDataGrid.ValidationsSummaryLabel" Errors="@ParentDataGrid.ValidationsSummaryErrors" />
                </TableRowCell>
            </TableRow>
        }
        <TableRow>
            @ParentDataGrid.groupIndentationFragment

            @foreach ( var column in DisplayableColumns )
            {
                @if ( column.IsCommandColumn )
                {
                    <_DataGridRowCommand @key=column TItem="TItem" Item="@Item" EditState="DataGridEditState.Edit" Column="@column" Save="@Save" />
                }
                else if ( column.IsMultiSelectColumn )
                {
                    if ( ParentDataGrid.MultiSelect )
                    {
                        <TableRowCell @key=column Class="@column.CellClass?.Invoke(Item)"
                                      Style="@column.BuildCellStyle(Item)"
                                      TextAlignment="@column.TextAlignment"
                                      VerticalAlignment="@column.VerticalAlignment"
                                      Display="@column.Display"
                                      Flex="@column.Flex"
                                      Gap="@column.Gap"
                                      FixedPosition="@column.FixedPosition"
                                      Width="@column.BuildCellFluentSizing()">
                        </TableRowCell>
                    }
                }
                else if ( column.Displaying )
                {
                    <TableRowCell @key=column Class="@column.CellClass?.Invoke(Item)" Style="@column.BuildCellStyle(Item)"
                                  @onkeydown="@(ParentDataGrid.IsCellEdit ? async (args) =>  await HandleCellKeyDown(args, column) : default)"
                                  @onclick=@(ParentDataGrid.IsCellEdit && !column.CellValueIsEditable ? async () => await HandleCellClick(column) : default)
                                  TextAlignment="@column.TextAlignment" VerticalAlignment="@column.VerticalAlignment" Display="@column.Display" Flex="@column.Flex" Gap="@column.Gap" FixedPosition="@column.FixedPosition" Width="@column.BuildCellFluentSizing()">
                        @if ( column.CellValueIsEditable )
                        {
                            <_DataGridCell TItem="TItem" Column="@column" Item="@Item" ValidationItem="@ValidationItem" CellEditContext="@CellValues[column.ElementId]" ShowValidationFeedback="@ParentDataGrid.ShowValidationFeedback" />
                        }
                        else
                        {
                            if ( column.DisplayTemplate != null )
                            {
                                @column.DisplayTemplate( Item )
                            }
                            else
                            {
                                var displayValue = column.FormatDisplayValue( Item );

                                @if ( column.ColumnType == DataGridColumnType.Check )
                                {
                                    <Check TValue="bool" ReadOnly Disabled Checked="@(displayValue == bool.TrueString)" />
                                }
                                else
                                {
                                    @displayValue
                                }
                            }
                        }
                    </TableRowCell>
                }
            }
        </TableRow>
    </Validations>
}