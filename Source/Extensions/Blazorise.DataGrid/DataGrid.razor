@typeparam TItem
@inherits BaseDataGridComponent
@using Blazorise.Extensions
@* there are two CascadingValue because one is used only to define columns, and the other is to build rows based on those columns *@
@* This one is to build rows *@
<CascadingValue Value="@this" IsFixed="true">
    @if ( IsPagerVisible && (PagerPosition == DataGridPagerPosition.Top || PagerPosition == DataGridPagerPosition.TopAndBottom) )
    {
        <_DataGridPagination TItem="TItem" PaginationContext="@PaginationContext" PaginationTemplates="@PaginationTemplates" OnPaginationItemClick="@Paginate" New="@New" Edit="@Edit" Delete="@Delete" SelectedRow="@SelectedRow" ClearFilter="@ClearFilter" />
    }
    <Table @ref="@tableRef" ElementId="@ElementId" Class="@ClassNames" Style="@Style" Margin="@Margin" Padding="@Padding" Striped="@Striped" Bordered="@Bordered" Borderless="@Borderless" Hoverable="@Hoverable" Narrow="@Narrow" Responsive="@Responsive" Resizable="@Resizable" ResizeMode="@ResizeMode">
        <TableHeader>
            @if ( ShowCaptions )
            {
                <TableRow Class="@HeaderRowStyling?.Class" Style="@HeaderRowStyling?.Style" Background="@(HeaderRowStyling?.Background ?? Background.None)" Color="@(HeaderRowStyling?.Color ?? Color.None)">
                    @foreach ( var column in DisplayableColumns )
                    {
                        @if ( column.ColumnType == DataGridColumnType.Command )
                        {
                            @if ( IsCommandVisible )
                            {
                                <TableHeaderCell Class="@column.HeaderCellClass" Style="@column.BuildHeaderCellStyle()" TextAlignment="@column.HeaderTextAlignment" VerticalAlignment="@column.HeaderVerticalAlignment">
                                    @if ( CanInsertNewItem && editState != DataGridEditState.New )
                                    {
                                        <_DataGridNewCommand TItem="TItem" New="@New" />
                                    }
                                </TableHeaderCell>
                            }
                        }
                        else if ( column.ColumnType == DataGridColumnType.MultiSelect )
                        {
                            @if ( MultiSelect )
                            {
                                <TableHeaderCell Class="@column.HeaderCellClass" Style="@column.BuildHeaderCellStyle()" TextAlignment="@column.HeaderTextAlignment" VerticalAlignment="@column.HeaderVerticalAlignment">
                                    <_DataGridMultiSelectAll TItem="TItem" MultiSelectAll="@OnMultiSelectAll" IsIndeterminate="@IsMultiSelectAllIndeterminate"></_DataGridMultiSelectAll>
                                </TableHeaderCell>
                            }
                        }
                        else
                        {
                            <TableHeaderCell Class="@column.HeaderCellClass" Style="@($"{column.HeaderCellStyle}{(Sortable && column.Sortable ? "; cursor: pointer" : "")}{(column.Width != null ? $"; width: {column.Width}" : "")}".TrimStart( ' ', ';' ))" Clicked="@(() => Sort( column ) )" TextAlignment="@column.HeaderTextAlignment" VerticalAlignment="@column.HeaderVerticalAlignment">
                                @if ( column.ShowCaption )
                                {
                                    @if ( column.CaptionTemplate != null )
                                    {
                                        @column.CaptionTemplate( column )
                                    }
                                    else
                                    {
                                        @column.Caption
                                    }
                                }
                                @if ( Sortable && column.Sortable && column.CurrentSortDirection != SortDirection.None )
                                {
                                    @if ( column.SortDirectionTemplate != null )
                                    {
                                        @column.SortDirectionTemplate( column.CurrentSortDirection )
                                    }
                                    else
                                    {
                                        <Icon Name="@(column.CurrentSortDirection == SortDirection.Descending ? IconName.SortDown : IconName.SortUp)" />
                                    }
                                }
                            </TableHeaderCell>
                        }
                    }
                </TableRow>
            }
            @if ( Filterable )
            {
                <TableRow Class="@FilterRowStyling?.Class" Style="@FilterRowStyling?.Style" Background="@(FilterRowStyling?.Background ?? Background.None)" Color="@(FilterRowStyling?.Color ?? Color.None)">
                    @foreach ( var column in DisplayableColumns )
                    {
                        if ( column.ColumnType == DataGridColumnType.MultiSelect )
                        {
                            @if ( MultiSelect )
                            {
                                <TableHeaderCell Class="@column.FilterCellClass" Style="@column.BuildFilterCellStyle()">
                                    @if ( column.FilterTemplate != null && column.Filterable )
                                    {
                                        @(column.FilterTemplate( column.Filter ))
                                    }
                                </TableHeaderCell>
                            }
                        }
                        else if ( !column.Filterable )
                        {
                            <TableHeaderCell Class="@column.FilterCellClass" Style="@column.BuildFilterCellStyle()"></TableHeaderCell>
                            continue;
                        }
                        else if ( column.ColumnType == DataGridColumnType.Command )
                        {
                            @if ( IsCommandVisible )
                            {
                                // since Clear Filter is located in the command column it can be visible only when Edit is enabled
                                <TableHeaderCell Class="@column.FilterCellClass" Style="@column.BuildFilterCellStyle()">
                                    <_DataGridClearFilterCommand TItem="TItem" ClearFilter="@ClearFilter" />
                                </TableHeaderCell>
                            }
                        }
                        else
                        {
                            <TableHeaderCell Class="@column.FilterCellClass" Style="@column.BuildFilterCellStyle()">
                                @if ( column.FilterTemplate != null )
                                {
                                    @(column.FilterTemplate( column.Filter ))
                                }
                                else
                                {
                                    <TextEdit Text="@column.Filter.SearchValue?.ToString()" TextChanged="@(async (newValue) => await OnFilterChanged(column, newValue))" />
                                }
                            </TableHeaderCell>
                        }
                    }
                </TableRow>
            }
        </TableHeader>
        <TableBody>
            @if ( IsNewItemInGrid )
            {
                <_DataGridRowEdit TItem="TItem" Item="@editItem" ValidationItem="@validationItem" Columns="@Columns" CellValues="@editItemCellValues" Save="@Save" Cancel="@Cancel" EditMode="@EditMode" />
            }
            @if ( IsDisplayDataVisible )
            {
                @foreach ( var row in DisplayRowData )
                {
                    @if ( Editable && editState == DataGridEditState.Edit && EditMode != DataGridEditMode.Popup && row.Item.IsEqual( editItem ) )
                    {
                        <_DataGridRowEdit TItem="TItem" Item="@editItem" ValidationItem="@validationItem" Columns="@Columns" CellValues="@editItemCellValues" Save="@Save" Cancel="@Cancel" EditMode="@EditMode" />
                    }
                    else
                    {
                        <_DataGridRow @key="@row.Item" TItem="TItem" Item="@row.Item" DetailRowTrigger="@DetailRowTrigger" Columns="@DisplayableColumns" HoverCursor="@(RowHoverCursor?.Invoke(row.Item) ?? Cursor.Pointer)" Edit="@Edit" Delete="@Delete" Save="@Save" Cancel="@Cancel" Selected="@Select" Clicked="@OnRowClickedCommand" DoubleClicked="@OnRowDoubleClickedCommand" MultiSelect="OnMultiSelectCommand" />
                        @if ( DetailRowTemplate != null && row.ShowDetail )
                        {
                            <_DataGridDetailRow TItem="TItem" Item="@row.Item" Columns="@Columns">
                                @DetailRowTemplate( row.Item )
                            </_DataGridDetailRow>
                        }
                    }
                }
            }
            @if ( IsEmptyTemplateVisible && !IsEmptyFilterTemplateVisible )
            {
                <_DataGridFullColumnSpanRow TItem="TItem" Columns="@Columns">
                    @EmptyTemplate
                </_DataGridFullColumnSpanRow>
            }
            @if ( IsEmptyFilterTemplateVisible && !IsEmptyTemplateVisible )
            {
                <_DataGridFullColumnSpanRow TItem="TItem" Columns="@Columns">
                    @EmptyFilterTemplate
                </_DataGridFullColumnSpanRow>
            }
            @if ( IsLoadingTemplateVisible )
            {
                <_DataGridFullColumnSpanRow TItem="TItem" Columns="@Columns">
                    @LoadingTemplate
                </_DataGridFullColumnSpanRow>
            }
        </TableBody>
        @if ( HasAggregates )
        {
            <TableFooter>
                <_DataGridAggregateRow TItem="TItem" Aggregates="@Aggregates" Columns="@DisplayableColumns" Class="@GroupRowStyling?.Class" Style="@GroupRowStyling?.Style" Background="@(GroupRowStyling?.Background ?? Background.None)" Color="@(GroupRowStyling?.Color ?? Color.None)" />
            </TableFooter>
        }
    </Table>
    @if ( IsPagerVisible && (PagerPosition == DataGridPagerPosition.Bottom || PagerPosition == DataGridPagerPosition.TopAndBottom) )
    {
        <_DataGridPagination TItem="TItem" PaginationContext="@PaginationContext" PaginationTemplates="@PaginationTemplates" OnPaginationItemClick="@Paginate" New="@New" Edit="@Edit" Delete="@Delete" SelectedRow="@SelectedRow" ClearFilter="@ClearFilter" />
    }
    @if ( editItem != null && EditMode == DataGridEditMode.Popup )
    {
        <_DataGridModal TItem="TItem"
                        TitleTemplate="@PopupTitleTemplate"
                        EditItem="@editItem"
                        ValidationItem="@validationItem"
                        EditItemCellValues="@editItemCellValues"
                        Columns="@Columns"
                        PopupVisible="@PopupVisible"
                        PopupSize="@PopupSize"
                        EditState="@editState"
                        Save="@Save"
                        Cancel="@Cancel" />
    }
</CascadingValue>
@* This one is to hold information about columns *@
<CascadingValue Value="@this" IsFixed="true">
    @DataGridAggregates
    @DataGridColumns
    @ChildContent
</CascadingValue>