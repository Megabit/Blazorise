@using Blazorise.Extensions;
@typeparam TItem
@{
    if ( Column is DataGridNumericColumn<TItem> numericColumn )
    {
        <_DataGridCellNumericEdit Column="@numericColumn" CellValue="@FilterSearchValue" CellValueChanged="@OnFilterChanged"></_DataGridCellNumericEdit>

    }
    else if ( Column is DataGridSelectColumn<TItem> selectColumn )
    {
        <_DataGridCellSelectEdit Column="@selectColumn" CellValue="@FilterSearchValue" CellValueChanged="@OnFilterChanged"></_DataGridCellSelectEdit>

    }
    else if ( Column is DataGridCheckColumn<TItem> checkColumn )
    {
        <_DataGridCellCheckEdit Column="@checkColumn" CellValue="@FilterSearchValue" CellValueChanged="@OnFilterChanged"></_DataGridCellCheckEdit>

    }
    else if ( Column is DataGridDateColumn<TItem> dateColumn )
    {
        <_DataGridCellDatePicker Column="@dateColumn" CellValue="@FilterSearchValue" CellValueChanged="@OnFilterChanged"></_DataGridCellDatePicker>

    }
    else
    {
        <TextEdit Text="@FilterSearchValue?.ToString()" TextChanged="@((value) => OnFilterChanged.InvokeAsync(value))" />
    }
}
@code {
    [Parameter] public DataGridColumn<TItem> Column { get; set; }

    [Parameter] public EventCallback<object> OnFilterChanged { get; set; }

    [Parameter] public object FilterSearchValue { get; set; }
}