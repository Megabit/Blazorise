@typeparam TItem
@inherits _BaseDataGridRowMultiSelect<TItem>
<TableRowCell ClickStopPropagation="@(ParentDataGrid.MultiSelectColumn?.PreventRowClick ?? false)" @onclick:preventDefault="BehaviourProvider.DataGridRowMultiSelectPreventClick" Class="@(Column.CellClass?.Invoke(Item))" Style="@BuildCellStyle()" TextAlignment="@Column.TextAlignment" TextTransform="@Column.TextTransform" TextDecoration="@Column.TextDecoration" TextWeight="@Column.TextWeight" TextOverflow="@Column.TextOverflow" TextSize="@Column.TextSize" VerticalAlignment="@Column.VerticalAlignment" Display="@Column.Display" Flex="@Column.Flex" Gap="@Column.Gap" FixedPosition="@Column.FixedPosition" Width="@Column.BuildCellFluentSizing()">
    @if ( ParentDataGrid.MultiSelectColumn?.MultiSelectTemplate != null )
    {
        <Div @onclick:stopPropagation="true" Display="Display.InlineBlock">
            <Div @onclick="args => ShiftKeyPressed = args.ShiftKey" >
                @ParentDataGrid.MultiSelectColumn.MultiSelectTemplate( new( EventCallback.Factory.Create( this, new Func<bool, Task>( OnCheckedChanged ) ), Checked, false, Item ) )
            </Div>
        </Div>
    }
    else
    {
        <Div @onclick:stopPropagation="true" Display="Display.InlineBlock">
            <Check @onclick="args => ShiftKeyPressed = args.ShiftKey"  TValue="bool" Value="Checked" ValueChanged="@OnCheckedChanged"></Check>
        </Div>
    }
</TableRowCell>