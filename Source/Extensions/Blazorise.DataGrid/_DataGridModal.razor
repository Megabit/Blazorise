@typeparam TItem
@inherits _BaseDataGridModal<TItem>
<Modal Visible="@PopupVisible" Closed="@Cancel">
    <ModalContent Size="@PopupSize">
        <ModalHeader>
            <ModalTitle>
                @if ( TitleTemplate != null && EditItem != null )
                {
                    @TitleTemplate( new PopupTitleContext<TItem>( EditItem, EditState, EditState == DataGridEditState.Edit
                        ? Localizer.Localize( ParentDataGrid.Localizers?.EditLocalizer, "Edit" )
                        : Localizer.Localize( ParentDataGrid.Localizers?.CreateLocalizer, "Create" ) ) )
                }
                else
                {
                    @(EditState == DataGridEditState.Edit
                        ? Localizer.Localize( ParentDataGrid.Localizers?.ModalRowEditLocalizer, "Row Edit" )
                        : Localizer.Localize( ParentDataGrid.Localizers?.ModalRowCreateLocalizer, "Row Create" ))
                }
            </ModalTitle>
            <CloseButton Clicked="@Cancel" AutoClose="false" />
        </ModalHeader>
        <ModalBody>
            <Validations @ref="validations" Mode="ValidationMode.Manual" StatusChanged="@ValidationsStatusChanged">
                @if ( ParentDataGrid.ShowValidationsSummary )
                {
                    <ValidationSummary Label="@ParentDataGrid.ValidationsSummaryLabel" />
                }
                <Fields>
                    @foreach ( var column in OrderedEditableColumns )
                    {
                        <Field ColumnSize="@column.PopupFieldColumnSize" Padding="Blazorise.Padding.Is2.OnX.Is2.OnY">
                            <FieldLabel>
                                @column.Caption
                            </FieldLabel>
                            <FieldBody>
                                <_DataGridCell TItem="TItem" Column="@column" Item="@EditItem" CellEditContext="@EditItemCellValues[column.ElementId]" ShowValidationFeedback="@ParentDataGrid.ShowValidationFeedback" />
                            </FieldBody>
                        </Field>
                    }
                </Fields>
            </Validations>
        </ModalBody>
        <ModalFooter>
            @if ( ParentDataGrid.CommandColumn?.SaveCommandAllowed == true )
            {
                var saveButtonString = Localizer.Localize( ParentDataGrid.Localizers?.SaveButtonLocalizer, "Save" );

                @if ( ParentDataGrid.CommandColumn?.SaveCommandTemplate != null )
                {
                    @ParentDataGrid.CommandColumn.SaveCommandTemplate( new CommandContext<TItem>
                    {
                        Clicked = callbackFactory.Create( this, SaveWithValidation ),
                        LocalizationString = saveButtonString,
                        Item = EditItem,
                    } )
                }
                else
                {
                    <Button Color="Color.Link" Clicked="@SaveWithValidation">
                        @saveButtonString
                    </Button>
                }
            }
            @if ( ParentDataGrid.CommandColumn?.CancelCommandAllowed == true )
            {
                var cancelButtonString = Localizer.Localize( ParentDataGrid.Localizers?.CancelButtonLocalizer, "Cancel" );

                @if ( ParentDataGrid.CommandColumn?.CancelCommandTemplate != null )
                {
                    @ParentDataGrid.CommandColumn.CancelCommandTemplate( new CommandContext<TItem>
                    {
                        Clicked = Cancel,
                        LocalizationString = cancelButtonString,
                        Item = EditItem,
                    } )
                }
                else
                {
                    <Button Color="Color.Link" Clicked="@Cancel">
                        @cancelButtonString
                    </Button>
                }
            }
        </ModalFooter>
    </ModalContent>
</Modal>