@typeparam TItem
@inherits _BaseDataGridRow<TItem>
@{
    var styling = new DataGridRowStyling();
    var selectedStyling = new DataGridRowStyling { Color = Blazorise.Color.Primary };

    @if ( IsSelected )
    {
        ParentDataGrid.SelectedRowStyling?.Invoke( Item, selectedStyling );
    }
    else
    {
        ParentDataGrid.RowStyling?.Invoke( Item, styling );
    }

    <TableRow Clicked="@HandleClick"
              MouseOver="HandleMouseOver"
              MouseLeave="HandleMouseLeave"
              DoubleClicked="@HandleDoubleClick"
              ContextMenu="@HandleContextMenu"
              ContextMenuPreventDefault="@ParentDataGrid.RowContextMenuPreventDefault"
              Background="@GetBackground(styling, selectedStyling)"
              Color="@GetColor(styling, selectedStyling)"
              Class="@GetClass(styling, selectedStyling)"
              Style="@GetStyle(styling, selectedStyling)"
              HoverCursor="@GetHoverCursor()">
        @foreach ( var column in Columns )
        {
            @if ( column.ColumnType == DataGridColumnType.Command )
            {
                @if ( ParentDataGrid.IsCommandVisible )
                {
                    <_DataGridRowCommand TItem="TItem" Item="@Item" EditState="DataGridEditState.None" Column="column" />
                }
            }
            else if ( column.ColumnType == DataGridColumnType.MultiSelect )
            {
                @if ( ParentDataGrid.MultiSelect )
                {
                    <_DataGridRowMultiSelect @ref="multiSelect" TItem="TItem" Item="Item" Checked="@IsSelected" CheckedClicked="@OnMultiSelectCheckClicked" Column="column" />
                }
            }
            else
            {
                <TableRowCell @onclick:stopPropagation="column.PreventRowClick" Class="@column.CellClass?.Invoke(Item)" Style="@column.BuildCellStyle(Item)" TextAlignment="@column.TextAlignment" VerticalAlignment="@column.VerticalAlignment"  Display="@column.Display">
                    @if ( column.DisplayTemplate != null )
                    {
                        @column.DisplayTemplate( Item )
                    }
                    else if ( ParentDataGrid.EmptyCellTemplate != null && column.GetValue( Item ) == null )
                    {
                        @ParentDataGrid.EmptyCellTemplate( Item )
                    }
                    else
                    {
                        var displayValue = column.FormatDisplayValue( Item );

                        @if ( column.ColumnType == DataGridColumnType.Check )
                        {
                            <Check TValue="bool" ReadOnly Disabled Checked="@(displayValue == bool.TrueString)" />
                        }
                        else
                        {
                            @displayValue
                        }
                    }
                </TableRowCell>
            }
        }        
        @if (ParentDataGrid.RowOverlayTemplate != null && mouseIsOver)
        {
            IFluentPositionEdgeOffset pos = Position.Absolute.End;
            if (ParentDataGrid.RowOverlayPosition == Enums.RowOverlayPosition.Start)
            {
                pos = Position.Absolute.Start;
            }
            <TableRowCell Margin="Margin.Is0" Padding="Padding.Is0" Style="width:0px" Overflow="Overflow.Visible">
                <Div Position="@pos" Margin="Margin.Is0" Padding="Padding.Is0" >
                        @ParentDataGrid.RowOverlayTemplate(Item)
                </Div>
            </TableRowCell>
        }

    </TableRow>
}