@typeparam TItem
<Div Class="b-scheduler-slot" Style="@GetSlotStyle()" Position="PositionRelative" Margin="MarginIsAuto" Width="WidthIs100" Height="HeightIs100" Border="@BorderColor" Background="@BackgroundColor" @onmouseenter="@OnMouseEnter" @onmouseleave="@OnMouseLeave" @onclick="@OnSlotClicked" ondragover="event.preventDefault();" @ondragenter="@OnSlotDragEnter" @ondragleave="@OnSlotDragLeave" @ondrop="@OnSlotDrop">
    @foreach ( var viewItem in ViewItems ?? Enumerable.Empty<SchedulerItemViewInfo<TItem>>() )
    {
        var index = ViewItems.IndexOf( viewItem );

        <Span Style="@GetItemStyle( viewItem, index, ViewItems.Count )" Position="PositionAbsolute" Border="BorderRounded" Background="Background.Info" Flex="FlexJustifyContentBetweenAlignItemsStart" Padding="PaddingIs1" TextOverflow="TextOverflow.Truncate" @onclick:stopPropagation draggable="@DraggableAttribute" @ondragstart="@(( e ) => OnItemDragStart( e, viewItem ))">
            @if ( viewItem.IsRecurring )
            {
                <Span>
                    <Icon Name="IconName.Sync" />
                </Span>
            }
            <Span @onclick="@(() => OnEditItemClicked( viewItem ))" TextOverflow="TextOverflow.Truncate" Width="WidthIs100" Height="HeightIs100">
                @Scheduler?.GetItemTitle( viewItem.Item )
            </Span>
            <Span @onclick="@(() => OnDeleteItemClicked( viewItem ))" Padding="PaddingIs1">
                <Icon Name="IconName.Delete" />
            </Span>
        </Span>
    }
</Div>