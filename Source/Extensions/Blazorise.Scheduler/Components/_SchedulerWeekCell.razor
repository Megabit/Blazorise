@typeparam TItem
@{
    var viewItems = Scheduler.GetViewItemsOnDate( Items, Date, StartTime ?? TimeOnly.MinValue, EndTime ?? TimeOnly.MaxValue );

    <Div Flex="Blazorise.Flex.Column.AlignItems.Center.Grow.Is1.Shrink.Is1" Width="Blazorise.Width.Is100" Height="Height.Px( ItemCellHeight )" Border="@BorderColor" Background="@BackgroundColor" @onmouseenter="@OnMouseEnter" @onmouseleave="@OnMouseLeave" ondragover="event.preventDefault();" @ondragenter="@OnSlotDragEnter" @ondragleave="@OnSlotDragLeave" @ondrop="@OnSlotDrop">
        <Div Flex="Flex.JustifyContent.End" Width="Width.Is100" Padding="Padding.Is1.OnX" TextColor="@GetTextColor()" TextWeight="@GetTextWeight()" Style="@GetDayNumberStyle()" TextSize="TextSize.Small">@Date.Day</Div>
        <Div Flex="Flex.Column" Gap="Gap.Is1" TextSize="TextSize.Small" Padding="Padding.Is1" Width="Width.Is100" Height="Height.Is100" @onclick="@(() => OnCellClick( Date ))">
            @foreach ( var viewItem in viewItems )
            {
                var title = Scheduler.GetItemTitle( viewItem.Item );
                var startTime = Scheduler.GetItemStartTime( viewItem.Item );

                <Div Flex="Flex.InlineFlex.AlignItems.Center" Width="Width.Is100" @onclick:stopPropagation draggable="@DraggableAttribute" @ondragstart="@(( e ) => OnItemDragStart( e, viewItem ))">
                    <Span Style="@GetItemStyle( viewItem )" @onclick="@(() => OnItemClicked( viewItem ))" TextOverflow="TextOverflow.Truncate">
                        <Span><Icon Name="IconName.Circle" TextColor="TextColor.Info" TextSize="TextSize.Small" /></Span>
                        <Span Margin="Margin.Is1.FromStart" TextWeight="TextWeight.SemiBold">@startTime.ToString( "HH:mm" )</Span>
                        <Span Margin="Margin.Is1.FromStart">@title</Span>
                    </Span>
                </Div>
            }
        </Div>
    </Div>
}
@code {
    private bool mouseHovering;

    private bool draggingOver;

    protected Task OnMouseEnter( MouseEventArgs eventArgs )
    {
        mouseHovering = true;

        return Task.CompletedTask;
    }

    protected Task OnMouseLeave( MouseEventArgs eventArgs )
    {
        mouseHovering = false;

        return Task.CompletedTask;
    }

    protected Task OnCellClick( DateOnly date )
    {
        var start = date.ToDateTime( WorkDayStart ?? StartTime ?? TimeOnly.MinValue );
        var end = date.ToDateTime( WorkDayEnd ?? EndTime ?? TimeOnly.MaxValue );

        return Scheduler.NotifySlotClicked( start, end );
    }

    protected Task OnItemClicked( SchedulerItemViewInfo<TItem> viewItem )
    {
        return Scheduler.NotifyEditItemClicked( viewItem.Item );
    }

    protected Task OnItemDragStart( DragEventArgs e, SchedulerItemViewInfo<TItem> viewItem )
    {
        mouseHovering = false;
        draggingOver = false;

        return Scheduler.StartDrag( viewItem.Item, DragArea );
    }

    protected Task OnSlotDragEnter( DragEventArgs e )
    {
        draggingOver = true;

        return Task.CompletedTask;
    }

    protected Task OnSlotDragLeave( DragEventArgs e )
    {
        draggingOver = false;

        return Task.CompletedTask;
    }

    protected Task OnSlotDrop( DragEventArgs e )
    {
        draggingOver = false;

        return Scheduler.DropDateItem( Date, DragArea );
    }

    string GetItemStyle( SchedulerItemViewInfo<TItem> viewItem )
    {
        return "cursor: pointer;";
    }

    private bool IsDraggingOver => draggingOver && DragArea == Scheduler.CurrentDragArea;

    private IFluentBorder BorderColor => IsDraggingOver ? Border.Is1.Dark : Border.Is1.OnBottom.Is1.OnStart;

    /// <summary>
    /// Gets the background color of the slot.
    /// </summary>
    private Blazorise.Background BackgroundColor => mouseHovering
       ? Background.Light
       : Background.Default;

    /// <summary>
    /// Returns a string indicating whether the Scheduler is draggable. It returns 'true' if draggable, otherwise 'false'.
    /// </summary>
    private string DraggableAttribute => Scheduler?.Draggable == true ? "true" : "false";

    bool IsCurrentMonth => Date.Month == SelectedDate.Month;
    bool IsWeekend => Date.DayOfWeek == DayOfWeek.Saturday || Date.DayOfWeek == DayOfWeek.Sunday;
    TextColor GetTextColor() => IsWeekend ? TextColor.Danger : TextColor.Default;
    TextWeight GetTextWeight() => IsCurrentMonth ? TextWeight.SemiBold : TextWeight.Light;
    string GetDayNumberStyle() => IsCurrentMonth ? IsWeekend ? "opacity: 0.5" : null : "opacity: 0.3";

    [CascadingParameter] public Scheduler<TItem> Scheduler { get; set; }

    [Parameter] public DateOnly Date { get; set; }

    [Parameter] public DateOnly SelectedDate { get; set; }

    [Parameter] public TimeOnly? StartTime { get; set; }

    [Parameter] public TimeOnly? EndTime { get; set; }

    [Parameter] public TimeOnly? WorkDayStart { get; set; }

    [Parameter] public TimeOnly? WorkDayEnd { get; set; }

    [Parameter] public double ItemCellHeight { get; set; }

    [Parameter] public IEnumerable<SchedulerItemInfo<TItem>> Items { get; set; }

    [Parameter] public SchedulerDragArea DragArea { get; set; }
}
