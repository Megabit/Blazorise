@using Blazorise.Extensions
@inherits BaseAfterRenderComponent
@typeparam TItem
@typeparam TValue

<Dropdown ElementId="@ElementId" Class="@DropdownClassNames" Style="@CssStyle" Attributes="@Attributes" Visible="@(DropdownVisible || NotFoundVisible)">
    <Validation Validator="@(Validator ?? ValidationRule.None)" AsyncValidator="@AsyncValidator">

        @if ( IsMultiple && !SelectedTexts.IsNullOrEmpty() )
        {
            @foreach ( var selectedText in SelectedTexts )
            {
                <Badge Color="@MultipleBadgeColor" Margin="Margin.Is2.FromStart" CloseClicked="async () => await RemoveMultipleTextAndValue( selectedText )">@selectedText</Badge>
            }
        }

        <TextEdit @ref="@textEditRef"
                  Role="TextRole.Search"
                  Text="@CurrentSearch"
                  TextChanged="@OnTextChangedHandler"
                  Placeholder="@Placeholder"
                  Size="@Size"
                  Disabled="@Disabled"
                  TabIndex="@TabIndex"
                  KeyDown="@OnTextKeyDownHandler"
                  OnFocus="OnTextFocusHandler"
                  Blur="OnTextBlurHandler"
                  Immediate="@Immediate"
                  Debounce="@Debounce"
                  DebounceInterval="@DebounceInterval"
                  CustomValidationValue="@GetValidationValue">
            <Feedback>
                <ValidationError />
                <ValidationSuccess />
                <ValidationNone />
            </Feedback>
        </TextEdit>
    </Validation>
    <DropdownMenu>
        @if ( NotFoundVisible )
        {
            <DropdownItem Disabled>
                @NotFoundContent( CurrentSearch )
            </DropdownItem>
        }

        @if ( DropdownVisible )
        {
            for ( int i = 0; i < FilteredData.Count; ++i )
            {
                var item = FilteredData[i];
                var isActiveItem = IsActiveItem( item, i );
                var isFocusedItem = i == ActiveItemIndex;

                var text = GetItemText( item );
                var value = GetItemValue( item );

                <DropdownItem ElementId="@DropdownItemId(i)" @key="@item" Active="@isActiveItem" Class="@DropdownItemClassNames(i)" Value="@value" Clicked="() => OnDropdownItemSelected(value)">
                    @if ( SelectionMode == AutocompleteSelectionMode.Checkbox )
                    {
                        <Field Horizontal>
                            @if ( isActiveItem )
                            {
                                <Icon Name="IconName.CheckSquare" TextColor="isFocusedItem ? TextColor.Primary : TextColor.White" Margin="Margin.Is1.FromEnd"></Icon>
                            }
                            else
                            {
                                <Icon Name="IconName.Square" TextColor="TextColor.Primary" Margin="Margin.Is1.FromEnd"></Icon>
                            }
                            <FieldBody>
                                @if ( ItemContent is not null )
                                {
                                    @ItemContent(new (item, value, text))
                                }
                                else
                                {
                                    @text
                                }
                            </FieldBody>
                        </Field>
                    }
                    else
                    {
                        @if ( ItemContent is not null )
                        {
                            @ItemContent(new (item, value, text))
                        }
                        else
                        {
                            @text
                        }
                    }
                </DropdownItem>
            }
        }
    </DropdownMenu>
</Dropdown>
