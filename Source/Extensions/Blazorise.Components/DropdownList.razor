@using Microsoft.AspNetCore.Components.Web.Virtualization
@typeparam TItem
@typeparam TValue
<Dropdown @ref="@dropdownRef" ElementId="@ElementId" Class="@Class" Style="@Style" EndAligned="@EndAligned" Disabled="@Disabled" Direction="@Direction" Attributes="@Attributes">
    <DropdownToggle @ref="@dropdownToggleRef" Color="@Color" Size="@DropdownToggleSize" TabIndex="@TabIndex">@ChildContent</DropdownToggle>
    <DropdownMenu MaxMenuHeight="@MaxMenuHeight" Padding="@(Filterable? Padding.Is0.FromTop : Padding.IsAuto)">
        @if ( Filterable )
        {
            <Field Padding="Padding.Is2" Margin="Margin.Is0" Position="Position.Sticky.Top.Is0">
                <TextEdit Role="TextRole.Search" Value="@FilterText" ValueChanged="@OnFilterTextChangedHandler" />
            </Field>
        }
        @if ( Virtualize )
        {
            <Virtualize TItem="TItem" Context="item" Items="@FilteredData">
                @itemFragment( item )
            </Virtualize>
        }
        else
        {
            @foreach ( var item in FilteredData ?? Enumerable.Empty<TItem>() )
            {
                @itemFragment( item )
            }
        }
    </DropdownMenu>
</Dropdown>
@code {
    protected RenderFragment<TItem> itemFragment => item => __builder =>
    {
        var text = GetItemText( item );
        var value = GetItemValue( item );
        var disabled = GetItemDisabled( item );

        <DropdownItem @key="@item" Clicked="@HandleDropdownItemClicked" Value="@value" Disabled="@disabled"
                      ShowCheckbox="@(SelectionMode == DropdownListSelectionMode.Checkbox)"
                      Checked="IsSelected( value )"
                      CheckedChanged="@(( isChecked ) => HandleDropdownItemChecked( isChecked, value ))">@text</DropdownItem>
    };
}