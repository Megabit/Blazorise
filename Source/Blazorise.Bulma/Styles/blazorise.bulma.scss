@import "form";

.tab-pane {
    display: none;

    &.is-active {
        display: block;
    }
}

.tabs.is-justified li {
    flex-basis: 0;
    flex-grow: 1;
    text-align: center;
}

.list-group {
    display: -ms-flexbox;
    display: flex;
    -ms-flex-direction: column;
    flex-direction: column;
    padding-left: 0;
    margin-bottom: 0;

    & > .list-group-item {
        &:first-child {
            border-radius: 4px 4px 0 0;
        }

        &:last-child {
            border-radius: 0 0 4px 4px;
            margin-bottom: 0;
        }

        &.is-primary {
            background-color: hsl(171, 100%, 41%);
            color: #fff;
        }

        &.is-secondary {
            background-color: hsl(208, 14%, 46%);
            color: #fff;
        }

        &.is-info {
            background-color: hsl(217, 71%, 53%);
            color: #fff;
        }

        &.is-success {
            background-color: hsl(141, 71%, 48%);
            color: #fff;
        }

        &.is-warning {
            background-color: hsl(48, 100%, 67%);
        }

        &.is-danger {
            background-color: hsl(348, 100%, 61%);
            color: #fff;
        }
    }
}

.list-group-flush {
    .list-group-item {
        border-right: 0;
        border-left: 0;
        border-radius: 0;
    }
}

.list-group-item {
    position: relative;
    display: block;
    padding: .75rem 1.25rem;
    margin-bottom: -1px;
    background-color: #fff;
    border: 1px solid rgba(0,0,0,.125);
}

.card-group {
    display: -ms-flexbox;
    display: flex;
    -ms-flex-direction: column;
    flex-direction: column;

    & > .card {
        margin-bottom: 15px;
    }
}

.is-borderless {
    border: 0 !important;
}

table {
    &.is-borderless td,
    &.is-borderless th,
    &.is-borderless tr {
        border: 0 !important;
    }
}

@media (min-width: 768px) {
    .card-group {
        -ms-flex-flow: row wrap;
        flex-flow: row wrap;
    }

    .card-group > .card {
        -ms-flex: 1 0 0%;
        flex: 1 0 0%;
        margin-bottom: 0;
    }

    .card-group > .card + .card {
        margin-left: 0;
        border-left: 0;
    }

    .card-group > .card:first-child {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
    }

    .card-group > .card:first-child .card-image,
    .card-group > .card:first-child .card-header {
        border-top-right-radius: 0;
    }

    .card-group > .card:first-child .card-footer {
        border-bottom-right-radius: 0;
    }

    .card-group > .card:last-child {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
    }

    .card-group > .card:last-child .card-image,
    .card-group > .card:last-child .card-header {
        border-top-left-radius: 0;
    }

    .card-group > .card:last-child .card-footer {
        border-bottom-left-radius: 0;
    }

    .card-group > .card:only-child {
        border-radius: 0.25rem;
    }

    .card-group > .card:only-child .card-image,
    .card-group > .card:only-child .card-header {
        border-top-left-radius: 0.25rem;
        border-top-right-radius: 0.25rem;
    }

    .card-group > .card:only-child .card-footer {
        border-bottom-right-radius: 0.25rem;
        border-bottom-left-radius: 0.25rem;
    }

    .card-group > .card:not(:first-child):not(:last-child):not(:only-child) {
        border-radius: 0;
    }

    .card-group > .card:not(:first-child):not(:last-child):not(:only-child) .card-image,
    .card-group > .card:not(:first-child):not(:last-child):not(:only-child) .card-header,
    .card-group > .card:not(:first-child):not(:last-child):not(:only-child) .card-footer {
        border-radius: 0;
    }
}
/*https://github.com/jgthms/bulma/issues/451#issuecomment-331758839*/
$tablet: 1023px;
$desktop: 1215px;
$widescreen: 1407px;
$fullhd: 1907px;
$spacer: 1rem !default;
$spacers: () !default;
$spacers: map-merge(( 0: 0, 1: ($spacer * .25), 2: ($spacer * .5), 3: $spacer, 4: ($spacer * 1.5), 5: ($spacer * 3) ), $spacers);

$grid-breakpoints: ( xs: 0, mobile: 576px, tablet: $tablet, desktop: $desktop, widescreen: $widescreen, hd: $fullhd ) !default;

@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
    $min: map-get($breakpoints, $name);
    @return if($min != 0, $min, null);
}

@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
    $min: breakpoint-min($name, $breakpoints);

    @if $min {
        @media (min-width: $min) {
            @content;
        }
    }
    @else {
        @content;
    }
}

@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
    @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
    $n: index($breakpoint-names, $name);
    @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

@each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
        $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

        @each $prop, $abbrev in (margin: m, padding: p) {
            @each $size, $length in $spacers {

                .is-#{$abbrev}#{$infix}-#{$size} {
                    #{$prop}: $length !important;
                }

                .is-#{$abbrev}t#{$infix}-#{$size},
                .is-#{$abbrev}y#{$infix}-#{$size} {
                    #{$prop}-top: $length !important;
                }

                .is-#{$abbrev}r#{$infix}-#{$size},
                .is-#{$abbrev}x#{$infix}-#{$size} {
                    #{$prop}-right: $length !important;
                }

                .is-#{$abbrev}b#{$infix}-#{$size},
                .is-#{$abbrev}y#{$infix}-#{$size} {
                    #{$prop}-bottom: $length !important;
                }

                .is-#{$abbrev}l#{$infix}-#{$size},
                .is-#{$abbrev}x#{$infix}-#{$size} {
                    #{$prop}-left: $length !important;
                }
            }
        }
        // Some special margin utils
        .is-m#{$infix}-auto {
            margin: auto !important;
        }

        .is-mt#{$infix}-auto,
        .is-my#{$infix}-auto {
            margin-top: auto !important;
        }

        .is-mr#{$infix}-auto,
        .is-mx#{$infix}-auto {
            margin-right: auto !important;
        }

        .is-mb#{$infix}-auto,
        .is-my#{$infix}-auto {
            margin-bottom: auto !important;
        }

        .is-ml#{$infix}-auto,
        .is-mx#{$infix}-auto {
            margin-left: auto !important;
        }
    }
}

.tabs {
    &.is-vertical ul {
        -webkit-flex-direction: column;
        flex-direction: column;
    }

    &.is-vertical li {
        width: 100%;
    }

    &.is-vertical li > a {
        border: none;
    }
}

.modal {
    &-sm {
        @media (min-width: 576px) {
            width: 300px;
        }
    }

    &-lg {
        @media (min-width: 992px) {
            width: 800px;
        }
    }

    &-xl {
        @media (min-width: 1200px) {
            width: 1140px;
        }
    }
}

.button {
    &.is-secondary {
        background-color: #6c757d;
        border-color: transparent;
        color: #fff;

        &:hover, &.is-hovered {
            background-color: #5a6268;
            border-color: transparent;
            color: #fff;
        }

        &:focus, &.is-focused {
            border-color: transparent;
            color: #fff;
        }

        &:focus:not(:active), &.is-focused:not(:active) {
            box-shadow: 0 0 0 0.125em rgba(0, 209, 178, 0.25);
        }

        &:active, &.is-active {
            background-color: #545b62;
            border-color: transparent;
            color: #fff;
        }

        &[disabled],
        fieldset[disabled] & {
            background-color: #6c757d;
            border-color: transparent;
            box-shadow: none;
        }

        &.is-inverted {
            background-color: #fff;
            color: #6c757d;

            &:hover, &.is-hovered {
                background-color: #f2f2f2;
            }

            &[disabled],
            fieldset[disabled] & {
                background-color: #fff;
                border-color: transparent;
                box-shadow: none;
                color: #6c757d;
            }
        }


        &.is-loading {
            &::after {
                border-color: transparent transparent #fff #fff !important;
            }
        }

        &.is-outlined {
            background-color: transparent;
            border-color: #6c757d;
            color: #6c757d;

            &:hover, &.is-hovered, &:focus, &.is-focused {
                background-color: #6c757d;
                border-color: #6c757d;
                color: #fff;
            }

            &.is-loading::after {
                border-color: transparent transparent #6c757d #6c757d !important;
            }

            &.is-loading:hover::after, &.is-loading.is-hovered::after, &.is-loading:focus::after, &.is-loading.is-focused::after {
                border-color: transparent transparent #fff #fff !important;
            }

            &[disabled],
            fieldset[disabled] & {
                background-color: transparent;
                border-color: #6c757d;
                box-shadow: none;
                color: #6c757d;
            }
        }

        &.is-inverted.is-outlined {
            background-color: transparent;
            border-color: #fff;
            color: #fff;

            &:hover, &.is-hovered, &:focus, &.is-focused {
                background-color: #fff;
                color: #6c757d;
            }

            &.is-loading {
                &:hover::after, &.is-hovered::after, &:focus::after, &.is-focused::after {
                    border-color: transparent transparent #6c757d #6c757d !important;
                }
            }

            &[disabled],
            fieldset[disabled] & {
                background-color: transparent;
                border-color: #fff;
                box-shadow: none;
                color: #fff;
            }
        }
    }
}

.collapse {
    &:not(.show) {
        display: none;
    }
}

.accordion {
    > .card {
        overflow: hidden;

        &:not(:first-of-type) {
            .card-header:first-child {
                border-radius: 0;
            }

            &:not(:last-of-type) {
                border-bottom: 0;
                border-radius: 0;
            }
        }

        &:first-of-type:not(:last-of-type) {
            border-bottom: 0;
            border-bottom-right-radius: 0;
            border-bottom-left-radius: 0;
        }

        &:last-of-type {
            border-top-left-radius: 0;
        }

        .card-header {
            margin-bottom: 1px;
        }
    }
}

tr.table-row-selectable {
    &:hover, &.is-hovered {
        cursor: pointer;
    }
}

$dimensions: 256 512 !default

@each $dimension in $dimensions {
    &.is-#{$dimension}x#{$dimension} {
        height: $dimension * 1px;
        width: $dimension * 1px;
    }
}

// TODO: add these to theme generator
$control-height: 2.5em !default;
$control-line-height: 1.5 !default;

$size-1: 3rem !default;
$size-2: 2.5rem !default;
$size-3: 2rem !default;
$size-4: 1.5rem !default;
$size-5: 1.25rem !default;
$size-6: 1rem !default;
$size-7: 0.75rem !default;

$size-small: $size-7 !default
$size-normal: $size-6 !default
$size-medium: $size-5 !default
$size-large: $size-4 !default

$switch-background: rgba(0,0,0,.125) !default
$switch-border: .1rem solid transparent !default;
$switch-background-active: var(--b-theme-primary, hsl(171, 100%, 41%)) !default;
$switch-radius: 4px !default;
$switch-paddle-background: var(--b-theme-white, #fff) !default;
$switch-paddle-background-active: var(--b-theme-primary, hsl(171, 100%, 41%)) !default;
$switch-paddle-offset: 0.25rem !default;
$switch-paddle-transition: all 0.25s ease-out !default;
$switch-focus: 1px dotted rgba(0,0,0,.125) !default;

// source: https://github.com/Wikiki/bulma-switch

@mixin switch-size($size) {
    $switch-height: $size * 1.5;
    $switch-width: $switch-height * 2;
    $paddle-height: $switch-height - ($switch-paddle-offset * 2);
    $paddle-width: $switch-height - ($switch-paddle-offset * 2);
    $paddle-active-offest: $switch-width - $paddle-width - ($switch-paddle-offset * 1.5);

    + label {
        position: relative;
        display: inline-flex;
        align-items: center;
        justify-content: flex-start;
        font-size: $size;
        line-height: $control-line-height;
        padding-left: $switch-width + .5;
        padding-top: .2rem;
        cursor: pointer;

        &::before, &:before {
            position: absolute;
            display: block;
            top: calc( 50% - #{$switch-height} / 2 );
            left: 0;
            width: $switch-width;
            height: $switch-height;
            border: $switch-border;
            border-radius: $switch-radius;
            background: $switch-background;
            content: '';
        }

        &::after, &:after {
            display: block;
            position: absolute;
            top: calc( 50% - #{$paddle-height} / 2 );
            left: $switch-paddle-offset;
            width: $paddle-width;
            height: $paddle-height;
            transform: translate3d(0, 0, 0);
            border-radius: $switch-radius;
            background: $switch-paddle-background;
            transition: $switch-paddle-transition;
            content: '';
        }
    }

    &:checked {
        + label {
            &::before, &:before {
                background: $switch-background-active;
            }

            &::after {
                left: $paddle-active-offest;
            }
        }
    }
}

.switch[type="checkbox"] {
    outline: 0;
    user-select: none;
    display: inline-block;
    position: absolute;
    opacity: 0;

    @include switch-size($size-normal);
}

.field-body {
    .switch[type="checkbox"] {
        + label {
            margin-top: .375em;
        }
    }
}
