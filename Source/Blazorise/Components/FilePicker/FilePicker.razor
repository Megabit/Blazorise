@namespace Blazorise
@using Blazorise.Extensions
@inherits BaseComponent

<div @ref="ElementRef" id="@ElementContainerId" class="b-file-picker">
    @if ( ShowMode == FilePickerShowMode.Dropdown )
    {
        <Dropdown Display="Blazorise.Display.InlineBlock" Border="@Blazorise.Border.Is1">

            <Div Display="Blazorise.Display.InlineBlock">
                @fileComponentFragment
                <DropdownToggle>(@(FileEdit.Files?.Count() ?? 0))</DropdownToggle>
            </Div>

            @if ( !FileEdit?.Files?.IsNullOrEmpty() ?? false )
            {
                <DropdownMenu Class="b-files">
                    @foreach ( var file in FileEdit.Files )
                    {
                        <DropdownItem Class="b-file">
                            @fileContentFragment(file)
                        </DropdownItem>
                    }
                </DropdownMenu>
            }
        </Dropdown>
    }
    else
    {
        @fileComponentFragment
    }

    <Span Class="b-text-drop" Display="Blazorise.Display.Block" TextAlignment="TextAlignment.Center" Margin="Blazorise.Margin.Is2.FromTop">@GetLocalizedString("Or drop files here")</Span>

    @if ( !FileEdit?.Files?.IsNullOrEmpty() ?? false )
    {
        <div Class="b-files-container">
            @if ( ShowMode == FilePickerShowMode.List )
            {
                <ListGroup Class="b-files" Margin="Blazorise.Margin.Is1.FromBottom.Is1.FromTop">

                    @foreach ( var file in FileEdit.Files )
                    {
                        <ListGroupItem @key="file.Id" Class="b-file">
                            @fileContentFragment(file)
                        </ListGroupItem>
                    }
                </ListGroup>
            }

            @if ( ButtonTemplate is not null )
            {
                @ButtonTemplate(new (EventCallback.Factory.Create(this, ClearWithConfirm), EventCallback.Factory.Create(this, UploadAll), EventCallback.Factory.Create(this, CancelUploadWithConfirm)))
            }
            else
            {
                <Buttons Float="Blazorise.Float.End">
                    <Button Color="Color.Info" Class="b-file-clear" Disabled="@IsBusy()" Clicked="@ClearWithConfirm">@GetLocalizedString("Clear")</Button>
                    <Button Color="Color.Primary" Class="b-file-upload" Disabled="@(IsBusy() || !IsUploadReady())" Clicked="@UploadAll">@GetLocalizedString("Upload")</Button>
                    <Button Color="Color.Link" Class="b-file-cancel" Disabled="@(!IsBusy())" Clicked="@CancelUploadWithConfirm">@GetLocalizedString("Cancel")</Button>
                </Buttons>
            }
        </div>
    }
</div>


<CascadingValue Value="this" IsFixed>
    <_FilePickerConfirmModal @ref="_FilePickerConfirmModalRef" />
</CascadingValue>


@code {
    private RenderFragment fileComponentFragment => __builder =>
    {
        <FileEdit @ref="FileEdit" ElementId="@ElementId" Multiple="@Multiple" Placeholder="@Placeholder" Filter="@Filter" MaxChunkSize="@MaxChunkSize" MaxFileSize="@MaxFileSize" SegmentFetchTimeout="@SegmentFetchTimeout"
          Changed="@OnChanged" Started="@OnStarted" Ended="@OnEnded" Written="@Written" Progressed="@OnProgressed" AutoReset="@AutoReset" BrowseButtonLocalizer="@FilePickerLocalizer" @attributes="@Attributes">
            <ChildContent>
                @ChildTemplate
            </ChildContent>
            <Feedback>
                @Feedback
            </Feedback>
        </FileEdit>
    };

    private RenderFragment<IFileEntry> fileContentFragment => file => __builder =>
    {
        @if ( FileTemplate is not null )
        {
            @FileTemplate(new (file, EventCallback.Factory.Create<IFileEntry>(this, RemoveFileWithConfirm)))
        }
        else
        {
            <Button Size="Blazorise.Size.ExtraSmall" Color="Color.Danger" Float="Blazorise.Float.End" Disabled="IsBusy()" @onclick:stopPropagation Clicked="@(async () => await RemoveFileWithConfirm(file))"><Icon Name="IconName.Times"></Icon></Button>
            @if ( file.Status != FileEntryStatus.Uploaded )
            {
                <Button Size="Blazorise.Size.ExtraSmall" Color="Color.Primary" Float="Blazorise.Float.End" Disabled="IsBusy()" @onclick:stopPropagation Clicked="@(async() => await UploadFile(file))"><Icon Name="IconName.FileUpload"></Icon></Button>
            }
            <Span Class="b-file-name">@file.Name</Span>
            <Span Class="b-file-size">@GetFileSizeReadable(file)</Span>
            @if ( IsFileBeingUploaded( file ) )
            {
                var progressPercentage = GetProgressPercentage();
                <Progress Value="@progressPercentage">@progressPercentage %</Progress>
            }
            else
            {
                <Span Class="b-file-status">@GetFileStatus(file)</Span>
            }
        }
    };
}