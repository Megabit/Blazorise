namespace Blazorise
{
    public class Abbreviation : Blazorise.BaseElementComponent
    {
        public Abbreviation() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Title { get; set; }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class Accordion : Blazorise.BaseComponent
    {
        public Accordion() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class AccordionBody : Blazorise.BaseComponent
    {
        public AccordionBody() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected Blazorise.Utilities.ClassBuilder ContentClassBuilder { get; }
        protected string ContentClassNames { get; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        public Blazorise.AccordionItem ParentAccordionItem { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter(Name="AccordionItemVisible")]
        public bool Visible { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void DirtyClasses() { }
    }
    public class AccordionHeader : Blazorise.BaseComponent
    {
        public AccordionHeader() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs> Clicked { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        public Blazorise.AccordionItem ParentAccordionItem { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected System.Threading.Tasks.Task ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
    }
    public class AccordionItem : Blazorise.BaseComponent, System.IDisposable
    {
        public AccordionItem() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        public bool FirstInAccordion { get; }
        public bool LastInAccordion { get; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Accordion ParentAccordion { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Visible { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<bool> VisibleChanged { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void Dispose(bool disposing) { }
        protected override void OnInitialized() { }
        public System.Threading.Tasks.Task Toggle() { }
    }
    public class AccordionToggle : Blazorise.BaseComponent
    {
        public AccordionToggle() { }
        [Microsoft.AspNetCore.Components.CascadingParameter(Name="AccordionItemVisible")]
        public bool AccordionItemVisible { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs> Clicked { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter(Name="CollapseVisible")]
        public bool CollapseVisible { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Accordion ParentAccordion { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        public Blazorise.AccordionItem ParentAccordionItem { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Collapse ParentCollapse { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected System.Threading.Tasks.Task ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
    }
    public class Addon : Blazorise.BaseComponent
    {
        public Addon() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.AddonType AddonType { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Addons ParentAddons { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class AddonLabel : Blazorise.BaseComponent
    {
        public AddonLabel() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public enum AddonType
    {
        Body = 0,
        Start = 1,
        End = 2,
    }
    public class Addons : Blazorise.BaseComponent, System.IDisposable
    {
        public Addons() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Field ParentField { get; set; }
        protected virtual bool ParentIsHorizontal { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Size? Size { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        public Blazorise.Theme Theme { get; set; }
        protected Blazorise.Size ThemeSize { get; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void Dispose(bool disposing) { }
        protected override System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender) { }
        protected override System.Threading.Tasks.Task OnInitializedAsync() { }
    }
    public class Address : Blazorise.BaseElementComponent
    {
        public Address() { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class Alert : Blazorise.BaseComponent
    {
        public Alert() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Color Color { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Dismisable { get; set; }
        protected Blazorise.States.AlertState State { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Visible { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<bool> VisibleChanged { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        public System.Threading.Tasks.Task Hide() { }
        protected override void OnInitialized() { }
        public System.Threading.Tasks.Task Show() { }
        public System.Threading.Tasks.Task Toggle() { }
    }
    public class AlertDescription : Blazorise.BaseComponent
    {
        public AlertDescription() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Alert ParentAlert { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void OnInitialized() { }
    }
    public class AlertMessage : Blazorise.BaseComponent
    {
        public AlertMessage() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Alert ParentAlert { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void OnInitialized() { }
    }
    public class AlertStateEventArgs : System.EventArgs
    {
        public AlertStateEventArgs(bool visible) { }
        public bool Visible { get; }
    }
    public enum Alignment
    {
        Default = 0,
        Start = 1,
        Center = 2,
        End = 3,
    }
    public class Anchor : Blazorise.Link
    {
        public Anchor() { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class BLMouseEventArgs : System.EventArgs
    {
        public BLMouseEventArgs(Blazorise.MouseButton button, long clicks, System.Drawing.Point screen, System.Drawing.Point client, bool ctrl, bool shift, bool alt, bool meta) { }
        public bool AltKey { get; }
        public Blazorise.MouseButton Button { get; }
        public long Clicks { get; }
        public System.Drawing.Point Client { get; }
        public bool CtrlKey { get; }
        public bool MetaKey { get; }
        public System.Drawing.Point Screen { get; }
        public bool ShiftKey { get; }
    }
    public class Background : Blazorise.Enumeration<Blazorise.Background>, System.IEquatable<Blazorise.Background>
    {
        public static readonly Blazorise.Background Body;
        public static readonly Blazorise.Background Danger;
        public static readonly Blazorise.Background Dark;
        public static readonly Blazorise.Background Default;
        public static readonly Blazorise.Background Info;
        public static readonly Blazorise.Background Light;
        public static readonly Blazorise.Background Primary;
        public static readonly Blazorise.Background Secondary;
        public static readonly Blazorise.Background Success;
        public static readonly Blazorise.Background Transparent;
        public static readonly Blazorise.Background Warning;
        public static readonly Blazorise.Background White;
        public Background(string name) { }
        public static Blazorise.Background op_Implicit(string name) { }
    }
    public class Badge : Blazorise.BaseComponent
    {
        public Badge() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected bool Closable { get; }
        protected Blazorise.Utilities.ClassBuilder CloseClassBuilder { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback CloseClicked { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Color Color { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Link { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Pill { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected System.Threading.Tasks.Task OnCloseClickedHandler() { }
        protected System.Threading.Tasks.Task OnCloseKeyDownHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs args) { }
    }
    public class Bar : Blazorise.BaseComponent, Blazorise.IBreakpointActivator, System.IAsyncDisposable
    {
        public Bar() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Alignment Alignment { get; set; }
        protected System.Collections.Generic.List<Blazorise.BarItem> BarItems { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Breakpoint Breakpoint { get; set; }
        protected string BrokenStateString { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.BarCollapseMode CollapseMode { get; set; }
        protected string CollapseModeString { get; }
        [Microsoft.AspNetCore.Components.Inject]
        public Blazorise.Modules.IJSBreakpointModule JSBreakpointModule { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.LayoutHeader LayoutHeader { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.BarMenuToggleBehavior MenuToggleBehavior { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public virtual Blazorise.BarMode Mode { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Breakpoint NavigationBreakpoint { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Microsoft.AspNetCore.Components.NavigationManager NavigationManager { get; set; }
        protected override bool ShouldAutoGenerateId { get; }
        protected Blazorise.States.BarState State { get; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        public Blazorise.Theme Theme { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.ThemeContrast ThemeContrast { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public virtual bool Visible { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<bool> VisibleChanged { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override System.Threading.Tasks.ValueTask DisposeAsync(bool disposing) { }
        public System.Threading.Tasks.Task HideAllExcept(Blazorise.BarItem barItem) { }
        public System.Threading.Tasks.Task OnBreakpoint(bool broken) { }
        protected override System.Threading.Tasks.Task OnFirstAfterRenderAsync() { }
        protected override System.Threading.Tasks.Task OnInitializedAsync() { }
    }
    public class BarBrand : Blazorise.BaseComponent
    {
        public BarBrand() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.States.BarState ParentBarState { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public enum BarCollapseMode
    {
        Hide = 0,
        Small = 1,
    }
    public static class BarCollapseModee
    {
        public static Blazorise.IFluentBarCollapseModeOnBreakpoint Hide { get; }
        public static Blazorise.IFluentBarCollapseModeOnBreakpoint Small { get; }
    }
    public class BarDropdown : Blazorise.BaseComponent, System.IDisposable
    {
        public BarDropdown() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected bool HasSubmenu { get; }
        protected bool IsBarDropdownSubmenu { get; }
        protected bool IsUnderFirstMenu { get; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.BarDropdown ParentBarDropdown { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.States.BarDropdownState ParentBarDropdownState { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.BarItem ParentBarItem { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.States.BarItemState ParentBarItemState { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool RightAligned { get; set; }
        public string SelectedBarDropdownElementId { get; set; }
        protected override bool ShouldAutoGenerateId { get; }
        protected Blazorise.States.BarDropdownState State { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Visible { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<bool> VisibleChanged { get; set; }
        protected string VisibleString { get; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void Dispose(bool disposing) { }
        public System.Threading.Tasks.Task Hide(bool hideAll = false) { }
        protected override void OnAfterRender(bool firstRender) { }
        protected override System.Threading.Tasks.Task OnInitializedAsync() { }
        public System.Threading.Tasks.Task OnMouseEnterHandler() { }
        public System.Threading.Tasks.Task OnMouseLeaveHandler() { }
        public override System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) { }
        public System.Threading.Tasks.Task Show() { }
        public System.Threading.Tasks.Task Toggle(string dropdownToggleElementId) { }
    }
    public class BarDropdownDivider : Blazorise.BaseComponent
    {
        public BarDropdownDivider() { }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.States.BarState ParentBarState { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class BarDropdownItem : Blazorise.BaseComponent
    {
        public BarDropdownItem() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs> Clicked { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public double Indentation { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Match Match { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.BarDropdown ParentBarDropdown { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.States.BarDropdownState ParentDropdownState { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Target Target { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Title { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string To { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void BuildStyles(Blazorise.Utilities.StyleBuilder builder) { }
        protected System.Threading.Tasks.Task ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
    }
    public class BarDropdownMenu : Blazorise.BaseComponent
    {
        public BarDropdownMenu() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected Blazorise.Utilities.ClassBuilder ContainerClassBuilder { get; }
        protected string ContainerClassNames { get; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.BarDropdown ParentBarDropdown { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.States.BarDropdownState ParentDropdownState { get; set; }
        protected string VisibleString { get; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected virtual void BuildContainerClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void DirtyClasses() { }
    }
    public class BarDropdownStateEventArgs : System.EventArgs
    {
        public BarDropdownStateEventArgs(bool visible) { }
        public bool Visible { get; }
    }
    public class BarDropdownToggle : Blazorise.BaseComponent, Blazorise.ICloseActivator, System.IAsyncDisposable
    {
        public BarDropdownToggle() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs> Clicked { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool? Disabled { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public double Indentation { get; set; }
        protected bool IsDisabled { get; }
        [Microsoft.AspNetCore.Components.Inject]
        public Blazorise.Modules.IJSClosableModule JSClosableModule { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.BarDropdown ParentBarDropdown { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        public Blazorise.States.BarDropdownState ParentBarDropdownState { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.BarItem ParentBarItem { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        public Blazorise.States.BarItemState ParentBarItemState { get; set; }
        protected override bool ShouldAutoGenerateId { get; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void BuildStyles(Blazorise.Utilities.StyleBuilder builder) { }
        protected System.Threading.Tasks.Task ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
        public System.Threading.Tasks.Task Close(Blazorise.CloseReason closeReason) { }
        protected override System.Threading.Tasks.ValueTask DisposeAsync(bool disposing) { }
        protected virtual void HandleVisibilityStyles(bool visible) { }
        public System.Threading.Tasks.Task<bool> IsSafeToClose(string elementId, Blazorise.CloseReason closeReason, bool isChildClicked) { }
        protected System.Threading.Tasks.Task KeyDownHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs) { }
        protected override System.Threading.Tasks.Task OnFirstAfterRenderAsync() { }
    }
    public class BarEnd : Blazorise.BaseComponent
    {
        public BarEnd() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.States.BarState ParentBarState { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class BarIcon : Blazorise.BaseComponent
    {
        public BarIcon() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public object IconName { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.IconSize IconSize { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.IconStyle IconStyle { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class BarItem : Blazorise.BaseComponent, System.IAsyncDisposable
    {
        public BarItem() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Active { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Disabled { get; set; }
        protected bool HasDropdown { get; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Bar ParentBar { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.States.BarState ParentBarState { get; set; }
        protected Blazorise.States.BarItemState State { get; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override System.Threading.Tasks.ValueTask DisposeAsync(bool disposing) { }
        protected System.Threading.Tasks.Task HideDropdown() { }
        protected override System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender) { }
        protected override void OnInitialized() { }
    }
    public class BarLabel : Blazorise.BaseComponent
    {
        public BarLabel() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.States.BarState ParentBarState { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class BarLink : Blazorise.BaseComponent
    {
        public BarLink() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs> Clicked { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Func<string, bool> CustomMatch { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Match Match { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.States.BarItemState ParentBarItemState { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Target Target { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Title { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string To { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected System.Threading.Tasks.Task ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
        protected string GetRel() { }
    }
    public class BarMenu : Blazorise.BaseComponent
    {
        public BarMenu() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.States.BarState ParentBarState { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public enum BarMenuToggleBehavior
    {
        AllowSingleMenu = 0,
        AllowMultipleMenus = 1,
    }
    public enum BarMode
    {
        Horizontal = 0,
        VerticalPopout = 1,
        VerticalInline = 2,
        VerticalSmall = 3,
    }
    public class BarStart : Blazorise.BaseComponent
    {
        public BarStart() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.States.BarState ParentBarState { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class BarStateEventArgs : System.EventArgs
    {
        public BarStateEventArgs(bool visible) { }
        public bool Visible { get; }
    }
    public class BarToggler : Blazorise.BaseComponent
    {
        public BarToggler() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Bar Bar { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs> Clicked { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.BarTogglerMode Mode { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Bar ParentBar { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.States.BarState ParentBarState { get; set; }
        protected Blazorise.States.BarTogglerState State { get; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void BuildStyles(Blazorise.Utilities.StyleBuilder builder) { }
        protected System.Threading.Tasks.Task ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
        protected override System.Threading.Tasks.Task OnInitializedAsync() { }
    }
    public enum BarTogglerMode
    {
        Normal = 0,
        Popout = 1,
    }
    public abstract class BaseAfterRenderComponent : Microsoft.AspNetCore.Components.ComponentBase
    {
        protected BaseAfterRenderComponent() { }
        protected bool AsyncDisposed { get; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.IComponentDisposer ComponentDisposer { get; set; }
        protected bool Disposed { get; }
        protected bool Rendered { get; }
        public void Dispose() { }
        protected virtual void Dispose(bool disposing) { }
        public System.Threading.Tasks.ValueTask DisposeAsync() { }
        protected virtual System.Threading.Tasks.ValueTask DisposeAsync(bool disposing) { }
        protected void ExecuteAfterRender(System.Func<System.Threading.Tasks.Task> action) { }
        protected override System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender) { }
        protected virtual System.Threading.Tasks.Task OnFirstAfterRenderAsync() { }
    }
    public abstract class BaseCheckComponent<TValue> : Blazorise.BaseInputComponent<TValue>
    {
        protected BaseCheckComponent() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public TValue Checked { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<TValue> CheckedChanged { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Linq.Expressions.Expression<System.Func<TValue>> CheckedExpression { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Cursor Cursor { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Inline { get; set; }
        protected abstract string TrueValueName { get; }
        protected override TValue InternalValue { get; set; }
        protected override string GetFormatedValueExpression() { }
        protected virtual System.Threading.Tasks.Task OnChangeHandler(Microsoft.AspNetCore.Components.ChangeEventArgs eventArgs) { }
        protected override System.Threading.Tasks.Task OnInternalValueChanged(TValue value) { }
        protected override System.Threading.Tasks.Task<Blazorise.ParseValue<TValue>> ParseValueFromStringAsync(string value) { }
    }
    public abstract class BaseColumnComponent : Blazorise.BaseComponent, Blazorise.IColumnComponent
    {
        protected BaseColumnComponent() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.IFluentColumn ColumnSize { get; set; }
        protected bool InsideGrid { get; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        public Blazorise.Grid ParentGrid { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        public Blazorise.Row ParentRow { get; set; }
        protected virtual bool PreventColumnSize { get; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
    }
    public abstract class BaseComponent : Blazorise.BaseAfterRenderComponent
    {
        public BaseComponent() { }
        [Microsoft.AspNetCore.Components.Parameter(CaptureUnmatchedValues=true)]
        public System.Collections.Generic.Dictionary<string, object> Attributes { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Background Background { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.IFluentBorder Border { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.CharacterCasing Casing { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Class { get; set; }
        protected Blazorise.Utilities.ClassBuilder ClassBuilder { get; }
        public string ClassNames { get; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.IClassProvider ClassProvider { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Clearfix { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.IFluentDisplay Display { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string ElementId { get; set; }
        public Microsoft.AspNetCore.Components.ElementReference ElementRef { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.IFluentFlex Flex { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Float Float { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.IFluentGap Gap { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.IFluentSizing Height { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.IIdGenerator IdGenerator { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.IFluentSpacing Margin { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.IFluentOverflow Overflow { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.IFluentSpacing Padding { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.IFluentPosition Position { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Shadow Shadow { get; set; }
        protected virtual bool ShouldAutoGenerateId { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Style { get; set; }
        protected Blazorise.Utilities.StyleBuilder StyleBuilder { get; }
        public string StyleNames { get; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.IStyleProvider StyleProvider { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.TextAlignment TextAlignment { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.TextColor TextColor { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.TextOverflow TextOverflow { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.IFluentTextSize TextSize { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.TextTransform TextTransform { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.TextWeight TextWeight { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.VerticalAlignment VerticalAlignment { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Visibility Visibility { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.IFluentSizing Width { get; set; }
        protected virtual void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected virtual void BuildStyles(Blazorise.Utilities.StyleBuilder builder) { }
        protected virtual void DirtyClasses() { }
        protected virtual void DirtyStyles() { }
        protected override void Dispose(bool disposing) { }
        protected override System.Threading.Tasks.ValueTask DisposeAsync(bool disposing) { }
        protected override System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender) { }
        protected override void OnInitialized() { }
        public override System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) { }
        protected static Microsoft.JSInterop.DotNetObjectReference<T> CreateDotNetObjectRef<T>(T value)
            where T :  class { }
        protected static void DisposeDotNetObjectRef<T>(Microsoft.JSInterop.DotNetObjectReference<T> value)
            where T :  class { }
    }
    public abstract class BaseDraggableComponent : Blazorise.BaseComponent, System.IAsyncDisposable, System.IDisposable
    {
        protected BaseDraggableComponent() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Blazorise.BLMouseEventArgs> ContextMenu { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ContextMenuPreventDefault { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs> Drag { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs> DragEnd { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool DragEndPreventDefault { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs> DragEnter { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool DragEnterPreventDefault { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs> DragLeave { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool DragLeavePreventDefault { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs> DragOver { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool DragOverPreventDefault { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool DragPreventDefault { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs> DragStart { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool DragStartPreventDefault { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Draggable { get; set; }
        protected string DraggableString { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs> Drop { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool DropPreventDefault { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        public Blazorise.Modules.IJSDragDropModule JSDragDropModule { get; set; }
        protected override void Dispose(bool disposing) { }
        protected override System.Threading.Tasks.ValueTask DisposeAsync(bool disposing) { }
        protected virtual System.Threading.Tasks.Task OnContextMenuHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
        protected virtual System.Threading.Tasks.Task OnDragEndHandler(Microsoft.AspNetCore.Components.Web.DragEventArgs eventArgs) { }
        protected virtual System.Threading.Tasks.Task OnDragEnterHandler(Microsoft.AspNetCore.Components.Web.DragEventArgs eventArgs) { }
        [Microsoft.JSInterop.JSInvokable]
        public virtual System.Threading.Tasks.Task OnDragHandler(Microsoft.AspNetCore.Components.Web.DragEventArgs eventArgs) { }
        protected virtual System.Threading.Tasks.Task OnDragLeaveHandler(Microsoft.AspNetCore.Components.Web.DragEventArgs eventArgs) { }
        [Microsoft.JSInterop.JSInvokable]
        public virtual System.Threading.Tasks.Task OnDragOverHandler(Microsoft.AspNetCore.Components.Web.DragEventArgs eventArgs) { }
        protected virtual System.Threading.Tasks.Task OnDragStartHandler(Microsoft.AspNetCore.Components.Web.DragEventArgs eventArgs) { }
        protected virtual System.Threading.Tasks.Task OnDropHandler(Microsoft.AspNetCore.Components.Web.DragEventArgs eventArgs) { }
        protected override System.Threading.Tasks.Task OnFirstAfterRenderAsync() { }
    }
    public class BaseElementComponent : Blazorise.BaseComponent
    {
        public BaseElementComponent() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
    }
    public abstract class BaseFocusableContainerComponent : Blazorise.BaseComponent, Blazorise.IFocusableContainerComponent, System.IAsyncDisposable
    {
        protected BaseFocusableContainerComponent() { }
        protected System.Collections.Generic.IList<Blazorise.IFocusableComponent> FocusableComponents { get; }
        public bool HasFocusableComponents { get; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.IFocusableContainerComponent ParentFocusableContainer { get; set; }
        protected override System.Threading.Tasks.ValueTask DisposeAsync(bool disposing) { }
        protected System.Threading.Tasks.Task HandleFocusableComponent() { }
        public void NotifyFocusableComponentInitialized(Blazorise.IFocusableComponent focusableComponent) { }
        public void NotifyFocusableComponentRemoved(Blazorise.IFocusableComponent focusableComponent) { }
    }
    public abstract class BaseGridComponent : Blazorise.BaseComponent
    {
        protected BaseGridComponent() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
    }
    public abstract class BaseInputComponent<TValue> : Blazorise.BaseComponent, Blazorise.IFocusableComponent, Blazorise.IValidationInput, System.IDisposable
    {
        protected string formattedValueExpression;
        protected bool shouldGenerateFieldNames;
        protected BaseInputComponent() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Autofocus { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs> Blur { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected TValue CurrentValue { get; set; }
        protected string CurrentValueAsString { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Func<TValue> CustomValidationValue { get; set; }
        protected virtual TValue DefaultValue { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Disabled { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment Feedback { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs> FocusIn { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs> FocusOut { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Utilities.HtmlFieldPrefix HtmlFieldPrefix { get; set; }
        protected abstract TValue InternalValue { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs> KeyDown { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs> KeyPress { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs> KeyUp { get; set; }
        protected string NameAttributeValue { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs> OnFocus { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.BlazoriseOptions Options { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Addons ParentAddons { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.FieldBody ParentFieldBody { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.IFocusableContainerComponent ParentFocusableContainer { get; set; }
        protected bool ParentIsAddons { get; }
        protected bool ParentIsFieldBody { get; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Validation ParentValidation { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ReadOnly { get; set; }
        protected string ReadOnlyAsString { get; }
        protected override bool ShouldAutoGenerateId { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Size? Size { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int? TabIndex { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Theme Theme { get; set; }
        protected Blazorise.Size ThemeSize { get; }
        public virtual object ValidationValue { get; }
        [Microsoft.AspNetCore.Components.Inject]
        public new Blazorise.Modules.IJSUtilitiesModule JSUtilitiesModule { get; set; }
        protected System.Threading.Tasks.Task CurrentValueHandler(string value) { }
        protected override void Dispose(bool disposing) { }
        protected override System.Threading.Tasks.ValueTask DisposeAsync(bool disposing) { }
        public virtual System.Threading.Tasks.Task Focus(bool scrollToElement = true) { }
        protected virtual string FormatValueAsString(TValue value) { }
        protected abstract string GetFormatedValueExpression();
        protected void InitializeParameters() { }
        protected System.Threading.Tasks.Task InitializeValidation() { }
        protected virtual bool IsSameAsInternalValue(TValue value) { }
        protected virtual System.Threading.Tasks.Task OnBlurHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs) { }
        protected virtual System.Threading.Tasks.Task OnFocusHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs) { }
        protected virtual System.Threading.Tasks.Task OnFocusInHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs) { }
        protected virtual System.Threading.Tasks.Task OnFocusOutHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs) { }
        protected override void OnInitialized() { }
        protected abstract System.Threading.Tasks.Task OnInternalValueChanged(TValue value);
        protected virtual System.Threading.Tasks.Task OnKeyDownHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs) { }
        protected virtual System.Threading.Tasks.Task OnKeyPressHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs) { }
        protected virtual System.Threading.Tasks.Task OnKeyUpHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs) { }
        protected virtual void OnValidationStatusChanged(object sender, Blazorise.ValidationStatusChangedEventArgs eventArgs) { }
        protected abstract System.Threading.Tasks.Task<Blazorise.ParseValue<TValue>> ParseValueFromStringAsync(string value);
        protected virtual object PrepareValueForValidation(TValue value) { }
        protected virtual void ReleaseResources() { }
        public System.Threading.Tasks.Task Revalidate() { }
        public override System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) { }
    }
    public abstract class BaseLinkComponent : Blazorise.BaseComponent, System.IDisposable
    {
        protected BaseLinkComponent() { }
        protected bool Active { get; }
        protected string AriaDisabledString { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs> Clicked { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Func<string, bool> CustomMatch { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Disabled { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Match Match { get; set; }
        protected bool PreventDefault { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Stretched { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Target Target { get; set; }
        protected string TargetName { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Title { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string To { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Unstyled { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        public new Blazorise.Modules.IJSUtilitiesModule JSUtilitiesModule { get; set; }
        protected override void Dispose(bool disposing) { }
        protected string GetRel() { }
        protected string GetTo() { }
        protected System.Threading.Tasks.Task OnClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
        protected override void OnInitialized() { }
        protected override void OnParametersSet() { }
    }
    public abstract class BaseRowComponent : Blazorise.BaseComponent
    {
        protected BaseRowComponent() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
    }
    public abstract class BaseSizableFieldComponent : Blazorise.BaseColumnComponent, System.IDisposable
    {
        protected BaseSizableFieldComponent() { }
        protected virtual bool IsHorizontal { get; }
        protected virtual bool IsInsideField { get; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Field ParentField { get; set; }
        protected override void Dispose(bool disposing) { }
        protected override void OnInitialized() { }
    }
    public abstract class BaseTemplateContext<TItem>
    {
        public BaseTemplateContext(TItem item) { }
        public TItem Item { get; }
    }
    public abstract class BaseTextInput<TValue> : Blazorise.BaseInputComponent<TValue>, Blazorise.ISelectableComponent, System.IDisposable
    {
        protected BaseTextInput() { }
        protected string BindValueEventName { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Color Color { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool? Debounce { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int? DebounceInterval { get; set; }
        protected int DebounceIntervalValue { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool? Immediate { get; set; }
        protected Blazorise.Utilities.ValueDebouncer InputValueDebouncer { get; }
        protected bool IsDebounce { get; }
        protected bool IsImmediate { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Pattern { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Placeholder { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Plaintext { get; set; }
        protected override void Dispose(bool disposing) { }
        protected override System.Threading.Tasks.ValueTask DisposeAsync(bool disposing) { }
        protected override System.Threading.Tasks.Task OnBlurHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs) { }
        protected virtual System.Threading.Tasks.Task OnChangeHandler(Microsoft.AspNetCore.Components.ChangeEventArgs eventArgs) { }
        protected override void OnInitialized() { }
        protected virtual System.Threading.Tasks.Task OnInputHandler(Microsoft.AspNetCore.Components.ChangeEventArgs eventArgs) { }
        protected override System.Threading.Tasks.Task OnKeyPressHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs) { }
        protected override void ReleaseResources() { }
        public virtual System.Threading.Tasks.Task Select(bool focus = true) { }
    }
    public abstract class BaseTypographyComponent : Blazorise.BaseComponent
    {
        protected BaseTypographyComponent() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool CopyToClipboard { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Italic { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        public new Blazorise.Modules.IJSUtilitiesModule JSUtilitiesModule { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected System.Threading.Tasks.Task OnClickHandler() { }
    }
    public abstract class BaseValidationResult : Blazorise.BaseComponent, System.IDisposable
    {
        public BaseValidationResult() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Validation ParentValidation { get; set; }
        protected override void Dispose(bool disposing) { }
        protected override void OnParametersSet() { }
        protected virtual void OnValidationStatusChanged(object sender, Blazorise.ValidationStatusChangedEventArgs eventArgs) { }
    }
    public abstract class BehaviourProvider : Blazorise.IBehaviourProvider
    {
        protected BehaviourProvider() { }
        public abstract bool DataGridRowMultiSelectPreventClick { get; }
    }
    public class BlazoriseOptions
    {
        public BlazoriseOptions(System.IServiceProvider serviceProvider, System.Action<Blazorise.BlazoriseOptions> configureOptions) { }
        public bool AutoCloseParent { get; set; }
        public bool ChangeSliderOnHold { get; set; }
        public bool? Debounce { get; set; }
        public int? DebounceInterval { get; set; }
        public bool? EnableNumericStep { get; set; }
        public Blazorise.IconSize? IconSize { get; set; }
        public Blazorise.IconStyle? IconStyle { get; set; }
        public bool Immediate { get; set; }
        [System.Obsolete("LicenseKey property is deprecated, please use the ProductToken property instead.")]
        public string LicenseKey { get; set; }
        public bool? ModalFocusTrap { get; set; }
        public string ProductToken { get; set; }
        public bool SafeJsInvoke { get; set; }
        public System.IServiceProvider Services { get; }
        public bool ShowNumericStepButtons { get; set; }
        public int ThemeCacheSize { get; set; }
        public System.Func<string, System.Collections.Generic.IEnumerable<string>, string> ValidationMessageLocalizer { get; set; }
    }
    public class Blockquote : Blazorise.BaseTypographyComponent
    {
        public Blockquote() { }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class BlockquoteFooter : Blazorise.BaseTypographyComponent
    {
        public BlockquoteFooter() { }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public static class Border
    {
        public static Blazorise.IFluentBorderColorWithSide Danger { get; }
        public static Blazorise.IFluentBorderColorWithSide Dark { get; }
        public static Blazorise.IFluentBorderColorWithSide Info { get; }
        public static Blazorise.IFluentBorderWithAll Is0 { get; }
        public static Blazorise.IFluentBorderWithAll Is1 { get; }
        public static Blazorise.IFluentBorderWithAll Is2 { get; }
        public static Blazorise.IFluentBorderWithAll Is3 { get; }
        public static Blazorise.IFluentBorderWithAll Is4 { get; }
        public static Blazorise.IFluentBorderWithAll Is5 { get; }
        public static Blazorise.IFluentBorderColorWithSide Light { get; }
        public static Blazorise.IFluentBorderWithAll OnBottom { get; }
        public static Blazorise.IFluentBorderWithAll OnEnd { get; }
        public static Blazorise.IFluentBorderWithAll OnStart { get; }
        public static Blazorise.IFluentBorderWithAll OnTop { get; }
        public static Blazorise.IFluentBorderColorWithSide Primary { get; }
        public static Blazorise.IFluentBorderWithAll Rounded { get; }
        public static Blazorise.IFluentBorderWithAll RoundedBottom { get; }
        public static Blazorise.IFluentBorderWithAll RoundedCircle { get; }
        public static Blazorise.IFluentBorderWithAll RoundedEnd { get; }
        public static Blazorise.IFluentBorderWithAll RoundedPill { get; }
        public static Blazorise.IFluentBorderWithAll RoundedStart { get; }
        public static Blazorise.IFluentBorderWithAll RoundedTop { get; }
        public static Blazorise.IFluentBorderWithAll RoundedZero { get; }
        public static Blazorise.IFluentBorderColorWithSide Secondary { get; }
        public static Blazorise.IFluentBorderColorWithSide Success { get; }
        public static Blazorise.IFluentBorderColorWithSide Warning { get; }
        public static Blazorise.IFluentBorderColorWithSide White { get; }
    }
    public struct BorderColor : System.IEquatable<Blazorise.BorderColor>
    {
        public static readonly Blazorise.BorderColor Danger;
        public static readonly Blazorise.BorderColor Dark;
        public static readonly Blazorise.BorderColor Info;
        public static readonly Blazorise.BorderColor Light;
        public static readonly Blazorise.BorderColor None;
        public static readonly Blazorise.BorderColor Primary;
        public static readonly Blazorise.BorderColor Secondary;
        public static readonly Blazorise.BorderColor Success;
        public static readonly Blazorise.BorderColor Warning;
        public static readonly Blazorise.BorderColor White;
        public BorderColor(string name) { }
        public string Name { get; }
    }
    public enum BorderRadius
    {
        Default = 0,
        Rounded = 1,
        RoundedTop = 2,
        RoundedEnd = 3,
        RoundedBottom = 4,
        RoundedStart = 5,
        RoundedCircle = 6,
        RoundedPill = 7,
        RoundedZero = 8,
    }
    public enum BorderSide
    {
        All = 0,
        Top = 1,
        End = 2,
        Bottom = 3,
        Start = 4,
    }
    public enum BorderSize
    {
        Default = 0,
        Is0 = 1,
        Is1 = 2,
        Is2 = 3,
        Is3 = 4,
        Is4 = 5,
        Is5 = 6,
    }
    public class Breadcrumb : Blazorise.BaseComponent
    {
        public Breadcrumb() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.BreadcrumbMode Mode { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class BreadcrumbItem : Blazorise.BaseComponent, System.IDisposable
    {
        public BreadcrumbItem() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Active { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Breadcrumb ParentBreadcrumb { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void Dispose(bool disposing) { }
        protected override System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender) { }
        protected override void OnInitialized() { }
        protected virtual void OnLocationChanged(object sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs eventArgs) { }
    }
    public class BreadcrumbLink : Blazorise.BaseComponent
    {
        public BreadcrumbLink() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs> Clicked { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Disabled { get; set; }
        protected bool IsActive { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Match Match { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.BreadcrumbItem ParentBreadcrumbItem { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Target Target { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Title { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string To { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected System.Threading.Tasks.Task ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
        protected string GetRel() { }
        protected override void OnInitialized() { }
    }
    public enum BreadcrumbMode
    {
        None = 0,
        Auto = 1,
    }
    public enum Breakpoint
    {
        None = 0,
        Mobile = 1,
        ExtraSmall = 2,
        Tablet = 3,
        Small = 4,
        Desktop = 5,
        Medium = 6,
        Widescreen = 7,
        Large = 8,
        FullHD = 9,
        ExtraLarge = 10,
        QuadHD = 11,
        ExtraExtraLarge = 12,
    }
    public class BreakpointActivatorAdapter
    {
        public BreakpointActivatorAdapter(Blazorise.IBreakpointActivator component) { }
        [Microsoft.JSInterop.JSInvokable]
        public string GetElementId() { }
        [Microsoft.JSInterop.JSInvokable]
        public System.Threading.Tasks.Task OnBreakpoint(string breakpoint) { }
        public static bool IsBroken(Blazorise.Breakpoint checkBreakpoint, string currentBreakpointString) { }
    }
    public class Button : Blazorise.BaseComponent, System.IAsyncDisposable
    {
        public Button() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Active { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Block { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs> Clicked { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Color Color { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Windows.Input.ICommand Command { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public object CommandParameter { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Disabled { get; set; }
        protected bool IsAddons { get; }
        protected bool IsDisabled { get; }
        [Microsoft.AspNetCore.Components.Inject]
        public Blazorise.Modules.IJSButtonModule JSModule { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Loading { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment LoadingTemplate { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Outline { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Addons ParentAddons { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Buttons ParentButtons { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Dropdown ParentDropdown { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.States.DropdownState ParentDropdownState { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Field ParentField { get; set; }
        protected bool ParentIsField { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool PreventDefaultOnSubmit { get; set; }
        protected override bool ShouldAutoGenerateId { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Size? Size { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool StretchedLink { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int? TabIndex { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Target Target { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        public Blazorise.Theme Theme { get; set; }
        protected Blazorise.Size ThemeSize { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string To { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.ButtonType Type { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        public new Blazorise.Modules.IJSUtilitiesModule JSUtilitiesModule { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder) { }
        protected System.Threading.Tasks.Task ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
        protected override System.Threading.Tasks.ValueTask DisposeAsync(bool disposing) { }
        public System.Threading.Tasks.Task Focus(bool scrollToElement = true) { }
        protected virtual void OnCanExecuteChanged(object sender, System.EventArgs eventArgs) { }
        protected override void OnInitialized() { }
        protected virtual Microsoft.AspNetCore.Components.RenderFragment ProvideDefaultLoadingTemplate() { }
    }
    public enum ButtonType
    {
        Button = 0,
        Submit = 1,
        Reset = 2,
        Link = 3,
    }
    public class Buttons : Blazorise.BaseComponent
    {
        public Buttons() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Orientation Orientation { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.ButtonsRole Role { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Size Size { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public enum ButtonsRole
    {
        Addons = 0,
        Toolbar = 1,
    }
    public class Card : Blazorise.BaseComponent
    {
        public Card() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected bool InsideDeck { get; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.CardDeck ParentCardDeck { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool WhiteText { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class CardActions : Blazorise.BaseComponent
    {
        public CardActions() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class CardBody : Blazorise.BaseComponent
    {
        public CardBody() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class CardDeck : Blazorise.BaseComponent
    {
        public CardDeck() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class CardFooter : Blazorise.BaseComponent
    {
        public CardFooter() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class CardGroup : Blazorise.BaseComponent
    {
        public CardGroup() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class CardHeader : Blazorise.BaseComponent
    {
        public CardHeader() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class CardImage : Blazorise.BaseComponent
    {
        public CardImage() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Alt { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Source { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class CardLink : Blazorise.BaseLinkComponent
    {
        public CardLink() { }
        [Microsoft.AspNetCore.Components.Parameter]
        [System.Obsolete("CardLink: Alt parameter is deprecated, please use the Title parameter instead.")]
        public string Alt { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        [System.Obsolete("CardLink: Source parameter is deprecated, please use the To parameter instead.")]
        public string Source { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void OnInitialized() { }
    }
    public class CardSubtitle : Blazorise.BaseTypographyComponent
    {
        public CardSubtitle() { }
        protected bool InsideHeader { get; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        public Blazorise.CardHeader ParentCardHeader { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int Size { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class CardText : Blazorise.BaseTypographyComponent
    {
        public CardText() { }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class CardTitle : Blazorise.BaseTypographyComponent
    {
        public CardTitle() { }
        protected bool InsideHeader { get; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        public Blazorise.CardHeader ParentCardHeader { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int? Size { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class Carousel : Blazorise.BaseComponent, System.IDisposable
    {
        protected readonly System.Collections.Generic.List<Blazorise.CarouselSlide> carouselSlides;
        public Carousel() { }
        public bool AnimationRunning { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool AutoRepeat { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Autoplay { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Crossfade { get; set; }
        protected Blazorise.CarouselDirection Direction { get; set; }
        protected Blazorise.Utilities.ClassBuilder IndicatorsClassBuilder { get; }
        protected string IndicatorsClassNames { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public double Interval { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.Localization.ITextLocalizer<Blazorise.Carousel> Localizer { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.Localization.ITextLocalizerService LocalizerService { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Localization.TextLocalizerHandler NextButtonLocalizer { get; set; }
        protected string NextButtonString { get; }
        protected int NumberOfSlides { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Localization.TextLocalizerHandler PreviousButtonLocalizer { get; set; }
        protected string PreviousButtonString { get; }
        public int PreviouslySelectedSlideIndex { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string SelectedSlide { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<string> SelectedSlideChanged { get; set; }
        public int SelectedSlideIndex { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ShowControls { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ShowIndicators { get; set; }
        protected Blazorise.Utilities.ClassBuilder SlidesClassBuilder { get; }
        protected string SlidesClassNames { get; }
        protected Blazorise.States.CarouselState State { get; }
        public System.Timers.Timer Timer { get; set; }
        public System.Timers.Timer TransitionTimer { get; set; }
        protected virtual System.Threading.Tasks.Task AnimationEnd(Blazorise.CarouselSlide slide) { }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void Dispose(bool disposing) { }
        protected override System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender) { }
        protected override void OnInitialized() { }
        protected override void OnParametersSet() { }
        protected virtual System.Threading.Tasks.Task RunAnimations() { }
        public System.Threading.Tasks.Task Select(string name) { }
        public System.Threading.Tasks.Task SelectNext() { }
        public System.Threading.Tasks.Task SelectPrevious() { }
        public int SlideIndex(string slideName) { }
    }
    public enum CarouselDirection
    {
        Previous = 0,
        Next = 1,
    }
    public class CarouselSlide : Blazorise.BaseComponent, System.IDisposable
    {
        public CarouselSlide() { }
        protected virtual int AnimationTime { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected Blazorise.Utilities.ClassBuilder IndicatorClassBuilder { get; }
        public string IndicatorClassNames { get; }
        public string IndicatorStyleNames { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int? Interval { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Name { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Carousel ParentCarousel { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.States.CarouselState ParentCarouselState { get; set; }
        public System.Threading.Tasks.Task Activate() { }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void DirtyClasses() { }
        protected override void Dispose(bool disposing) { }
        protected override void OnInitialized() { }
    }
    public enum CharacterCasing
    {
        Normal = 0,
        Upper = 1,
        Lower = 2,
        Title = 3,
    }
    public class Check<TValue> : Blazorise.BaseCheckComponent<TValue>
    {
        public Check() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool? Indeterminate { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Name { get; set; }
        protected override string TrueValueName { get; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        public override System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) { }
    }
    public abstract class ClassProvider : Blazorise.IClassProvider
    {
        protected ClassProvider() { }
        public abstract string Provider { get; }
        public abstract bool UseCustomInputStyles { get; set; }
        public abstract string Accordion();
        public abstract string AccordionBody();
        public abstract string AccordionBodyActive(bool active);
        public abstract string AccordionBodyContent(bool firstInAccordion, bool lastInAccordion);
        public abstract string AccordionHeader();
        public abstract string AccordionItem();
        public abstract string AccordionItemActive(bool active);
        public abstract string AccordionToggle();
        public abstract string AccordionToggleCollapsed(bool collapsed);
        public abstract string Active();
        public abstract string Addon(Blazorise.AddonType addonType);
        public abstract string AddonLabel();
        public abstract string AddonSize(Blazorise.Size size);
        public abstract string Addons();
        public abstract string AddonsHasButton(bool hasButton);
        public abstract string AddonsSize(Blazorise.Size size);
        public abstract string Alert();
        public abstract string AlertColor(Blazorise.Color color);
        public abstract string AlertDescription();
        public abstract string AlertDismisable(bool dismissable);
        public abstract string AlertFade(bool dismissable);
        public abstract string AlertHasDescription(bool hasDescription);
        public abstract string AlertHasMessage(bool hasMessage);
        public abstract string AlertMessage();
        public abstract string AlertShow(bool dismissable, bool visible);
        public virtual string AutocompleteItemFocus(bool focus) { }
        public abstract string BackgroundColor(Blazorise.Background background);
        public abstract string Badge();
        public abstract string BadgeClose();
        public abstract string BadgeCloseColor(Blazorise.Color color);
        public abstract string BadgeColor(Blazorise.Color color);
        public abstract string BadgePill(bool pill);
        public abstract string Bar(Blazorise.BarMode mode);
        public abstract string BarAlignment(Blazorise.BarMode mode, Blazorise.Alignment alignment);
        public abstract string BarBrand(Blazorise.BarMode mode);
        public abstract string BarBreakpoint(Blazorise.BarMode mode, Blazorise.Breakpoint breakpoint);
        public abstract string BarCollapsed(Blazorise.BarMode mode, bool visible);
        public abstract string BarDropdown(Blazorise.BarMode mode, bool isBarDropDownSubmenu);
        public abstract string BarDropdownDivider(Blazorise.BarMode mode);
        public abstract string BarDropdownItem(Blazorise.BarMode mode);
        public abstract string BarDropdownMenu(Blazorise.BarMode mode);
        public abstract string BarDropdownMenuContainer(Blazorise.BarMode mode);
        public abstract string BarDropdownMenuRight(Blazorise.BarMode mode, bool rightAligned);
        public abstract string BarDropdownMenuVisible(Blazorise.BarMode mode, bool visible);
        public abstract string BarDropdownShow(Blazorise.BarMode mode, bool show);
        public abstract string BarDropdownToggle(Blazorise.BarMode mode, bool isBarDropDownSubmenu);
        public abstract string BarDropdownToggleDisabled(Blazorise.BarMode mode, bool isBarDropDownSubmenu, bool disabled);
        public abstract string BarEnd(Blazorise.BarMode mode);
        public abstract string BarInitial(Blazorise.BarMode mode, bool initial);
        public abstract string BarItem(Blazorise.BarMode mode, bool hasDropdown);
        public abstract string BarItemActive(Blazorise.BarMode mode, bool active);
        public abstract string BarItemDisabled(Blazorise.BarMode mode, bool disabled);
        public abstract string BarItemHasDropdown(Blazorise.BarMode mode, bool hasDropdown);
        public abstract string BarLabel(Blazorise.BarMode mode);
        public abstract string BarLink(Blazorise.BarMode mode);
        public abstract string BarLinkDisabled(Blazorise.BarMode mode, bool disabled);
        public abstract string BarMenu(Blazorise.BarMode mode);
        public abstract string BarMenuShow(Blazorise.BarMode mode, bool show);
        public abstract string BarMode(Blazorise.BarMode mode);
        public abstract string BarStart(Blazorise.BarMode mode);
        public abstract string BarThemeContrast(Blazorise.BarMode mode, Blazorise.ThemeContrast themeContrast);
        public abstract string BarToggler(Blazorise.BarMode mode, Blazorise.BarTogglerMode togglerMode);
        public abstract string BarTogglerCollapsed(Blazorise.BarMode mode, Blazorise.BarTogglerMode togglerMode, bool isShow);
        public abstract string BarTogglerIcon(Blazorise.BarMode mode);
        public abstract string Blockquote();
        public abstract string BlockquoteFooter();
        public abstract string Border(Blazorise.BorderSize borderSize, [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "borderSide",
                "borderColor"})] System.Collections.Generic.IEnumerable<System.ValueTuple<Blazorise.BorderSide, Blazorise.BorderColor>> rules);
        public abstract string Border(Blazorise.BorderSize borderSize, Blazorise.BorderSide borderSide, Blazorise.BorderColor borderColor);
        public virtual string BorderRadius(Blazorise.BorderRadius borderRadius) { }
        public abstract string Breadcrumb();
        public abstract string BreadcrumbItem();
        public abstract string BreadcrumbItemActive(bool active);
        public abstract string BreadcrumbLink();
        public abstract string Button(bool outline);
        public abstract string ButtonActive(bool outline, bool active);
        public abstract string ButtonBlock(bool outline, bool block);
        public abstract string ButtonColor(Blazorise.Color color, bool outline);
        public abstract string ButtonDisabled(bool outline, bool disabled);
        public abstract string ButtonLoading(bool outline, bool loading);
        public abstract string ButtonSize(Blazorise.Size size, bool outline);
        public abstract string ButtonStretchedLink(bool stretched);
        public abstract string Buttons(Blazorise.ButtonsRole role, Blazorise.Orientation orientation);
        public abstract string ButtonsSize(Blazorise.Size size);
        public abstract string Card();
        public abstract string CardActions();
        public abstract string CardBody();
        public abstract string CardDeck();
        public abstract string CardFooter();
        public abstract string CardGroup();
        public abstract string CardHeader();
        public abstract string CardImage();
        public abstract string CardLink();
        public abstract string CardLinkActive(bool active);
        public abstract string CardLinkUnstyled(bool unstyled);
        public abstract string CardSubtitle(bool insideHeader);
        public abstract string CardSubtitleSize(bool insideHeader, int size);
        public abstract string CardText();
        public abstract string CardTitle(bool insideHeader);
        public abstract string CardTitleSize(bool insideHeader, int? size);
        public abstract string CardWhiteText(bool whiteText);
        public abstract string Carousel();
        public abstract string CarouselCaption();
        public abstract string CarouselFade(bool fade);
        public abstract string CarouselIndicator();
        public abstract string CarouselIndicatorActive(bool active);
        public abstract string CarouselIndicators();
        public abstract string CarouselSlide();
        public abstract string CarouselSlideActive(bool active);
        public abstract string CarouselSlideIndex(int activeSlideIndex, int slideindex, int totalSlides);
        public abstract string CarouselSlideSlidingLeft(bool left);
        public abstract string CarouselSlideSlidingNext(bool next);
        public abstract string CarouselSlideSlidingPrev(bool previous);
        public abstract string CarouselSlideSlidingRight(bool right);
        public abstract string CarouselSlides();
        public virtual string Casing(Blazorise.CharacterCasing characterCasing) { }
        public abstract string Chart();
        public abstract string Check();
        public abstract string CheckCursor(Blazorise.Cursor cursor);
        public abstract string CheckInline(bool inline);
        public abstract string CheckSize(Blazorise.Size size);
        public abstract string CheckValidation(Blazorise.ValidationStatus validationStatus);
        public virtual string Clearfix() { }
        public abstract string CloseButton();
        public abstract string Code();
        public abstract string Collapse(bool accordion);
        public abstract string CollapseActive(bool accordion, bool active);
        public abstract string CollapseBody(bool accordion);
        public abstract string CollapseBodyActive(bool accordion, bool active);
        public abstract string CollapseBodyContent(bool accordion, bool firstInAccordion, bool lastInAccordion);
        public abstract string CollapseHeader(bool accordion);
        public abstract string Collapsed();
        public abstract string ColorEdit();
        public abstract string ColorEditSize(Blazorise.Size size);
        public abstract string ColorPicker();
        public abstract string ColorPickerSize(Blazorise.Size size);
        public abstract string Column(bool grid, bool hasSizes);
        public abstract string Column(bool grid, System.Collections.Generic.IEnumerable<Blazorise.ColumnDefinition> columnDefinitions);
        public abstract string Column(bool grid, Blazorise.ColumnWidth columnWidth, Blazorise.Breakpoint breakpoint, bool offset);
        public abstract string Container(Blazorise.Breakpoint breakpoint);
        public abstract string ContainerFluid();
        public abstract string ControlCheck(Blazorise.ControlRole role);
        public abstract string ControlFile(Blazorise.ControlRole role);
        public abstract string ControlInline(Blazorise.ControlRole role, bool inline);
        public abstract string ControlRadio(Blazorise.ControlRole role);
        public abstract string ControlSwitch(Blazorise.ControlRole role);
        public abstract string ControlText(Blazorise.ControlRole role);
        public abstract string DateEdit(bool plaintext);
        public abstract string DateEditColor(Blazorise.Color color);
        public abstract string DateEditSize(Blazorise.Size size);
        public abstract string DateEditValidation(Blazorise.ValidationStatus validationStatus);
        public abstract string DatePicker(bool plaintext);
        public abstract string DatePickerColor(Blazorise.Color color);
        public abstract string DatePickerSize(Blazorise.Size size);
        public abstract string DatePickerValidation(Blazorise.ValidationStatus validationStatus);
        public abstract string DescriptionList();
        public abstract string DescriptionListDefinition();
        public abstract string DescriptionListTerm();
        public abstract string Disabled();
        public abstract string Display(Blazorise.DisplayType displayType, Blazorise.DisplayDefinition displayDefinition);
        public virtual string Display(Blazorise.DisplayType displayType, System.Collections.Generic.IEnumerable<Blazorise.DisplayDefinition> displayDefinitions) { }
        public abstract string DisplayHeadingSize(Blazorise.DisplayHeadingSize displayHeadingSize);
        public abstract string Divider();
        public abstract string DividerType(Blazorise.DividerType dividerType);
        public abstract string Dropdown(bool isDropdownSubmenu);
        public abstract string DropdownDirection(Blazorise.Direction direction);
        public abstract string DropdownDisabled(bool disabled);
        public abstract string DropdownDivider();
        public abstract string DropdownFixedHeaderVisible(bool visible);
        public abstract string DropdownGroup(bool group);
        public abstract string DropdownHeader();
        public abstract string DropdownItem();
        public abstract string DropdownItemActive(bool active);
        public abstract string DropdownItemDisabled(bool disabled);
        public abstract string DropdownMenu();
        public abstract string DropdownMenuPositionStrategy(Blazorise.DropdownPositionStrategy dropdownPositionStrategy);
        public abstract string DropdownMenuRight(bool rightAligned);
        public abstract string DropdownMenuScrollable(bool scrollable);
        public abstract string DropdownMenuSelector();
        public abstract string DropdownMenuVisible(bool visible);
        public abstract string DropdownObserverShow();
        public abstract string DropdownRight(bool rightAligned);
        public abstract string DropdownShow(bool show);
        public abstract string DropdownToggle(bool isDropdownSubmenu, bool outline);
        public abstract string DropdownToggleColor(Blazorise.Color color, bool outline);
        public abstract string DropdownToggleIcon(bool visible);
        public abstract string DropdownToggleSelector(bool isDropdownSubmenu);
        public abstract string DropdownToggleSize(Blazorise.Size size, bool outline);
        public abstract string DropdownToggleSplit(bool split);
        public abstract string Fade();
        public abstract string Field();
        public abstract string FieldBody();
        public abstract string FieldColumn();
        public abstract string FieldHelp();
        public abstract string FieldHorizontal(bool horizontal);
        public abstract string FieldJustifyContent(Blazorise.JustifyContent justifyContent);
        public abstract string FieldLabel(bool horizontal);
        public abstract string FieldLabelRequiredIndicator(bool requiredIndicator);
        public abstract string FieldLabelScreenreader(Blazorise.Screenreader screenreader);
        public abstract string FieldSize(Blazorise.Size size);
        public abstract string FieldValidation(Blazorise.ValidationStatus validationStatus);
        public abstract string Fields();
        public abstract string FieldsBody();
        public abstract string FieldsColumn();
        public abstract string Figure();
        public abstract string FigureCaption();
        public abstract string FigureImage();
        public abstract string FigureImageRounded(bool rounded);
        public abstract string FigureSize(Blazorise.FigureSize figureSize);
        public abstract string FileEdit();
        public abstract string FileEditSize(Blazorise.Size size);
        public abstract string FileEditValidation(Blazorise.ValidationStatus validationStatus);
        public abstract string Flex(Blazorise.FlexDefinition flexDefinition);
        public abstract string Flex(Blazorise.FlexType flexType);
        public abstract string Flex(Blazorise.FlexType flexType, System.Collections.Generic.IEnumerable<Blazorise.FlexDefinition> flexDefinitions);
        public virtual string Float(Blazorise.Float @float) { }
        public abstract string FocusTrap();
        public abstract string Gap(Blazorise.GapSize gapSize, Blazorise.GapSide gapSide);
        public abstract string Gap(Blazorise.GapSize gapSize, System.Collections.Generic.IEnumerable<Blazorise.GapSide> rules);
        public abstract string Grid();
        public abstract string GridColumns(Blazorise.GridColumnsSize gridColumns, Blazorise.GridColumnsDefinition gridColumnsDefinition);
        public abstract string GridRows(Blazorise.GridRowsSize gridRows, Blazorise.GridRowsDefinition gridRowsDefinition);
        public abstract string HeadingSize(Blazorise.HeadingSize headingSize);
        public abstract string Help();
        public abstract string Image();
        public abstract string ImageFluid(bool fluid);
        public abstract string Inline();
        public abstract string InputMask(bool plaintext);
        public abstract string InputMaskColor(Blazorise.Color color);
        public abstract string InputMaskSize(Blazorise.Size size);
        public abstract string InputMaskValidation(Blazorise.ValidationStatus validationStatus);
        public abstract string Jumbotron();
        public abstract string JumbotronBackground(Blazorise.Background background);
        public abstract string JumbotronSubtitle();
        public abstract string JumbotronTitle(Blazorise.JumbotronTitleSize jumbotronTitleSize);
        public abstract string LabelCursor(Blazorise.Cursor cursor);
        public abstract string LabelType(Blazorise.LabelType labelType);
        public virtual string Layout() { }
        public virtual string LayoutContent() { }
        public virtual string LayoutFooter() { }
        public virtual string LayoutFooterFixed(bool @fixed) { }
        public virtual string LayoutHasSider(bool hasSider) { }
        public virtual string LayoutHeader() { }
        public virtual string LayoutHeaderFixed(bool @fixed) { }
        public virtual string LayoutLoading() { }
        public virtual string LayoutRoot(bool root) { }
        public virtual string LayoutSider() { }
        public virtual string LayoutSiderContent() { }
        public abstract string Lead();
        public abstract string Link();
        public abstract string LinkActive(bool active);
        public abstract string LinkDisabled(bool disabled);
        public abstract string LinkStretched(bool stretched);
        public abstract string LinkUnstyled(bool unstyled);
        public abstract string ListGroup();
        public abstract string ListGroupFlush(bool flush);
        public abstract string ListGroupItem();
        public abstract string ListGroupItemActive(bool active);
        public abstract string ListGroupItemColor(Blazorise.Color color, bool selectable, bool active);
        public abstract string ListGroupItemDisabled(bool disabled);
        public abstract string ListGroupItemSelectable(bool selectable);
        public abstract string ListGroupScrollable(bool scrollable);
        public abstract string Media();
        public abstract string MediaBody();
        public abstract string MediaLeft();
        public abstract string MediaRight();
        public abstract string MemoEdit(bool plaintext);
        public abstract string MemoEditSize(Blazorise.Size size);
        public abstract string MemoEditValidation(Blazorise.ValidationStatus validationStatus);
        public abstract string Modal();
        public abstract string ModalBackdrop();
        public abstract string ModalBackdropFade();
        public abstract string ModalBackdropVisible(bool visible);
        public abstract string ModalBody();
        public abstract string ModalCentered(bool centered);
        public abstract string ModalContent(bool dialog);
        public abstract string ModalContentCentered(bool centered);
        public abstract string ModalContentScrollable(bool scrollable);
        public abstract string ModalContentSize(Blazorise.ModalSize modalSize);
        public abstract string ModalFade(bool showing, bool hiding);
        public abstract string ModalFooter();
        public abstract string ModalHeader();
        public abstract string ModalSize(Blazorise.ModalSize modalSize);
        public abstract string ModalTitle();
        public abstract string ModalVisible(bool visible);
        public abstract string NumericEdit(bool plaintext);
        public abstract string NumericEditColor(Blazorise.Color color);
        public abstract string NumericEditSize(Blazorise.Size size);
        public abstract string NumericEditValidation(Blazorise.ValidationStatus validationStatus);
        public abstract string NumericPicker(bool plaintext);
        public abstract string NumericPickerColor(Blazorise.Color color);
        public abstract string NumericPickerSize(Blazorise.Size size);
        public abstract string NumericPickerValidation(Blazorise.ValidationStatus validationStatus);
        public abstract string Offcanvas();
        public abstract string OffcanvasBackdrop();
        public abstract string OffcanvasBackdropFade(bool showing, bool hiding);
        public abstract string OffcanvasBackdropVisible(bool visible);
        public abstract string OffcanvasBody();
        public abstract string OffcanvasFade(bool showing, bool hiding);
        public abstract string OffcanvasFooter();
        public abstract string OffcanvasHeader();
        public abstract string OffcanvasPlacement(Blazorise.Placement placement, bool visible);
        public abstract string OffcanvasVisible(bool visible);
        public abstract string OrderedList();
        public abstract string OrderedListType(Blazorise.OrderedListType orderedListType);
        public abstract string OrderedListUnstyled(bool unstyled);
        public abstract string Overflow(Blazorise.OverflowType overflowType, Blazorise.OverflowType secondOverflowType);
        public abstract string Pagination();
        public abstract string PaginationAlignment(Blazorise.Alignment alignment);
        public abstract string PaginationBackgroundColor(Blazorise.Background background);
        public abstract string PaginationItem();
        public abstract string PaginationItemActive(bool active);
        public abstract string PaginationItemDisabled(bool disabled);
        public abstract string PaginationLink();
        public abstract string PaginationLinkActive(bool active);
        public abstract string PaginationLinkDisabled(bool disabled);
        public abstract string PaginationLinkSize(Blazorise.Size size);
        public abstract string PaginationSize(Blazorise.Size size);
        public abstract string Paragraph();
        public abstract string ParagraphColor(Blazorise.TextColor textColor);
        public abstract string Position(Blazorise.PositionType positionType, [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "edgeType",
                "edgeOffset"})] System.Collections.Generic.IEnumerable<System.ValueTuple<Blazorise.PositionEdgeType, int>> edges, Blazorise.PositionTranslateType translateType);
        public abstract string Position(Blazorise.PositionType positionType, Blazorise.PositionEdgeType edgeType, int edgeOffset, Blazorise.PositionTranslateType translateType);
        public abstract string Progress();
        public abstract string ProgressAnimated(bool animated);
        public abstract string ProgressBar();
        public abstract string ProgressBarAnimated(bool animated);
        public abstract string ProgressBarColor(Blazorise.Color color);
        public abstract string ProgressBarIndeterminate(bool indeterminate);
        public abstract string ProgressBarSize(Blazorise.Size size);
        public abstract string ProgressBarStriped(bool striped);
        public abstract string ProgressBarWidth(int width);
        public abstract string ProgressColor(Blazorise.Color color);
        public abstract string ProgressIndeterminate(bool indeterminate);
        public abstract string ProgressSize(Blazorise.Size size);
        public abstract string ProgressStriped(bool stripped);
        public abstract string ProgressWidth(int width);
        public abstract string Radio(bool button);
        public abstract string RadioCursor(Blazorise.Cursor cursor);
        public abstract string RadioGroup(bool buttons, Blazorise.Orientation orientation);
        public abstract string RadioGroupSize(bool buttons, Blazorise.Orientation orientation, Blazorise.Size size);
        public abstract string RadioGroupValidation(Blazorise.ValidationStatus validationStatus);
        public abstract string RadioInline(bool inline);
        public abstract string RadioSize(bool button, Blazorise.Size size);
        public abstract string RadioValidation(Blazorise.ValidationStatus validationStatus);
        public abstract string Rating();
        public abstract string RatingDisabled(bool disabled);
        public abstract string RatingItem();
        public abstract string RatingItemColor(Blazorise.Color color);
        public abstract string RatingItemHovered(bool hover);
        public abstract string RatingItemSelected(bool selected);
        public abstract string RatingReadonly(bool @readonly);
        public abstract string Row();
        public abstract string RowColumns(Blazorise.RowColumnsSize rowColumnsSize, Blazorise.RowColumnsDefinition rowColumnsDefinition);
        public abstract string RowNoGutters(bool noGutters);
        public abstract string Select();
        public abstract string SelectMultiple(bool multiple);
        public abstract string SelectSize(Blazorise.Size size);
        public abstract string SelectValidation(Blazorise.ValidationStatus validationStatus);
        public abstract string Shadow(Blazorise.Shadow shadow);
        public abstract string Show();
        public abstract string Sizing(Blazorise.SizingType sizingType, Blazorise.SizingSize sizingSize, Blazorise.SizingDefinition sizingDefinition);
        public abstract string Sizing(Blazorise.SizingType sizingType, Blazorise.SizingSize sizingSize, System.Collections.Generic.IEnumerable<Blazorise.SizingDefinition> rules);
        public abstract string Slider();
        public abstract string SliderColor(Blazorise.Color color);
        public abstract string SliderValidation(Blazorise.ValidationStatus validationStatus);
        public abstract string Spacing(Blazorise.Spacing spacing, Blazorise.SpacingSize spacingSize, [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "side",
                "breakpoint"})] System.Collections.Generic.IEnumerable<System.ValueTuple<Blazorise.Side, Blazorise.Breakpoint>> rules);
        public abstract string Spacing(Blazorise.Spacing spacing, Blazorise.SpacingSize spacingSize, Blazorise.Side side, Blazorise.Breakpoint breakpoint);
        public abstract string StepItem();
        public abstract string StepItemActive(bool active);
        public abstract string StepItemColor(Blazorise.Color color);
        public abstract string StepItemCompleted(bool completed);
        public abstract string StepItemDescription();
        public abstract string StepItemMarker();
        public abstract string StepItemMarkerColor(Blazorise.Color color, bool active);
        public abstract string StepPanel();
        public abstract string StepPanelActive(bool active);
        public abstract string Steps();
        public abstract string StepsContent();
        public abstract string Switch();
        public abstract string SwitchChecked(bool @checked);
        public abstract string SwitchColor(Blazorise.Color color);
        public abstract string SwitchCursor(Blazorise.Cursor cursor);
        public abstract string SwitchSize(Blazorise.Size size);
        public abstract string SwitchValidation(Blazorise.ValidationStatus validationStatus);
        public abstract string TabItem(Blazorise.TabPosition tabPosition);
        public abstract string TabItemActive(bool active);
        public abstract string TabItemDisabled(bool disabled);
        public abstract string TabLink(Blazorise.TabPosition tabPosition);
        public abstract string TabLinkActive(bool active);
        public abstract string TabLinkDisabled(bool disabled);
        public abstract string TabPanel();
        public abstract string TabPanelActive(bool active);
        public abstract string Table();
        public abstract string TableBody();
        public abstract string TableBordered(bool bordered);
        public abstract string TableBorderless(bool borderless);
        public abstract string TableFixedColumns(bool fixedColumns);
        public abstract string TableFixedHeader(bool fixedHeader);
        public abstract string TableFooter();
        public abstract string TableFullWidth(bool fullWidth);
        public abstract string TableHeader();
        public abstract string TableHeaderCell();
        public abstract string TableHeaderCellCursor(Blazorise.Cursor cursor);
        public abstract string TableHeaderCellFixed(Blazorise.TableColumnFixedPosition fixedPosition);
        public abstract string TableHeaderThemeContrast(Blazorise.ThemeContrast themeContrast);
        public abstract string TableHoverable(bool hoverable);
        public abstract string TableNarrow(bool narrow);
        public abstract string TableResponsive(bool responsive);
        public abstract string TableResponsiveMode(Blazorise.TableResponsiveMode responsiveMode);
        public abstract string TableRow(bool striped, bool hoverable);
        public abstract string TableRowCell();
        public abstract string TableRowCellColor(Blazorise.Color color);
        public abstract string TableRowCellFixed(Blazorise.TableColumnFixedPosition fixedPosition);
        public abstract string TableRowColor(Blazorise.Color color);
        public abstract string TableRowGroup(bool expanded);
        public abstract string TableRowGroupCell();
        public abstract string TableRowGroupIndentCell();
        public abstract string TableRowHeader();
        public abstract string TableRowHeaderFixed(Blazorise.TableColumnFixedPosition fixedPosition);
        public abstract string TableRowHoverCursor(Blazorise.Cursor cursor);
        public abstract string TableRowIsSelected(bool selected);
        public abstract string TableStriped(bool striped);
        public abstract string Tabs(bool pills);
        public abstract string TabsCards(bool cards);
        public abstract string TabsContent();
        public abstract string TabsFullWidth(bool fullWidth);
        public abstract string TabsJustified(bool justified);
        public abstract string TabsVertical(bool vertical);
        public abstract string TextAlignment(Blazorise.TextAlignment textAlignment);
        public abstract string TextColor(Blazorise.TextColor textColor);
        public abstract string TextEdit(bool plaintext);
        public abstract string TextEditColor(Blazorise.Color color);
        public abstract string TextEditSize(Blazorise.Size size);
        public abstract string TextEditValidation(Blazorise.ValidationStatus validationStatus);
        public abstract string TextItalic(bool italic);
        public abstract string TextOverflow(Blazorise.TextOverflow textOverflow);
        public abstract string TextSize(Blazorise.TextSizeType textSizeType, Blazorise.TextSizeDefinition textSizeDefinition);
        public abstract string TextTransform(Blazorise.TextTransform textTransform);
        public abstract string TextWeight(Blazorise.TextWeight textWeight);
        public abstract string TimeEdit(bool plaintext);
        public abstract string TimeEditColor(Blazorise.Color color);
        public abstract string TimeEditSize(Blazorise.Size size);
        public abstract string TimeEditValidation(Blazorise.ValidationStatus validationStatus);
        public abstract string TimePicker(bool plaintext);
        public abstract string TimePickerColor(Blazorise.Color color);
        public abstract string TimePickerSize(Blazorise.Size size);
        public abstract string TimePickerValidation(Blazorise.ValidationStatus validationStatus);
        public virtual string ToAlignContent(Blazorise.FlexAlignContent alignContent) { }
        public virtual string ToAlignItems(Blazorise.FlexAlignItems alignItems) { }
        public virtual string ToAlignSelf(Blazorise.FlexAlignSelf alignSelf) { }
        public virtual string ToAlignment(Blazorise.Alignment alignment) { }
        public virtual string ToBackground(Blazorise.Background background) { }
        public virtual string ToBarCollapsedMode(Blazorise.BarCollapseMode collapseMode) { }
        public virtual string ToBarMode(Blazorise.BarMode mode) { }
        public virtual string ToBorderColor(Blazorise.BorderColor borderColor) { }
        public virtual string ToBorderRadius(Blazorise.BorderRadius borderRadius) { }
        public virtual string ToBorderSide(Blazorise.BorderSide borderSide) { }
        public virtual string ToBorderSize(Blazorise.BorderSize borderSize) { }
        public virtual string ToBreakpoint(Blazorise.Breakpoint breakpoint) { }
        public virtual string ToCharacterCasing(Blazorise.CharacterCasing characterCasing) { }
        public virtual string ToColor(Blazorise.Color color) { }
        public virtual string ToColumnWidth(Blazorise.ColumnWidth columnWidth) { }
        public virtual string ToCursor(Blazorise.Cursor cursor) { }
        public virtual string ToDirection(Blazorise.FlexDirection direction) { }
        public virtual string ToDisplayDirection(Blazorise.DisplayDirection displayDirection) { }
        public virtual string ToDisplayHeadingSize(Blazorise.DisplayHeadingSize displayHeadingSize) { }
        public virtual string ToDisplayType(Blazorise.DisplayType displayType) { }
        public virtual string ToDividerType(Blazorise.DividerType dividerType) { }
        public virtual string ToFigureSize(Blazorise.FigureSize figureSize) { }
        public virtual string ToFlexType(Blazorise.FlexType flexType) { }
        public virtual string ToFloat(Blazorise.Float @float) { }
        public virtual string ToGapSide(Blazorise.GapSide gapSide) { }
        public virtual string ToGapSize(Blazorise.GapSize gapSize) { }
        public virtual string ToGridColumnsSize(Blazorise.GridColumnsSize gridColumnsSize) { }
        public virtual string ToGridRowsSize(Blazorise.GridRowsSize gridRowsSize) { }
        public virtual string ToGrowShrink(Blazorise.FlexGrowShrink growShrink) { }
        public virtual string ToGrowShrinkSize(Blazorise.FlexGrowShrinkSize growShrinkSize) { }
        public virtual string ToHeadingSize(Blazorise.HeadingSize headingSize) { }
        public virtual string ToJumbotronTitleSize(Blazorise.JumbotronTitleSize jumbotronTitleSize) { }
        public virtual string ToJustifyContent(Blazorise.FlexJustifyContent justifyContent) { }
        public virtual string ToJustifyContent(Blazorise.JustifyContent justifyContent) { }
        public virtual string ToModalSize(Blazorise.ModalSize modalSize) { }
        public virtual string ToOrder(Blazorise.FlexOrder order) { }
        public virtual string ToOrderedListType(Blazorise.OrderedListType orderedListType) { }
        public virtual string ToOverflowType(Blazorise.OverflowType overflowType) { }
        public virtual string ToPlacement(Blazorise.Placement placement) { }
        public virtual string ToPositionEdgeType(Blazorise.PositionEdgeType positionEdgeType) { }
        public virtual string ToPositionTranslateType(Blazorise.PositionTranslateType positionTranslateType) { }
        public virtual string ToPositionType(Blazorise.PositionType positionType) { }
        public virtual string ToRowColumnsSize(Blazorise.RowColumnsSize rowColumnsSize) { }
        public virtual string ToScreenreader(Blazorise.Screenreader screenreader) { }
        public virtual string ToShadow(Blazorise.Shadow shadow) { }
        public virtual string ToSide(Blazorise.Side side) { }
        public virtual string ToSize(Blazorise.Size size) { }
        public virtual string ToSizingSize(Blazorise.SizingSize sizingSize) { }
        public virtual string ToSizingType(Blazorise.SizingType sizingType) { }
        public virtual string ToSpacing(Blazorise.Spacing spacing) { }
        public virtual string ToSpacingSize(Blazorise.SpacingSize spacingSize) { }
        public virtual string ToTableColumnFixedPosition(Blazorise.TableColumnFixedPosition tableColumnFixedPosition) { }
        public virtual string ToTextAlignment(Blazorise.TextAlignment textAlignment) { }
        public virtual string ToTextColor(Blazorise.TextColor textColor) { }
        public virtual string ToTextOverflow(Blazorise.TextOverflow textOverflow) { }
        public virtual string ToTextSizeType(Blazorise.TextSizeType textSizeType) { }
        public virtual string ToTextTransform(Blazorise.TextTransform textTransform) { }
        public virtual string ToTextWeight(Blazorise.TextWeight textWeight) { }
        public virtual string ToThemeContrast(Blazorise.ThemeContrast themeContrast) { }
        public virtual string ToTooltipPlacement(Blazorise.TooltipPlacement tooltipPlacement) { }
        public virtual string ToValidationStatus(Blazorise.ValidationStatus validationStatus) { }
        public virtual string ToVerticalAlignment(Blazorise.VerticalAlignment verticalAlignment) { }
        public virtual string ToWrap(Blazorise.FlexWrap wrap) { }
        public abstract string Toast();
        public abstract string ToastAnimated(bool animated);
        public abstract string ToastBody();
        public abstract string ToastFade(bool visible, bool showing, bool hiding);
        public abstract string ToastHeader();
        public abstract string ToastVisible(bool visible);
        public abstract string Toaster();
        public abstract string ToasterPlacement(Blazorise.ToasterPlacement placement);
        public abstract string ToasterPlacementStrategy(Blazorise.ToasterPlacementStrategy placementStrategy);
        public abstract string Tooltip();
        public abstract string TooltipAlwaysActive(bool alwaysActive);
        public abstract string TooltipFade(bool fade);
        public abstract string TooltipInline(bool inline);
        public abstract string TooltipMultiline(bool multiline);
        public abstract string TooltipPlacement(Blazorise.TooltipPlacement tooltipPlacement);
        public abstract string UnorderedList();
        public abstract string UnorderedListUnstyled(bool unstyled);
        public abstract string ValidationError();
        public abstract string ValidationErrorTooltip();
        public abstract string ValidationNone();
        public abstract string ValidationSuccess();
        public abstract string ValidationSuccessTooltip();
        public abstract string ValidationSummary();
        public abstract string ValidationSummaryError();
        public abstract string VerticalAlignment(Blazorise.VerticalAlignment verticalAlignment);
        public abstract string Visibility(Blazorise.Visibility visibility);
    }
    public delegate void ClearAllValidationsEventHandler();
    public class ClearedValidationsEventArgs : System.EventArgs
    {
        public static readonly Blazorise.ClearedValidationsEventArgs Empty;
        public ClearedValidationsEventArgs() { }
    }
    public class CloseActivatorAdapter
    {
        public CloseActivatorAdapter(Blazorise.ICloseActivator component) { }
        [Microsoft.JSInterop.JSInvokable]
        public System.Threading.Tasks.Task Close(string reason) { }
        [Microsoft.JSInterop.JSInvokable]
        public string GetElementId() { }
        [Microsoft.JSInterop.JSInvokable]
        public System.Threading.Tasks.Task<bool> SafeToClose(string elementId, string reason, bool isChildClicked) { }
    }
    public class CloseButton : Blazorise.BaseComponent
    {
        public CloseButton() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool? AutoClose { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs> Clicked { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Disabled { get; set; }
        protected string DisabledString { get; }
        protected bool IsAutoClose { get; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.BlazoriseOptions Options { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Alert ParentAlert { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Modal ParentModal { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Toast ParentToast { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected System.Threading.Tasks.Task ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
    }
    public enum CloseReason
    {
        None = 0,
        UserClosing = 1,
        FocusLostClosing = 2,
        EscapeClosing = 3,
    }
    public class CloseableAdapter
    {
        public CloseableAdapter(Blazorise.IHideableComponent component) { }
        public System.Threading.Tasks.Task Run(bool visible) { }
    }
    public class Code : Blazorise.BaseTypographyComponent
    {
        public Code() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Tag { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class Collapse : Blazorise.BaseComponent, System.IDisposable
    {
        public Collapse() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        public bool FirstInAccordion { get; }
        public bool InsideAccordion { get; }
        public bool LastInAccordion { get; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Accordion ParentAccordion { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Visible { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<bool> VisibleChanged { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void Dispose(bool disposing) { }
        protected override void OnInitialized() { }
        public System.Threading.Tasks.Task Toggle() { }
    }
    public class CollapseBody : Blazorise.BaseComponent
    {
        public CollapseBody() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected Blazorise.Utilities.ClassBuilder ContentClassBuilder { get; }
        protected string ContentClassNames { get; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        public Blazorise.Collapse ParentCollapse { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter(Name="CollapseVisible")]
        public bool Visible { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void DirtyClasses() { }
    }
    public class CollapseHeader : Blazorise.BaseComponent
    {
        public CollapseHeader() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs> Clicked { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        public Blazorise.Collapse ParentCollapse { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected System.Threading.Tasks.Task ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
    }
    public class Color : Blazorise.Enumeration<Blazorise.Color>, System.IEquatable<Blazorise.Color>
    {
        public static readonly Blazorise.Color Danger;
        public static readonly Blazorise.Color Dark;
        public static readonly Blazorise.Color Default;
        public static readonly Blazorise.Color Info;
        public static readonly Blazorise.Color Light;
        public static readonly Blazorise.Color Link;
        public static readonly Blazorise.Color Primary;
        public static readonly Blazorise.Color Secondary;
        public static readonly Blazorise.Color Success;
        public static readonly Blazorise.Color Warning;
        public Color(string name) { }
        public static Blazorise.Color op_Implicit(string name) { }
    }
    public class ColorEdit : Blazorise.BaseInputComponent<string>, Blazorise.ISelectableComponent
    {
        public ColorEdit() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Color { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<string> ColorChanged { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Linq.Expressions.Expression<System.Func<string>> ColorExpression { get; set; }
        protected override string InternalValue { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override string FormatValueAsString(string value) { }
        protected override string GetFormatedValueExpression() { }
        protected System.Threading.Tasks.Task OnChangeHandler(Microsoft.AspNetCore.Components.ChangeEventArgs eventArgs) { }
        protected override System.Threading.Tasks.Task OnInternalValueChanged(string value) { }
        protected override System.Threading.Tasks.Task<Blazorise.ParseValue<string>> ParseValueFromStringAsync(string value) { }
        public virtual System.Threading.Tasks.Task Select(bool focus = true) { }
        public override System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) { }
    }
    public class ColorPicker : Blazorise.BaseInputComponent<string>, Blazorise.ISelectableComponent, System.IAsyncDisposable
    {
        public ColorPicker() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Color { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<string> ColorChanged { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Linq.Expressions.Expression<System.Func<string>> ColorExpression { get; set; }
        protected virtual string ColorPreviewElementSelector { get; }
        protected virtual string ColorValueElementSelector { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool HideAfterPaletteSelect { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        public Blazorise.Modules.IJSColorPickerModule JSModule { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.Localization.ITextLocalizer<Blazorise.ColorPicker> Localizer { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.Localization.ITextLocalizerService LocalizerService { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string[] Palette { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Localization.TextLocalizerHandler PickerLocalizer { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ShowCancelButton { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ShowClearButton { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ShowHueSlider { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ShowInputField { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ShowOpacitySlider { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ShowPalette { get; set; }
        protected override string InternalValue { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override System.Threading.Tasks.ValueTask DisposeAsync(bool disposing) { }
        protected override string FormatValueAsString(string value) { }
        protected override string GetFormatedValueExpression() { }
        protected System.Threading.Tasks.Task OnChangeHandler(Microsoft.AspNetCore.Components.ChangeEventArgs eventArgs) { }
        protected override System.Threading.Tasks.Task OnFirstAfterRenderAsync() { }
        protected override void OnInitialized() { }
        protected override System.Threading.Tasks.Task OnInternalValueChanged(string value) { }
        protected override System.Threading.Tasks.Task<Blazorise.ParseValue<string>> ParseValueFromStringAsync(string value) { }
        public virtual System.Threading.Tasks.Task Select(bool focus = true) { }
        public override System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) { }
        [Microsoft.JSInterop.JSInvokable]
        public System.Threading.Tasks.Task SetValue(string value) { }
    }
    public class Column : Blazorise.BaseColumnComponent, System.IDisposable
    {
        public Column() { }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "Horizontal",
                "Vertical"})]
        public System.ValueTuple<int, int> Gutter { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void BuildStyles(Blazorise.Utilities.StyleBuilder builder) { }
    }
    public class ColumnDefinition
    {
        public ColumnDefinition() { }
        public Blazorise.Breakpoint Breakpoint { get; set; }
        public Blazorise.ColumnWidth ColumnWidth { get; set; }
        public bool Offset { get; set; }
    }
    public static class ColumnSize
    {
        public static Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is1 { get; }
        public static Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is10 { get; }
        public static Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is11 { get; }
        public static Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is12 { get; }
        public static Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is2 { get; }
        public static Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is3 { get; }
        public static Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is4 { get; }
        public static Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is5 { get; }
        public static Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is6 { get; }
        public static Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is7 { get; }
        public static Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is8 { get; }
        public static Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is9 { get; }
        public static Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize IsAuto { get; }
        public static Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize IsFull { get; }
        public static Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize IsHalf { get; }
        public static Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize IsQuarter { get; }
        public static Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize IsThird { get; }
        public static Blazorise.IFluentColumnWithSize Is(string value) { }
    }
    public enum ColumnWidth
    {
        Default = 0,
        Is1 = 1,
        Is2 = 2,
        Is3 = 3,
        Is4 = 4,
        Is5 = 5,
        Is6 = 6,
        Is7 = 7,
        Is8 = 8,
        Is9 = 9,
        Is10 = 10,
        Is11 = 11,
        Is12 = 12,
        Full = 13,
        Half = 14,
        Third = 15,
        Quarter = 16,
        Auto = 17,
    }
    public class ComponentActivator : Microsoft.AspNetCore.Components.IComponentActivator
    {
        public ComponentActivator(System.IServiceProvider serviceProvider) { }
        public System.IServiceProvider ServiceProvider { get; }
        public Microsoft.AspNetCore.Components.IComponent CreateInstance(System.Type componentType) { }
    }
    public static class Config
    {
        public static System.Collections.Generic.IDictionary<System.Type, System.Type> JSModuleMap { get; }
        public static System.Collections.Generic.IDictionary<System.Type, System.Type> LocalizationMap { get; }
        public static System.Collections.Generic.IDictionary<System.Type, System.Type> ServiceMap { get; }
        public static System.Collections.Generic.IDictionary<System.Type, System.Type> ValidationMap { get; }
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddBlazorise(this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, System.Action<Blazorise.BlazoriseOptions> configureOptions = null) { }
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddClassProvider(this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, System.Func<Blazorise.IClassProvider> classProviderFactory) { }
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddEmptyProviders(this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection) { }
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddIconProvider(this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, System.Func<Blazorise.IIconProvider> iconProviderFactory) { }
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddStyleProvider(this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, System.Func<Blazorise.IStyleProvider> styleProviderFactory) { }
    }
    public class Container : Blazorise.BaseComponent
    {
        public Container() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Breakpoint Breakpoint { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Fluid { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class Control : Blazorise.BaseComponent
    {
        public Control() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Inline { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.ControlRole Role { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public enum ControlRole
    {
        None = 0,
        Check = 1,
        Radio = 2,
        Switch = 3,
        File = 4,
        Text = 5,
    }
    public enum CurrencySymbolPlacement
    {
        Prefix = 0,
        Suffix = 1,
    }
    public enum Cursor
    {
        Default = 0,
        Pointer = 1,
    }
    public class DataAnnotationValidationHandler : Blazorise.IValidationHandler
    {
        public DataAnnotationValidationHandler(Blazorise.IEditContextValidator editContextValidator, Blazorise.BlazoriseOptions options) { }
        public Blazorise.IEditContextValidator EditContextValidator { get; }
        public Blazorise.BlazoriseOptions Options { get; }
        public void Validate(Blazorise.IValidation validation, object newValidationValue) { }
        public System.Threading.Tasks.Task ValidateAsync(Blazorise.IValidation validation, object newValidationValue, System.Threading.CancellationToken cancellationToken = default) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field, AllowMultiple=false)]
    public sealed class DateAttribute : System.Attribute
    {
        public DateAttribute() { }
        public Blazorise.DateInputMode InputMode { get; set; }
    }
    public class DateEdit<TValue> : Blazorise.BaseTextInput<TValue>
    {
        public DateEdit() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public TValue Date { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<TValue> DateChanged { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Linq.Expressions.Expression<System.Func<TValue>> DateExpression { get; set; }
        protected string DateFormat { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.DateInputMode InputMode { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.DateTimeOffset? Max { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.DateTimeOffset? Min { get; set; }
        protected string Mode { get; }
        protected override bool ShouldAutoGenerateId { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int Step { get; set; }
        protected override TValue InternalValue { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override string FormatValueAsString(TValue value) { }
        protected override string GetFormatedValueExpression() { }
        protected override System.Threading.Tasks.Task OnBlurHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs) { }
        protected override System.Threading.Tasks.Task OnChangeHandler(Microsoft.AspNetCore.Components.ChangeEventArgs e) { }
        protected override System.Threading.Tasks.Task OnInternalValueChanged(TValue value) { }
        protected override System.Threading.Tasks.Task OnKeyPressHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs) { }
        protected override System.Threading.Tasks.Task<Blazorise.ParseValue<TValue>> ParseValueFromStringAsync(string value) { }
        public override System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) { }
        public System.Threading.Tasks.Task ShowPicker() { }
    }
    public enum DateInputMode
    {
        Date = 0,
        DateTime = 1,
        Month = 2,
    }
    public enum DateInputSelectionMode
    {
        Single = 0,
        Range = 1,
        Multiple = 2,
    }
    public class DatePickerAdapter
    {
        public DatePickerAdapter(Blazorise.IDatePicker datePicker) { }
        [Microsoft.JSInterop.JSInvokable]
        public System.Threading.Tasks.Task OnBlurHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs) { }
        [Microsoft.JSInterop.JSInvokable]
        public System.Threading.Tasks.Task OnFocusHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs) { }
        [Microsoft.JSInterop.JSInvokable]
        public System.Threading.Tasks.Task OnFocusInHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs) { }
        [Microsoft.JSInterop.JSInvokable]
        public System.Threading.Tasks.Task OnFocusOutHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs) { }
        [Microsoft.JSInterop.JSInvokable]
        public System.Threading.Tasks.Task OnKeyDownHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs) { }
        [Microsoft.JSInterop.JSInvokable]
        public System.Threading.Tasks.Task OnKeyPressHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs) { }
        [Microsoft.JSInterop.JSInvokable]
        public System.Threading.Tasks.Task OnKeyUpHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs) { }
    }
    public class DatePicker<TValue> : Blazorise.BaseTextInput<System.Collections.Generic.IReadOnlyList<TValue>>, Blazorise.IDatePicker, System.IAsyncDisposable
    {
        public DatePicker() { }
        protected string CurrentRangeSeparator { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public TValue Date { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<TValue> DateChanged { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Linq.Expressions.Expression<System.Func<TValue>> DateExpression { get; set; }
        protected string DateFormat { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Collections.Generic.IReadOnlyList<TValue> Dates { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.IReadOnlyList<TValue>> DatesChanged { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Linq.Expressions.Expression<System.Func<System.Collections.Generic.IReadOnlyList<TValue>>> DatesExpression { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool DisableMobile { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Collections.Generic.IEnumerable<TValue> DisabledDates { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Collections.Generic.IEnumerable<System.DayOfWeek> DisabledDays { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string DisplayFormat { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.Vendors.IFlatPickrDateTimeDisplayFormatConverter DisplayFormatConverter { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.DayOfWeek FirstDayOfWeek { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Inline { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string InputFormat { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.Vendors.IInputMaskDateTimeInputFormatConverter InputFormatConverter { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.DateInputMode InputMode { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        public Blazorise.Modules.IJSDatePickerModule JSModule { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.Localization.ITextLocalizer<Blazorise.DatePicker<TValue>> Localizer { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.Localization.ITextLocalizerService LocalizerService { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.DateTimeOffset? Max { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.DateTimeOffset? Min { get; set; }
        protected string Mode { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string RangeSeparator { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.DateInputSelectionMode SelectionMode { get; set; }
        protected override bool ShouldAutoGenerateId { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool StaticPicker { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool TimeAs24hr { get; set; }
        protected override System.Collections.Generic.IReadOnlyList<TValue> InternalValue { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        public System.Threading.Tasks.ValueTask CloseAsync() { }
        protected override System.Threading.Tasks.ValueTask DisposeAsync(bool disposing) { }
        public override System.Threading.Tasks.Task Focus(bool scrollToElement = true) { }
        protected override string FormatValueAsString(System.Collections.Generic.IReadOnlyList<TValue> values) { }
        protected override string GetFormatedValueExpression() { }
        protected override bool IsSameAsInternalValue(System.Collections.Generic.IReadOnlyList<TValue> value) { }
        [Microsoft.JSInterop.JSInvokable]
        public virtual System.Threading.Tasks.Task OnBlurHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs) { }
        protected override System.Threading.Tasks.Task OnChangeHandler(Microsoft.AspNetCore.Components.ChangeEventArgs e) { }
        [Microsoft.JSInterop.JSInvokable]
        protected System.Threading.Tasks.Task OnClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs e) { }
        protected override System.Threading.Tasks.Task OnFirstAfterRenderAsync() { }
        [Microsoft.JSInterop.JSInvokable]
        public virtual System.Threading.Tasks.Task OnFocusHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs) { }
        [Microsoft.JSInterop.JSInvokable]
        public virtual System.Threading.Tasks.Task OnFocusInHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs) { }
        [Microsoft.JSInterop.JSInvokable]
        public virtual System.Threading.Tasks.Task OnFocusOutHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs) { }
        protected override void OnInitialized() { }
        protected override System.Threading.Tasks.Task OnInternalValueChanged(System.Collections.Generic.IReadOnlyList<TValue> value) { }
        [Microsoft.JSInterop.JSInvokable]
        public virtual System.Threading.Tasks.Task OnKeyDownHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs) { }
        [Microsoft.JSInterop.JSInvokable]
        public virtual System.Threading.Tasks.Task OnKeyPressHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs) { }
        [Microsoft.JSInterop.JSInvokable]
        public virtual System.Threading.Tasks.Task OnKeyUpHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs) { }
        public System.Threading.Tasks.ValueTask OpenAsync() { }
        protected override System.Threading.Tasks.Task<Blazorise.ParseValue<System.Collections.Generic.IReadOnlyList<TValue>>> ParseValueFromStringAsync(string value) { }
        public override System.Threading.Tasks.Task Select(bool focus = true) { }
        public override System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) { }
        public System.Threading.Tasks.ValueTask ToggleAsync() { }
    }
    public class DescriptionList : Blazorise.BaseTypographyComponent
    {
        public DescriptionList() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Row { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class DescriptionListDefinition : Blazorise.BaseTypographyComponent, Blazorise.IColumnComponent
    {
        public DescriptionListDefinition() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.IFluentColumn ColumnSize { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class DescriptionListTerm : Blazorise.BaseTypographyComponent, Blazorise.IColumnComponent
    {
        public DescriptionListTerm() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.IFluentColumn ColumnSize { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public enum Direction
    {
        Default = 0,
        Down = 1,
        Up = 2,
        End = 3,
        Start = 4,
    }
    public static class Display
    {
        public static Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection Always { get; }
        public static Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection Block { get; }
        public static Blazorise.IFluentDisplayWithDisplayFlexWithDirection Flex { get; }
        public static Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection Inline { get; }
        public static Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection InlineBlock { get; }
        public static Blazorise.IFluentDisplayWithDisplayFlexWithDirection InlineFlex { get; }
        public static Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection None { get; }
        public static Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection Table { get; }
        public static Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection TableCell { get; }
        public static Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection TableRow { get; }
    }
    public class DisplayDefinition : System.IEquatable<Blazorise.DisplayDefinition>
    {
        public DisplayDefinition() { }
        public Blazorise.Breakpoint Breakpoint { get; set; }
        public bool? Condition { get; set; }
        public Blazorise.DisplayDirection Direction { get; set; }
    }
    public enum DisplayDirection
    {
        Default = 0,
        Row = 1,
        Column = 2,
        ReverseRow = 3,
        ReverseColumn = 4,
    }
    public class DisplayHeading : Blazorise.BaseTypographyComponent
    {
        public DisplayHeading() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public string AlternativeTagName { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.DisplayHeadingSize Size { get; set; }
        protected string TagName { get; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public enum DisplayHeadingSize
    {
        Is1 = 0,
        Is2 = 1,
        Is3 = 2,
        Is4 = 3,
    }
    public enum DisplayType
    {
        Always = 0,
        None = 1,
        Block = 2,
        Inline = 3,
        InlineBlock = 4,
        Flex = 5,
        InlineFlex = 6,
        Table = 7,
        TableRow = 8,
        TableCell = 9,
    }
    public class Div : Blazorise.BaseElementComponent
    {
        public Div() { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class Divider : Blazorise.BaseComponent, System.IDisposable
    {
        public Divider() { }
        protected Blazorise.DividerType ApplyDividerType { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.DividerType? DividerType { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Text { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        public Blazorise.Theme Theme { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void Dispose(bool disposing) { }
        protected override void OnInitialized() { }
    }
    public enum DividerType
    {
        Solid = 0,
        Dashed = 1,
        Dotted = 2,
        TextContent = 3,
    }
    public struct DomElement
    {
        public Blazorise.DomRectangle BoundingClientRect { get; set; }
        public double ClientHeight { get; set; }
        public double ClientLeft { get; set; }
        public double ClientTop { get; set; }
        public double ClientWidth { get; set; }
        public double OffsetHeight { get; set; }
        public double OffsetLeft { get; set; }
        public double OffsetTop { get; set; }
        public double OffsetWidth { get; set; }
        public double ScrollHeight { get; set; }
        public double ScrollLeft { get; set; }
        public double ScrollTop { get; set; }
        public double ScrollWidth { get; set; }
    }
    public struct DomRectangle
    {
        public double Bottom { get; set; }
        public double Height { get; set; }
        public double Left { get; set; }
        public double Right { get; set; }
        public double Top { get; set; }
        public double Width { get; set; }
        public double X { get; set; }
        public double Y { get; set; }
    }
    public class DraggableDroppedEventArgs<TItem> : System.EventArgs
    {
        public DraggableDroppedEventArgs(TItem item, string dropZoneName, string sourceDropZoneName, int indexInZone) { }
        public string DropZoneName { get; }
        public int IndexInZone { get; }
        public TItem Item { get; }
        public string SourceDropZoneName { get; }
    }
    public class DraggableIndexChangedEventArgs : System.EventArgs
    {
        public DraggableIndexChangedEventArgs(string zoneName, string oldZoneName, int index) { }
        public int Index { get; }
        public string OldZoneName { get; }
        public string ZoneName { get; }
    }
    public class DraggableTransactionEnded<TItem> : System.EventArgs
    {
        public DraggableTransactionEnded(Blazorise.DraggableTransaction<TItem> transaction) { }
        public DraggableTransactionEnded(string destinationDropZoneName, bool success, Blazorise.DraggableTransaction<TItem> transaction) { }
        public string DestinationDropZoneName { get; }
        public int DestinationIndex { get; }
        public TItem Item { get; }
        public string OriginDropZoneName { get; }
        public int OriginIndex { get; }
        public bool Success { get; }
    }
    public class DraggableTransaction<TItem>
    {
        public DraggableTransaction(TItem item, string sourceZoneName, int index, System.Func<System.Threading.Tasks.Task> commited, System.Func<System.Threading.Tasks.Task> canceled) { }
        public string CurrentZoneName { get; }
        public int Index { get; }
        public int SourceIndex { get; }
        public string SourceZoneName { get; }
        public TItem Item { get; init; }
        public System.Threading.Tasks.Task Cancel() { }
        public System.Threading.Tasks.Task Commit() { }
    }
    [Microsoft.AspNetCore.Components.CascadingTypeParameter("TItem")]
    public class DropContainer<TItem> : Blazorise.BaseComponent
    {
        public DropContainer() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ApplyDropClassesOnDragStarted { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string DisabledClass { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string DraggingClass { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Func<TItem, string, bool> DropAllowed { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string DropAllowedClass { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string DropNotAllowedClass { get; set; }
        public bool HasTransactionIndexChanged { get; }
        public bool IsItemMovedDownwards { get; }
        public bool IsItemMovedDownwardsOrSame { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Func<TItem, bool> ItemDisabled { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string ItemDraggingClass { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Blazorise.DraggableDroppedEventArgs<TItem>> ItemDropped { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment<TItem> ItemTemplate { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Collections.Generic.IEnumerable<TItem> Items { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Func<TItem, string, bool> ItemsFilter { get; set; }
        public string TransactionCurrentZoneName { get; }
        public bool TransactionInProgress { get; }
        public string TransactionSourceZoneName { get; }
        public event System.EventHandler RefreshRequested;
        public event System.EventHandler<Blazorise.DraggableTransactionEnded<TItem>> TransactionEnded;
        public event System.EventHandler<Blazorise.DraggableIndexChangedEventArgs> TransactionIndexChanged;
        public event System.EventHandler<Blazorise.DraggableTransaction<TItem>> TransactionStarted;
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        public System.Threading.Tasks.Task CancelTransaction() { }
        public System.Threading.Tasks.Task CommitTransaction(string dropZoneName, bool reorderIsAllowed) { }
        public int GetTransactionIndex() { }
        public TItem GetTransactionItem() { }
        public bool IsOrigin(int index, string zoneName) { }
        public bool IsTransactionOriginatedFromInside(string zoneName) { }
        public void Refresh() { }
        public void StartTransaction(TItem item, string sourceZoneName, int draggableIndex, System.Func<System.Threading.Tasks.Task> commited, System.Func<System.Threading.Tasks.Task> canceled) { }
        public void UpdateTransactionIndex(int index) { }
    }
    public class DropZone<TItem> : Blazorise.BaseComponent, System.IAsyncDisposable
    {
        public DropZone() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool AllowReorder { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool? ApplyDropClassesOnDragStarted { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string DisabledClass { get; set; }
        [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "item",
                "index",
                "transactionIndex"})]
        protected Microsoft.AspNetCore.Components.RenderFragment<System.ValueTuple<TItem, int, int>> DraggableItemFragment { get; }
        protected Microsoft.AspNetCore.Components.RenderFragment<int> DraggablePreviewFragment { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string DraggingClass { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Func<TItem, bool> DropAllowed { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string DropAllowedClass { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string DropNotAllowedClass { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Func<TItem, bool> ItemDisabled { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string ItemDraggingClass { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment<TItem> ItemTemplate { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Func<TItem, bool> ItemsFilter { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        public Blazorise.Modules.IJSDragDropModule JSModule { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Name { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool OnlyZone { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.DropContainer<TItem> ParentContainer { get; set; }
        protected Blazorise.Utilities.ClassBuilder PlaceholderClassBuilder { get; }
        protected override bool ShouldAutoGenerateId { get; }
        protected string TransactionSourceZoneName { get; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void DirtyClasses() { }
        protected override System.Threading.Tasks.ValueTask DisposeAsync(bool disposing) { }
        protected override System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender) { }
        protected override void OnInitialized() { }
        protected override bool ShouldRender() { }
    }
    public class Dropdown : Blazorise.BaseComponent, System.IAsyncDisposable
    {
        public Dropdown() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Direction Direction { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Disabled { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string DropdownMenuTargetId { get; set; }
        protected bool HasSubmenu { get; }
        protected bool IsDropdownSubmenu { get; }
        protected bool IsGroup { get; }
        [Microsoft.AspNetCore.Components.Inject]
        public Blazorise.Modules.IJSDropdownModule JSModule { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Buttons ParentButtons { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Dropdown ParentDropdown { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Table ParentTable { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.DropdownPositionStrategy PositionStrategy { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool RightAligned { get; set; }
        public string SelectedDropdownElementId { get; set; }
        protected override bool ShouldAutoGenerateId { get; }
        protected Blazorise.States.DropdownState State { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Visible { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<bool> VisibleChanged { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override System.Threading.Tasks.ValueTask DisposeAsync(bool disposing) { }
        public System.Threading.Tasks.Task Hide(bool hideAll = false) { }
        protected bool IsChildButton(string elementId) { }
        protected void NotifyButtonInitialized(Blazorise.Button button) { }
        protected void NotifyButtonRemoved(Blazorise.Button button) { }
        protected void NotifyChildDropdownInitialized(Blazorise.Dropdown dropdown) { }
        protected void NotifyChildDropdownRemoved(Blazorise.Dropdown dropdown) { }
        protected void NotifyDropdownMenuInitialized(Blazorise.DropdownMenu dropdownMenu) { }
        protected bool NotifyDropdownMenuRemoved(Blazorise.DropdownMenu dropdownMenu) { }
        protected void NotifyDropdownToggleInitialized(Blazorise.DropdownToggle dropdownToggle) { }
        protected bool NotifyDropdownToggleRemoved(Blazorise.DropdownToggle dropdownToggle) { }
        protected override void OnAfterRender(bool firstRender) { }
        protected override void OnInitialized() { }
        protected void OnMouseEnterHandler() { }
        protected void OnMouseLeaveHandler() { }
        public System.Threading.Tasks.Task Show() { }
        public System.Threading.Tasks.Task Toggle(string dropdownToggleElementId) { }
    }
    public class DropdownDivider : Blazorise.BaseComponent
    {
        public DropdownDivider() { }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class DropdownHeader : Blazorise.BaseComponent
    {
        public DropdownHeader() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class DropdownItem : Blazorise.BaseComponent
    {
        protected bool @checked;
        public DropdownItem() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Active { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Checked { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<bool> CheckedChanged { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<object> Clicked { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Disabled { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Dropdown ParentDropdown { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ShowCheckbox { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public object Value { get; set; }
        protected System.Linq.Expressions.Expression<System.Func<bool>> checkedExpression { get; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected System.Threading.Tasks.Task CheckedChangedHandler(bool isChecked) { }
        protected System.Threading.Tasks.Task ClickHandler() { }
        public override System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) { }
    }
    public class DropdownMenu : Blazorise.BaseComponent, System.IDisposable
    {
        public DropdownMenu() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string MaxMenuHeight { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Dropdown ParentDropdown { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.States.DropdownState ParentDropdownState { get; set; }
        protected override bool ShouldAutoGenerateId { get; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void BuildStyles(Blazorise.Utilities.StyleBuilder builder) { }
        protected override void Dispose(bool disposing) { }
        protected override void OnInitialized() { }
        protected virtual void OnVisibleChanged(bool visible) { }
    }
    public enum DropdownPositionStrategy
    {
        Absolute = 0,
        Fixed = 1,
    }
    public class DropdownStateEventArgs : System.EventArgs
    {
        public DropdownStateEventArgs(bool visible) { }
        public bool Visible { get; }
    }
    public class DropdownToggle : Blazorise.BaseComponent, Blazorise.ICloseActivator, System.IAsyncDisposable
    {
        public DropdownToggle() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs> Clicked { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Color Color { get; set; }
        protected string DataBoundary { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Disabled { get; set; }
        protected bool IsDisabled { get; }
        protected bool IsGroup { get; }
        protected bool IsToggleIconVisible { get; }
        [Microsoft.AspNetCore.Components.Inject]
        public Blazorise.Modules.IJSClosableModule JSClosableModule { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Outline { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Dropdown ParentDropdown { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.States.DropdownState ParentDropdownState { get; set; }
        protected override bool ShouldAutoGenerateId { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Size? Size { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Split { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int? TabIndex { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Theme Theme { get; set; }
        protected Blazorise.Size ThemeSize { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool? ToggleIconVisible { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        public new Blazorise.Modules.IJSUtilitiesModule JSUtilitiesModule { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected System.Threading.Tasks.Task ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
        public System.Threading.Tasks.Task Close(Blazorise.CloseReason closeReason) { }
        protected override System.Threading.Tasks.ValueTask DisposeAsync(bool disposing) { }
        public System.Threading.Tasks.Task Focus(bool scrollToElement = true) { }
        protected virtual void HandleVisibilityStyles(bool visible) { }
        public System.Threading.Tasks.Task<bool> IsSafeToClose(string elementId, Blazorise.CloseReason closeReason, bool isChildClicked) { }
        protected override System.Threading.Tasks.Task OnFirstAfterRenderAsync() { }
        protected override void OnInitialized() { }
    }
    public class Dynamic : Microsoft.AspNetCore.Components.ComponentBase
    {
        public Dynamic() { }
        [Microsoft.AspNetCore.Components.Parameter(CaptureUnmatchedValues=true)]
        public System.Collections.Generic.IDictionary<string, object> Attributes { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ClickPreventDefault { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ClickStopPropagation { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.ElementReference ElementRef { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Action<Microsoft.AspNetCore.Components.ElementReference> ElementRefChanged { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string TagName { get; set; }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder) { }
    }
    public class EditContextValidator : Blazorise.IEditContextValidator
    {
        public EditContextValidator(Blazorise.Utilities.IValidationMessageLocalizerAttributeFinder validationMessageLocalizerAttributeFinder, System.IServiceProvider serviceProvider) { }
        protected virtual bool TryGetValidatableProperty(in Microsoft.AspNetCore.Components.Forms.FieldIdentifier fieldIdentifier, out Blazorise.EditContextValidator.ValidationPropertyInfo validationPropertyInfo, bool forLocalization) { }
        public virtual void ValidateField(Microsoft.AspNetCore.Components.Forms.EditContext editContext, Microsoft.AspNetCore.Components.Forms.ValidationMessageStore messages, in Microsoft.AspNetCore.Components.Forms.FieldIdentifier fieldIdentifier, System.Func<string, System.Collections.Generic.IEnumerable<string>, string> messageLocalizer) { }
        protected class ValidationPropertyInfo
        {
            public ValidationPropertyInfo() { }
            public System.ComponentModel.DataAnnotations.ValidationAttribute[] FormattedValidationAttributes { get; set; }
            public System.Reflection.PropertyInfo PropertyInfo { get; set; }
            public System.ComponentModel.DataAnnotations.ValidationAttribute[] ValidationAttributes { get; set; }
        }
    }
    public class Enumeration<T> : System.IEquatable<Blazorise.Enumeration<T>>
        where T : Blazorise.Enumeration<T>
    {
        public Enumeration(string name) { }
        protected Enumeration(T parentEnumeration, string name) { }
        public string Name { get; }
        public T ParentEnumeration { get; }
    }
    public static class ExpressionCompiler
    {
        public static System.Func<object, T> CreateFieldGetter<T>(object instance, string fieldName) { }
        public static System.Func<object, T> CreateFieldGetter<T>(System.Type instanceType, string fieldName) { }
        public static System.Func<object, T> CreatePropertyGetter<T>(object instance, string propertyName) { }
        public static System.Func<object, T> CreatePropertyGetter<T>(System.Type instanceType, string propertyName) { }
        public static T GetField<T>(object instance, string fieldName) { }
        public static T GetProperty<T>(object instance, string propertyName) { }
    }
    public class FailedValidationsEventArgs : System.EventArgs
    {
        public FailedValidationsEventArgs(System.Collections.Generic.IReadOnlyList<string> errorMessages) { }
        public System.Collections.Generic.IReadOnlyList<string> ErrorMessages { get; }
    }
    public class Field : Blazorise.BaseColumnComponent, System.IDisposable
    {
        public Field() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Horizontal { get; set; }
        protected bool IsFields { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.JustifyContent JustifyContent { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Fields ParentFields { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Validation ParentValidation { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void Dispose(bool disposing) { }
        protected override void OnInitialized() { }
        protected override void OnParametersSet() { }
        protected void OnValidationStatusChanged(object sender, Blazorise.ValidationStatusChangedEventArgs eventArgs) { }
    }
    public class FieldBody : Blazorise.BaseSizableFieldComponent
    {
        public FieldBody() { }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class FieldHelp : Blazorise.BaseComponent
    {
        public FieldHelp() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.FieldBody ParentFieldBody { get; set; }
        protected virtual bool ParentIsFieldBody { get; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class FieldLabel : Blazorise.BaseSizableFieldComponent
    {
        public FieldLabel() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public string For { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool RequiredIndicator { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Screenreader Screenreader { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class Fields : Blazorise.BaseColumnComponent
    {
        public Fields() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Help { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Label { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class Figure : Blazorise.BaseComponent
    {
        public Figure() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.FigureSize Size { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class FigureCaption : Blazorise.BaseComponent
    {
        public FigureCaption() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class FigureImage : Blazorise.BaseComponent
    {
        public FigureImage() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public string AlternateText { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Rounded { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Source { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public enum FigureSize
    {
        Default = 0,
        Is16x16 = 1,
        Is24x24 = 2,
        Is32x32 = 3,
        Is48x48 = 4,
        Is64x64 = 5,
        Is96x96 = 6,
        Is128x128 = 7,
        Is256x256 = 8,
        Is512x512 = 9,
    }
    public class FileChangedEventArgs : System.EventArgs
    {
        public FileChangedEventArgs(params Blazorise.IFileEntry[] files) { }
        public Blazorise.IFileEntry[] Files { get; }
    }
    public class FileEdit : Blazorise.BaseInputComponent<Blazorise.IFileEntry[]>, Blazorise.IFileEdit, Blazorise.IFileEntryNotifier, Blazorise.IFileEntryOwner, System.IAsyncDisposable
    {
        protected double Progress;
        protected long ProgressProgress;
        protected long ProgressTotal;
        public FileEdit() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool AutoReset { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Localization.TextLocalizerHandler BrowseButtonLocalizer { get; set; }
        protected string BrowseButtonString { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Blazorise.FileChangedEventArgs> Changed { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Directory { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool DisableProgressReport { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Blazorise.FileEndedEventArgs> Ended { get; set; }
        public Blazorise.IFileEntry[] Files { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Filter { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        public Blazorise.Modules.IJSFileEditModule JSFileEditModule { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        public Blazorise.Modules.IJSFileModule JSFileModule { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.Localization.ITextLocalizer<Blazorise.FileEdit> Localizer { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.Localization.ITextLocalizerService LocalizerService { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int MaxChunkSize { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public long MaxFileSize { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Multiple { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Placeholder { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Blazorise.FileProgressedEventArgs> Progressed { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.TimeSpan SegmentFetchTimeout { get; set; }
        protected System.Collections.Generic.IEnumerable<string> SelectedFileNames { get; }
        protected override bool ShouldAutoGenerateId { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Blazorise.FileStartedEventArgs> Started { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Blazorise.FileWrittenEventArgs> Written { get; set; }
        protected override Blazorise.IFileEntry[] InternalValue { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override System.Threading.Tasks.ValueTask DisposeAsync(bool disposing) { }
        protected override string GetFormatedValueExpression() { }
        public System.Threading.Tasks.Task NotifyChange(Blazorise.FileEntry[] files) { }
        protected override System.Threading.Tasks.Task OnFirstAfterRenderAsync() { }
        protected override void OnInitialized() { }
        protected override System.Threading.Tasks.Task OnInternalValueChanged(Blazorise.IFileEntry[] value) { }
        public System.IO.Stream OpenReadStream(Blazorise.FileEntry fileEntry, System.Threading.CancellationToken cancellationToken = default) { }
        protected override System.Threading.Tasks.Task<Blazorise.ParseValue<Blazorise.IFileEntry[]>> ParseValueFromStringAsync(string value) { }
        public System.Threading.Tasks.ValueTask RemoveFile(int fileId) { }
        public System.Threading.Tasks.ValueTask Reset() { }
        public override System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) { }
        public System.Threading.Tasks.Task ShowPicker() { }
        public System.Threading.Tasks.Task UpdateFileEndedAsync(Blazorise.IFileEntry fileEntry, bool success, Blazorise.FileInvalidReason fileInvalidReason) { }
        public System.Threading.Tasks.Task UpdateFileProgressAsync(Blazorise.IFileEntry fileEntry, long progressProgress) { }
        public System.Threading.Tasks.Task UpdateFileStartedAsync(Blazorise.IFileEntry fileEntry) { }
        public System.Threading.Tasks.Task UpdateFileWrittenAsync(Blazorise.IFileEntry fileEntry, long position, byte[] data) { }
        public System.Threading.Tasks.Task WriteToStreamAsync(Blazorise.FileEntry fileEntry, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public class FileEditAdapter
    {
        public FileEditAdapter(Blazorise.IFileEdit fileEdit) { }
        [Microsoft.JSInterop.JSInvokable]
        public System.Threading.Tasks.Task NotifyChange(Blazorise.FileEntry[] files) { }
    }
    public class FileEndedEventArgs : System.EventArgs
    {
        public FileEndedEventArgs(Blazorise.IFileEntry file, bool success, Blazorise.FileInvalidReason fileInvalidReason) { }
        public Blazorise.IFileEntry File { get; }
        public Blazorise.FileInvalidReason FileInvalidReason { get; set; }
        public bool Success { get; }
    }
    public class FileEntry : Blazorise.IFileEntry
    {
        public FileEntry() { }
        public string ErrorMessage { get; set; }
        public System.Threading.Tasks.TaskCompletionSource FileUploadEndedCallback { get; set; }
        public int Id { get; set; }
        public System.DateTime LastModified { get; set; }
        public string Name { get; set; }
        public Blazorise.IFileEntryOwner Owner { get; set; }
        public string RelativePath { get; set; }
        public long Size { get; set; }
        public Blazorise.FileEntryStatus Status { get; set; }
        public string Type { get; set; }
        public string UploadUrl { get; set; }
        public System.Threading.Tasks.Task Cancel() { }
        public void Init(Blazorise.IFileEntryOwner owner) { }
        public System.IO.Stream OpenReadStream(long maxAllowedSize = 512000, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task WriteToStreamAsync(System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public enum FileEntryStatus
    {
        Ready = 0,
        Uploading = 1,
        Uploaded = 2,
        ExceedsMaximumSize = 3,
        Error = 4,
    }
    public abstract class FileEntryStreamReader
    {
        public FileEntryStreamReader(Blazorise.Modules.IJSFileModule jsModule, Microsoft.AspNetCore.Components.ElementReference elementRef, Blazorise.FileEntry fileEntry, Blazorise.IFileEntryNotifier fileEntryNotifier) { }
        protected Microsoft.AspNetCore.Components.ElementReference ElementRef { get; }
        protected Blazorise.FileEntry FileEntry { get; }
        protected Blazorise.IFileEntryNotifier FileEntryNotifier { get; }
        protected Blazorise.Modules.IJSFileModule JSModule { get; }
    }
    public enum FileInvalidReason
    {
        None = 0,
        MaxLengthExceeded = 1,
        UnexpectedBufferChunkLength = 2,
        TaskCancelled = 3,
        UnexpectedError = 4,
    }
    public class FilePicker : Blazorise.BaseComponent, System.IAsyncDisposable
    {
        public Blazorise.FileEdit FileEdit;
        public FilePicker() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool AutoReset { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment<Blazorise.FilePickerButtonsContext> ButtonsTemplate { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Blazorise.FileChangedEventArgs> Changed { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildTemplate { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Directory { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool DisableProgressReport { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Disabled { get; set; }
        protected string DragAndDropString { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Blazorise.FileEndedEventArgs> Ended { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment Feedback { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Localization.TextLocalizerHandler FilePickerLocalizer { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment<Blazorise.FilePickerFileContext> FileTemplate { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Filter { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        public Blazorise.Modules.IJSFilePickerModule JSFilePickerModule { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.Localization.ITextLocalizer<Blazorise.FilePicker> Localizer { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.Localization.ITextLocalizerService LocalizerService { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int MaxChunkSize { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public long MaxFileSize { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Multiple { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Placeholder { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Blazorise.FileProgressedEventArgs> Progressed { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ReadOnly { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.TimeSpan SegmentFetchTimeout { get; set; }
        protected override bool ShouldAutoGenerateId { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.FilePickerShowMode ShowMode { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Blazorise.FileStartedEventArgs> Started { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Blazorise.FileUploadEventArgs> Upload { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Blazorise.FileWrittenEventArgs> Written { get; set; }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        public System.Threading.Tasks.Task Cancel(bool confirm = false) { }
        public System.Threading.Tasks.Task Clear(bool confirm = false) { }
        protected override System.Threading.Tasks.ValueTask DisposeAsync(bool disposing) { }
        public string GetFileStatus(Blazorise.IFileEntry file) { }
        public string GetLocalizedString(string name) { }
        public int GetProgressPercentage() { }
        public bool IsBusy() { }
        public bool IsFileBeingUploaded(Blazorise.IFileEntry file) { }
        public bool IsUploadReady() { }
        protected System.Threading.Tasks.Task OnChanged(Blazorise.FileChangedEventArgs fileChangedEventArgs) { }
        protected System.Threading.Tasks.Task OnEnded(Blazorise.FileEndedEventArgs fileEndedEventArgs) { }
        protected override System.Threading.Tasks.Task OnFirstAfterRenderAsync() { }
        protected override void OnInitialized() { }
        protected System.Threading.Tasks.Task OnProgressed(Blazorise.FileProgressedEventArgs fileProgressedEventArgs) { }
        protected System.Threading.Tasks.Task OnStarted(Blazorise.FileStartedEventArgs fileStartedEventArgs) { }
        public System.Threading.Tasks.Task RemoveFile(Blazorise.IFileEntry file, bool confirm = false) { }
        public System.Threading.Tasks.Task UploadAll() { }
        public System.Threading.Tasks.Task UploadFile(Blazorise.IFileEntry file, bool forceUpload = false) { }
        public static string GetFileSizeReadable(Blazorise.IFileEntry file) { }
    }
    public class FilePickerButtonsContext
    {
        public FilePickerButtonsContext() { }
        public FilePickerButtonsContext(Microsoft.AspNetCore.Components.EventCallback clear, Microsoft.AspNetCore.Components.EventCallback upload, Microsoft.AspNetCore.Components.EventCallback cancel) { }
        public Microsoft.AspNetCore.Components.EventCallback Cancel { get; }
        public Microsoft.AspNetCore.Components.EventCallback Clear { get; }
        public Microsoft.AspNetCore.Components.EventCallback Upload { get; }
    }
    public class FilePickerFileContext
    {
        public FilePickerFileContext(Blazorise.IFileEntry fileEntry, Microsoft.AspNetCore.Components.EventCallback<Blazorise.IFileEntry> removeFile) { }
        public Blazorise.IFileEntry File { get; }
        public System.Threading.Tasks.Task RemoveFile() { }
    }
    public enum FilePickerShowMode
    {
        List = 0,
        Dropdown = 1,
    }
    public class FileProgressedEventArgs : System.EventArgs
    {
        public FileProgressedEventArgs(Blazorise.IFileEntry file, double progress) { }
        public Blazorise.IFileEntry File { get; }
        public double Percentage { get; }
        public double Progress { get; }
    }
    public class FileStartedEventArgs : System.EventArgs
    {
        public FileStartedEventArgs(Blazorise.IFileEntry file) { }
        public Blazorise.IFileEntry File { get; }
    }
    public class FileUploadEventArgs : System.EventArgs
    {
        public FileUploadEventArgs(Blazorise.IFileEntry file) { }
        public Blazorise.IFileEntry File { get; }
    }
    public class FileWrittenEventArgs : System.EventArgs
    {
        public FileWrittenEventArgs(Blazorise.IFileEntry file, long position, byte[] data) { }
        public byte[] Data { get; }
        public Blazorise.IFileEntry File { get; }
        public long Position { get; }
    }
    public class FixedSizingDefiniton : System.IEquatable<Blazorise.FixedSizingDefiniton>
    {
        public FixedSizingDefiniton() { }
        public double Size { get; set; }
        public string Unit { get; set; }
    }
    public static class Flex
    {
        public static Blazorise.IFluentFlexAlignContentPosition AlignContent { get; }
        public static Blazorise.IFluentFlexAlignItemsPosition AlignItems { get; }
        public static Blazorise.IFluentFlexAlignSelfPosition AlignSelf { get; }
        public static Blazorise.IFluentFlexAll Column { get; }
        public static Blazorise.IFluentFlexAll Fill { get; }
        public static Blazorise.IFluentFlexGrowShrinkSize Grow { get; }
        public static Blazorise.IFluentFlexAll InlineFlex { get; }
        public static Blazorise.IFluentFlexJustifyContentPositions JustifyContent { get; }
        public static Blazorise.IFluentFlexAll NoWrap { get; }
        public static Blazorise.IFluentFlexOrderNumber Order { get; }
        public static Blazorise.IFluentFlexAll ReverseColumn { get; }
        public static Blazorise.IFluentFlexAll ReverseRow { get; }
        public static Blazorise.IFluentFlexAll ReverseWrap { get; }
        public static Blazorise.IFluentFlexAll Row { get; }
        public static Blazorise.IFluentFlexGrowShrinkSize Shrink { get; }
        public static Blazorise.IFluentFlexAll Wrap { get; }
        public static Blazorise.IFluentFlexAll _ { get; }
    }
    public enum FlexAlignContent
    {
        Default = 0,
        Start = 1,
        End = 2,
        Center = 3,
        Between = 4,
        Around = 5,
        Stretch = 6,
    }
    public enum FlexAlignItems
    {
        Default = 0,
        Start = 1,
        End = 2,
        Center = 3,
        Baseline = 4,
        Stretch = 5,
    }
    public enum FlexAlignSelf
    {
        Default = 0,
        Auto = 1,
        Start = 2,
        End = 3,
        Center = 4,
        Baseline = 5,
        Stretch = 6,
    }
    public class FlexDefinition : System.IEquatable<Blazorise.FlexDefinition>
    {
        public static readonly Blazorise.FlexDefinition Empty;
        public FlexDefinition() { }
        public Blazorise.FlexAlignContent AlignContent { get; set; }
        public Blazorise.FlexAlignItems AlignItems { get; set; }
        public Blazorise.FlexAlignSelf AlignSelf { get; set; }
        public Blazorise.Breakpoint Breakpoint { get; set; }
        public bool? Condition { get; set; }
        public Blazorise.FlexDirection Direction { get; set; }
        public bool Fill { get; set; }
        public Blazorise.FlexGrowShrink GrowShrink { get; set; }
        public Blazorise.FlexGrowShrinkSize GrowShrinkSize { get; set; }
        public Blazorise.FlexJustifyContent JustifyContent { get; set; }
        public Blazorise.FlexOrder Order { get; set; }
        public Blazorise.FlexWrap Wrap { get; set; }
    }
    public enum FlexDirection
    {
        Default = 0,
        Row = 1,
        Column = 2,
        ReverseRow = 3,
        ReverseColumn = 4,
    }
    public enum FlexGrowShrink
    {
        Default = 0,
        Grow = 1,
        Shrink = 2,
    }
    public enum FlexGrowShrinkSize
    {
        Default = 0,
        Is0 = 1,
        Is1 = 2,
    }
    public enum FlexJustifyContent
    {
        Default = 0,
        Start = 1,
        End = 2,
        Center = 3,
        Between = 4,
        Around = 5,
    }
    public enum FlexOrder
    {
        Default = 0,
        Is0 = 1,
        Is1 = 2,
        Is2 = 3,
        Is3 = 4,
        Is4 = 5,
        Is5 = 6,
        Is6 = 7,
        Is7 = 8,
        Is8 = 9,
        Is9 = 10,
        Is10 = 11,
        Is11 = 12,
        Is12 = 13,
    }
    public enum FlexType
    {
        Default = 0,
        Flex = 1,
        InlineFlex = 2,
    }
    public enum FlexWrap
    {
        Default = 0,
        Wrap = 1,
        ReverseWrap = 2,
        NoWrap = 3,
    }
    public enum Float
    {
        Default = 0,
        Start = 1,
        End = 2,
    }
    public class FluentBarCollapseMode : Blazorise.IFluentBarCollapseMode, Blazorise.IFluentBarCollapseModeOnBreakpoint, Blazorise.IFluentBarCollapseModeWithMode, Blazorise.IFluentDisplay
    {
        public FluentBarCollapseMode() { }
        public Blazorise.IFluentBarCollapseModeOnBreakpoint Hide { get; }
        public Blazorise.IFluentBarCollapseModeWithMode OnDesktop { get; }
        public Blazorise.IFluentBarCollapseModeWithMode OnFullHD { get; }
        public Blazorise.IFluentBarCollapseModeWithMode OnMobile { get; }
        public Blazorise.IFluentBarCollapseModeWithMode OnQuadHD { get; }
        public Blazorise.IFluentBarCollapseModeWithMode OnTablet { get; }
        public Blazorise.IFluentBarCollapseModeWithMode OnWidescreen { get; }
        public Blazorise.IFluentBarCollapseModeOnBreakpoint Small { get; }
        public string Class(Blazorise.IClassProvider classProvider) { }
        public Blazorise.IFluentBarCollapseModeWithMode WithBreakpoint(Blazorise.Breakpoint breakpoint) { }
        public Blazorise.IFluentBarCollapseModeOnBreakpoint WithMode(Blazorise.BarCollapseMode mode) { }
    }
    public class FluentBorder : Blazorise.IFluentBorder, Blazorise.IFluentBorderColor, Blazorise.IFluentBorderColorWithSide, Blazorise.IFluentBorderRadius, Blazorise.IFluentBorderSide, Blazorise.IFluentBorderSize, Blazorise.IFluentBorderWithAll, Blazorise.IFluentBorderWithSizeAndSide
    {
        public FluentBorder() { }
        public Blazorise.IFluentBorderColorWithSide Danger { get; }
        public Blazorise.IFluentBorderColorWithSide Dark { get; }
        public Blazorise.IFluentBorderColorWithSide Info { get; }
        public Blazorise.IFluentBorderWithAll Is0 { get; }
        public Blazorise.IFluentBorderWithAll Is1 { get; }
        public Blazorise.IFluentBorderWithAll Is2 { get; }
        public Blazorise.IFluentBorderWithAll Is3 { get; }
        public Blazorise.IFluentBorderWithAll Is4 { get; }
        public Blazorise.IFluentBorderWithAll Is5 { get; }
        public Blazorise.IFluentBorderColorWithSide Light { get; }
        public Blazorise.IFluentBorderWithAll OnAll { get; }
        public Blazorise.IFluentBorderWithAll OnBottom { get; }
        public Blazorise.IFluentBorderWithAll OnEnd { get; }
        public Blazorise.IFluentBorderWithAll OnStart { get; }
        public Blazorise.IFluentBorderWithAll OnTop { get; }
        public Blazorise.IFluentBorderColorWithSide Primary { get; }
        public Blazorise.IFluentBorderWithAll Rounded { get; }
        public Blazorise.IFluentBorderWithAll RoundedBottom { get; }
        public Blazorise.IFluentBorderWithAll RoundedCircle { get; }
        public Blazorise.IFluentBorderWithAll RoundedEnd { get; }
        public Blazorise.IFluentBorderWithAll RoundedPill { get; }
        public Blazorise.IFluentBorderWithAll RoundedStart { get; }
        public Blazorise.IFluentBorderWithAll RoundedTop { get; }
        public Blazorise.IFluentBorderWithAll RoundedZero { get; }
        public Blazorise.IFluentBorderColorWithSide Secondary { get; }
        public Blazorise.IFluentBorderColorWithSide Success { get; }
        public Blazorise.IFluentBorderColorWithSide Warning { get; }
        public Blazorise.IFluentBorderColorWithSide White { get; }
        public string Class(Blazorise.IClassProvider classProvider) { }
        public Blazorise.IFluentBorderColorWithSide WithColor(Blazorise.BorderColor borderColor) { }
        public Blazorise.IFluentBorderWithAll WithRadius(Blazorise.BorderRadius borderRadius) { }
        public Blazorise.IFluentBorderWithAll WithSide(Blazorise.BorderSide borderSide) { }
        public Blazorise.IFluentBorderWithAll WithSize(Blazorise.BorderSize borderSize) { }
    }
    public class FluentColumn : Blazorise.IFluentColumn, Blazorise.IFluentColumnOnBreakpoint, Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize, Blazorise.IFluentColumnWithOffset, Blazorise.IFluentColumnWithSize
    {
        public FluentColumn() { }
        public bool HasSizes { get; }
        public Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is1 { get; }
        public Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is10 { get; }
        public Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is11 { get; }
        public Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is12 { get; }
        public Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is2 { get; }
        public Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is3 { get; }
        public Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is4 { get; }
        public Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is5 { get; }
        public Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is6 { get; }
        public Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is7 { get; }
        public Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is8 { get; }
        public Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is9 { get; }
        public Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize IsAuto { get; }
        public Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize IsFull { get; }
        public Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize IsHalf { get; }
        public Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize IsQuarter { get; }
        public Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize IsThird { get; }
        public Blazorise.IFluentColumnWithSize OnDesktop { get; }
        public Blazorise.IFluentColumnWithSize OnFullHD { get; }
        public Blazorise.IFluentColumnWithSize OnMobile { get; }
        public Blazorise.IFluentColumnWithSize OnQuadHD { get; }
        public Blazorise.IFluentColumnWithSize OnTablet { get; }
        public Blazorise.IFluentColumnWithSize OnWidescreen { get; }
        public Blazorise.IFluentColumnOnBreakpoint WithOffset { get; }
        public string Class(bool grid, Blazorise.IClassProvider classProvider) { }
        public Blazorise.IFluentColumnWithSize Is(string value) { }
        public Blazorise.IFluentColumnWithSize WithBreakpoint(Blazorise.Breakpoint breakpoint) { }
        public Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize WithColumnSize(Blazorise.ColumnWidth columnSize) { }
        public Blazorise.IFluentColumnWithSize WithColumnSize(string value) { }
    }
    public class FluentDisplay : Blazorise.IFluentDisplay, Blazorise.IFluentDisplayOnBreakpoint, Blazorise.IFluentDisplayOnCondition, Blazorise.IFluentDisplayWithDisplay, Blazorise.IFluentDisplayWithDisplayFlexWithDirection, Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection
    {
        public FluentDisplay() { }
        public Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection Always { get; }
        public Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection Block { get; }
        public Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection Column { get; }
        public Blazorise.IFluentDisplayWithDisplayFlexWithDirection Flex { get; }
        public Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection Inline { get; }
        public Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection InlineBlock { get; }
        public Blazorise.IFluentDisplayWithDisplayFlexWithDirection InlineFlex { get; }
        public Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection None { get; }
        public Blazorise.IFluentDisplayWithDisplay OnDesktop { get; }
        public Blazorise.IFluentDisplayWithDisplay OnFullHD { get; }
        public Blazorise.IFluentDisplayWithDisplay OnMobile { get; }
        public Blazorise.IFluentDisplayWithDisplay OnQuadHD { get; }
        public Blazorise.IFluentDisplayWithDisplay OnTablet { get; }
        public Blazorise.IFluentDisplayWithDisplay OnWidescreen { get; }
        public Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection ReverseColumn { get; }
        public Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection ReverseRow { get; }
        public Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection Row { get; }
        public Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection Table { get; }
        public Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection TableCell { get; }
        public Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection TableRow { get; }
        public string Class(Blazorise.IClassProvider classProvider) { }
        public Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection If(bool condition) { }
        public Blazorise.IFluentDisplayWithDisplay WithBreakpoint(Blazorise.Breakpoint breakpoint) { }
        public Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection WithDirection(Blazorise.DisplayDirection direction) { }
        public Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection WithDisplay(Blazorise.DisplayType displayType) { }
        public Blazorise.IFluentDisplayWithDisplayFlexWithDirection WithFlex(Blazorise.DisplayType displayType) { }
    }
    public class FluentFlex : Blazorise.IFluentFlex, Blazorise.IFluentFlexAlignContent, Blazorise.IFluentFlexAlignContentPosition, Blazorise.IFluentFlexAlignItems, Blazorise.IFluentFlexAlignItemsPosition, Blazorise.IFluentFlexAlignSelf, Blazorise.IFluentFlexAlignSelfPosition, Blazorise.IFluentFlexAll, Blazorise.IFluentFlexBreakpoint, Blazorise.IFluentFlexCondition, Blazorise.IFluentFlexDirection, Blazorise.IFluentFlexFill, Blazorise.IFluentFlexGrowShrink, Blazorise.IFluentFlexGrowShrinkSize, Blazorise.IFluentFlexJustifyContent, Blazorise.IFluentFlexJustifyContentPositions, Blazorise.IFluentFlexOrder, Blazorise.IFluentFlexOrderNumber, Blazorise.IFluentFlexWrap
    {
        public FluentFlex() { }
        public Blazorise.IFluentFlexAll Column { get; }
        public Blazorise.IFluentFlexJustifyContentPositions JustifyContent { get; }
        public Blazorise.IFluentFlexAll NoWrap { get; }
        public Blazorise.IFluentFlexAll OnDesktop { get; }
        public Blazorise.IFluentFlexAll OnFullHD { get; }
        public Blazorise.IFluentFlexAll OnMobile { get; }
        public Blazorise.IFluentFlexAll OnQuadHD { get; }
        public Blazorise.IFluentFlexAll OnTablet { get; }
        public Blazorise.IFluentFlexAll OnWidescreen { get; }
        public Blazorise.IFluentFlexAll ReverseColumn { get; }
        public Blazorise.IFluentFlexAll ReverseRow { get; }
        public Blazorise.IFluentFlexAll ReverseWrap { get; }
        public Blazorise.IFluentFlexAll Row { get; }
        public Blazorise.IFluentFlexAll Wrap { get; }
        public string Class(Blazorise.IClassProvider classProvider) { }
        public Blazorise.IFluentFlexAll If(bool condition) { }
        public Blazorise.IFluentFlexAlignContentPosition WithAlignContent() { }
        public Blazorise.IFluentFlexAll WithAlignContent(Blazorise.FlexAlignContent alignContent) { }
        public Blazorise.IFluentFlexAlignItemsPosition WithAlignItems() { }
        public Blazorise.IFluentFlexAll WithAlignItems(Blazorise.FlexAlignItems alignItems) { }
        public Blazorise.IFluentFlexAlignSelfPosition WithAlignSelf() { }
        public Blazorise.IFluentFlexAll WithAlignSelf(Blazorise.FlexAlignSelf alignSelf) { }
        public Blazorise.IFluentFlexAll WithBreakpoint(Blazorise.Breakpoint breakpoint) { }
        public Blazorise.IFluentFlexAll WithDirection(Blazorise.FlexDirection direction) { }
        public Blazorise.IFluentFlexAll WithFill() { }
        public Blazorise.IFluentFlexAll WithFlexType(Blazorise.FlexType flexType) { }
        public Blazorise.IFluentFlexGrowShrinkSize WithGrowShrink(Blazorise.FlexGrowShrink growShrink) { }
        public Blazorise.IFluentFlexAll WithGrowShrinkSize(Blazorise.FlexGrowShrinkSize growShrinkSize) { }
        public Blazorise.IFluentFlexJustifyContentPositions WithJustifyContent() { }
        public Blazorise.IFluentFlexAll WithJustifyContent(Blazorise.FlexJustifyContent justifyContent) { }
        public Blazorise.IFluentFlexOrderNumber WithOrder() { }
        public Blazorise.IFluentFlexAll WithOrder(Blazorise.FlexOrder order) { }
        public Blazorise.IFluentFlexAll WithWrap(Blazorise.FlexWrap wrap) { }
    }
    public class FluentGap : Blazorise.IFluentGap, Blazorise.IFluentGapFromSide, Blazorise.IFluentGapWithSide, Blazorise.IFluentGapWithSideAndSize, Blazorise.IFluentGapWithSize
    {
        public FluentGap() { }
        public Blazorise.IFluentGapWithSideAndSize Is0 { get; }
        public Blazorise.IFluentGapWithSideAndSize Is1 { get; }
        public Blazorise.IFluentGapWithSideAndSize Is2 { get; }
        public Blazorise.IFluentGapWithSideAndSize Is3 { get; }
        public Blazorise.IFluentGapWithSideAndSize Is4 { get; }
        public Blazorise.IFluentGapWithSideAndSize Is5 { get; }
        public Blazorise.IFluentGapWithSideAndSize OnAll { get; }
        public Blazorise.IFluentGapWithSideAndSize OnX { get; }
        public Blazorise.IFluentGapWithSideAndSize OnY { get; }
        public string Class(Blazorise.IClassProvider classProvider) { }
        public Blazorise.IFluentGapWithSize Is(string value) { }
        public Blazorise.IFluentGapWithSideAndSize WithSide(Blazorise.GapSide side) { }
        public Blazorise.IFluentGapWithSideAndSize WithSize(Blazorise.GapSize gapSize) { }
    }
    public class FluentGridColumns : Blazorise.IFluentGridColumns, Blazorise.IFluentGridColumnsAll, Blazorise.IFluentGridColumnsBreakpoint, Blazorise.IFluentGridColumnsSize
    {
        public FluentGridColumns() { }
        public Blazorise.IFluentGridColumnsAll Are1 { get; }
        public Blazorise.IFluentGridColumnsAll Are10 { get; }
        public Blazorise.IFluentGridColumnsAll Are11 { get; }
        public Blazorise.IFluentGridColumnsAll Are12 { get; }
        public Blazorise.IFluentGridColumnsAll Are2 { get; }
        public Blazorise.IFluentGridColumnsAll Are3 { get; }
        public Blazorise.IFluentGridColumnsAll Are4 { get; }
        public Blazorise.IFluentGridColumnsAll Are5 { get; }
        public Blazorise.IFluentGridColumnsAll Are6 { get; }
        public Blazorise.IFluentGridColumnsAll Are7 { get; }
        public Blazorise.IFluentGridColumnsAll Are8 { get; }
        public Blazorise.IFluentGridColumnsAll Are9 { get; }
        public bool HasSizes { get; }
        public Blazorise.IFluentGridColumnsSize OnDesktop { get; }
        public Blazorise.IFluentGridColumnsSize OnFullHD { get; }
        public Blazorise.IFluentGridColumnsSize OnMobile { get; }
        public Blazorise.IFluentGridColumnsSize OnQuadHD { get; }
        public Blazorise.IFluentGridColumnsSize OnTablet { get; }
        public Blazorise.IFluentGridColumnsSize OnWidescreen { get; }
        public string Class(Blazorise.IClassProvider classProvider) { }
        public Blazorise.IFluentGridColumnsSize WithBreakpoint(Blazorise.Breakpoint breakpoint) { }
        public Blazorise.IFluentGridColumnsAll WithGridColumnsSize(Blazorise.GridColumnsSize gridColumnsSize) { }
    }
    public class FluentGridRows : Blazorise.IFluentGridRows, Blazorise.IFluentGridRowsAll, Blazorise.IFluentGridRowsBreakpoint, Blazorise.IFluentGridRowsSize
    {
        public FluentGridRows() { }
        public Blazorise.IFluentGridRowsAll Are1 { get; }
        public Blazorise.IFluentGridRowsAll Are2 { get; }
        public Blazorise.IFluentGridRowsAll Are3 { get; }
        public Blazorise.IFluentGridRowsAll Are4 { get; }
        public Blazorise.IFluentGridRowsAll Are5 { get; }
        public Blazorise.IFluentGridRowsAll Are6 { get; }
        public bool HasSizes { get; }
        public Blazorise.IFluentGridRowsSize OnDesktop { get; }
        public Blazorise.IFluentGridRowsSize OnFullHD { get; }
        public Blazorise.IFluentGridRowsSize OnMobile { get; }
        public Blazorise.IFluentGridRowsSize OnQuadHD { get; }
        public Blazorise.IFluentGridRowsSize OnTablet { get; }
        public Blazorise.IFluentGridRowsSize OnWidescreen { get; }
        public string Class(Blazorise.IClassProvider classProvider) { }
        public Blazorise.IFluentGridRowsSize WithBreakpoint(Blazorise.Breakpoint breakpoint) { }
        public Blazorise.IFluentGridRowsAll WithGridRowsSize(Blazorise.GridRowsSize gridRowsSize) { }
    }
    public sealed class FluentMargin : Blazorise.FluentSpacing
    {
        public FluentMargin() { }
    }
    public class FluentOverflow : Blazorise.IFluentOverflow, Blazorise.IFluentOverflowSecondRule
    {
        public FluentOverflow() { }
        public Blazorise.IFluentOverflow Auto { get; }
        public Blazorise.IFluentOverflow Hidden { get; }
        public Blazorise.IFluentOverflow Scroll { get; }
        public Blazorise.IFluentOverflow Visible { get; }
        public string Class(Blazorise.IClassProvider classProvider) { }
        public Blazorise.IFluentOverflowSecondRule WithOverflow(Blazorise.OverflowType overflowType) { }
        public Blazorise.IFluentOverflowSecondRule WithSecondOverflow(Blazorise.OverflowType overflowType) { }
    }
    public sealed class FluentPadding : Blazorise.FluentSpacing
    {
        public FluentPadding() { }
    }
    public class FluentPosition : Blazorise.IFluentPosition, Blazorise.IFluentPositionEdgeOffset, Blazorise.IFluentPositionEdgeType, Blazorise.IFluentPositionTranslate, Blazorise.IFluentPositionTranslateType, Blazorise.IFluentPositionType, Blazorise.IFluentPositionWithAll, Blazorise.IFluentPositionWithEdgeTypeAndTranslateType
    {
        public FluentPosition() { }
        public Blazorise.IFluentPositionWithEdgeTypeAndTranslateType Absolute { get; }
        public Blazorise.IFluentPositionEdgeOffset Bottom { get; }
        public Blazorise.IFluentPositionEdgeOffset End { get; }
        public Blazorise.IFluentPositionWithEdgeTypeAndTranslateType Fixed { get; }
        public Blazorise.IFluentPositionWithAll Is0 { get; }
        public Blazorise.IFluentPositionWithAll Is100 { get; }
        public Blazorise.IFluentPositionWithAll Is50 { get; }
        public Blazorise.IFluentPositionWithAll Middle { get; }
        public Blazorise.IFluentPositionWithAll MiddleX { get; }
        public Blazorise.IFluentPositionWithAll MiddleY { get; }
        public Blazorise.IFluentPositionWithEdgeTypeAndTranslateType Relative { get; }
        public Blazorise.IFluentPositionEdgeOffset Start { get; }
        public Blazorise.IFluentPositionWithEdgeTypeAndTranslateType Static { get; }
        public Blazorise.IFluentPositionWithEdgeTypeAndTranslateType Sticky { get; }
        public Blazorise.IFluentPositionEdgeOffset Top { get; }
        public Blazorise.IFluentPositionTranslateType Translate { get; }
        public string Class(Blazorise.IClassProvider classProvider) { }
        public Blazorise.IFluentPositionWithAll WithEdge(Blazorise.PositionEdgeType edgeType) { }
        public Blazorise.IFluentPositionWithAll WithEdgeOffset(int offset) { }
        public Blazorise.IFluentPositionWithAll WithPosition(Blazorise.PositionType positionType) { }
        public Blazorise.IFluentPositionWithAll WithTranslate(Blazorise.PositionTranslateType translateType) { }
    }
    public class FluentRowColumns : Blazorise.IFluentRowColumns, Blazorise.IFluentRowColumnsAll, Blazorise.IFluentRowColumnsBreakpoint, Blazorise.IFluentRowColumnsSize
    {
        public FluentRowColumns() { }
        public Blazorise.IFluentRowColumnsAll Are1 { get; }
        public Blazorise.IFluentRowColumnsAll Are2 { get; }
        public Blazorise.IFluentRowColumnsAll Are3 { get; }
        public Blazorise.IFluentRowColumnsAll Are4 { get; }
        public Blazorise.IFluentRowColumnsAll Are5 { get; }
        public Blazorise.IFluentRowColumnsAll Are6 { get; }
        public bool HasSizes { get; }
        public Blazorise.IFluentRowColumnsSize OnDesktop { get; }
        public Blazorise.IFluentRowColumnsSize OnFullHD { get; }
        public Blazorise.IFluentRowColumnsSize OnMobile { get; }
        public Blazorise.IFluentRowColumnsSize OnQuadHD { get; }
        public Blazorise.IFluentRowColumnsSize OnTablet { get; }
        public Blazorise.IFluentRowColumnsSize OnWidescreen { get; }
        public string Class(Blazorise.IClassProvider classProvider) { }
        public Blazorise.IFluentRowColumnsSize WithBreakpoint(Blazorise.Breakpoint breakpoint) { }
        public Blazorise.IFluentRowColumnsAll WithRowColumnsSize(Blazorise.RowColumnsSize rowColumnsSize) { }
    }
    public class FluentSizing : Blazorise.IFluentSizing, Blazorise.IFluentSizingMax, Blazorise.IFluentSizingMin, Blazorise.IFluentSizingMinMaxViewport, Blazorise.IFluentSizingMinMaxViewportOnBreakpoint, Blazorise.IFluentSizingOnBreakpoint, Blazorise.IFluentSizingSize, Blazorise.IFluentSizingViewport, Blazorise.IFluentSizingWithSizeOnBreakpoint, Blazorise.IFluentSizingWithSizeWithMinMaxWithViewportAll
    {
        public FluentSizing(Blazorise.SizingType sizingType) { }
        public double? FixedSize { get; }
        public Blazorise.IFluentSizingWithSizeWithMinMaxWithViewportAll OnDesktop { get; }
        public Blazorise.IFluentSizingWithSizeWithMinMaxWithViewportAll OnFullHD { get; }
        public Blazorise.IFluentSizingWithSizeWithMinMaxWithViewportAll OnMobile { get; }
        public Blazorise.IFluentSizingWithSizeWithMinMaxWithViewportAll OnQuadHD { get; }
        public Blazorise.IFluentSizingWithSizeWithMinMaxWithViewportAll OnTablet { get; }
        public Blazorise.IFluentSizingWithSizeWithMinMaxWithViewportAll OnWidescreen { get; }
        public string Class(Blazorise.IClassProvider classProvider) { }
        public string Style(Blazorise.IStyleProvider styleProvider) { }
        public Blazorise.IFluentSizingWithSizeWithMinMaxWithViewportAll WithBreakpoint(Blazorise.Breakpoint breakpoint) { }
        public Blazorise.IFluentSizingWithSizeOnBreakpoint WithMax() { }
        public Blazorise.IFluentSizingViewport WithMin() { }
        public Blazorise.IFluentSizingMinMaxViewportOnBreakpoint WithSize(Blazorise.SizingSize sizingSize) { }
        public Blazorise.IFluentSizing WithSize(string unit, double size) { }
        public Blazorise.IFluentSizing WithViewport() { }
    }
    public abstract class FluentSpacing : Blazorise.IFluentSpacing, Blazorise.IFluentSpacingFromSide, Blazorise.IFluentSpacingOnBreakpoint, Blazorise.IFluentSpacingOnBreakpointWithSide, Blazorise.IFluentSpacingOnBreakpointWithSideAndSize, Blazorise.IFluentSpacingWithSize
    {
        public FluentSpacing(Blazorise.Spacing spacing) { }
        public Blazorise.IFluentSpacingOnBreakpointWithSideAndSize FromBottom { get; }
        public Blazorise.IFluentSpacingOnBreakpointWithSideAndSize FromEnd { get; }
        public Blazorise.IFluentSpacingOnBreakpointWithSideAndSize FromStart { get; }
        public Blazorise.IFluentSpacingOnBreakpointWithSideAndSize FromTop { get; }
        public Blazorise.IFluentSpacingOnBreakpointWithSideAndSize Is0 { get; }
        public Blazorise.IFluentSpacingOnBreakpointWithSideAndSize Is1 { get; }
        public Blazorise.IFluentSpacingOnBreakpointWithSideAndSize Is2 { get; }
        public Blazorise.IFluentSpacingOnBreakpointWithSideAndSize Is3 { get; }
        public Blazorise.IFluentSpacingOnBreakpointWithSideAndSize Is4 { get; }
        public Blazorise.IFluentSpacingOnBreakpointWithSideAndSize Is5 { get; }
        public Blazorise.IFluentSpacingOnBreakpointWithSideAndSize IsAuto { get; }
        public Blazorise.IFluentSpacingOnBreakpointWithSideAndSize OnAll { get; }
        public Blazorise.IFluentSpacingOnBreakpointWithSideAndSize OnDesktop { get; }
        public Blazorise.IFluentSpacingOnBreakpointWithSideAndSize OnFullHD { get; }
        public Blazorise.IFluentSpacingOnBreakpointWithSideAndSize OnMobile { get; }
        public Blazorise.IFluentSpacingOnBreakpointWithSideAndSize OnQuadHD { get; }
        public Blazorise.IFluentSpacingOnBreakpointWithSideAndSize OnTablet { get; }
        public Blazorise.IFluentSpacingOnBreakpointWithSideAndSize OnWidescreen { get; }
        public Blazorise.IFluentSpacingOnBreakpointWithSideAndSize OnX { get; }
        public Blazorise.IFluentSpacingOnBreakpointWithSideAndSize OnY { get; }
        protected Blazorise.Spacing Spacing { get; }
        public string Class(Blazorise.IClassProvider classProvider) { }
        public Blazorise.IFluentSpacingWithSize Is(string value) { }
        public Blazorise.IFluentSpacingOnBreakpointWithSideAndSize WithBreakpoint(Blazorise.Breakpoint breakpoint) { }
        public Blazorise.IFluentSpacingOnBreakpointWithSideAndSize WithSide(Blazorise.Side side) { }
        public Blazorise.IFluentSpacingOnBreakpointWithSideAndSize WithSize(Blazorise.SpacingSize spacingSize) { }
    }
    public class FluentTextSize : Blazorise.IFluentTextSize, Blazorise.IFluentTextSizeOnBreakpoint, Blazorise.IFluentTextSizeWithSize
    {
        public FluentTextSize() { }
        public Blazorise.IFluentTextSizeOnBreakpoint Default { get; }
        public Blazorise.IFluentTextSizeOnBreakpoint ExtraLarge { get; }
        public Blazorise.IFluentTextSizeOnBreakpoint ExtraSmall { get; }
        public Blazorise.IFluentTextSizeOnBreakpoint Heading1 { get; }
        public Blazorise.IFluentTextSizeOnBreakpoint Heading2 { get; }
        public Blazorise.IFluentTextSizeOnBreakpoint Heading3 { get; }
        public Blazorise.IFluentTextSizeOnBreakpoint Heading4 { get; }
        public Blazorise.IFluentTextSizeOnBreakpoint Heading5 { get; }
        public Blazorise.IFluentTextSizeOnBreakpoint Heading6 { get; }
        public Blazorise.IFluentTextSizeOnBreakpoint Large { get; }
        public Blazorise.IFluentTextSizeOnBreakpoint Medium { get; }
        public Blazorise.IFluentTextSizeWithSize OnDesktop { get; }
        public Blazorise.IFluentTextSizeWithSize OnFullHD { get; }
        public Blazorise.IFluentTextSizeWithSize OnMobile { get; }
        public Blazorise.IFluentTextSizeWithSize OnQuadHD { get; }
        public Blazorise.IFluentTextSizeWithSize OnTablet { get; }
        public Blazorise.IFluentTextSizeWithSize OnWidescreen { get; }
        public Blazorise.IFluentTextSizeOnBreakpoint Small { get; }
        public string Class(Blazorise.IClassProvider classProvider) { }
        public Blazorise.IFluentTextSizeWithSize WithBreakpoint(Blazorise.Breakpoint breakpoint) { }
        public Blazorise.IFluentTextSizeOnBreakpoint WithSize(Blazorise.TextSizeType textSize) { }
    }
    public class FocusTrap : Blazorise.BaseFocusableContainerComponent
    {
        public FocusTrap() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Active { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected int FocusableTabIndex { get; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender) { }
        protected virtual System.Threading.Tasks.Task OnFocusEndHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs args) { }
        protected virtual System.Threading.Tasks.Task OnFocusStartHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs args) { }
        protected virtual void OnKeyPressedHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs args) { }
        public System.Threading.Tasks.Task SetFocus() { }
        public override System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) { }
        protected override bool ShouldRender() { }
    }
    public class Form : Blazorise.BaseComponent
    {
        public Form() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public static class Gap
    {
        public static Blazorise.IFluentGapWithSideAndSize Is0 { get; }
        public static Blazorise.IFluentGapWithSideAndSize Is1 { get; }
        public static Blazorise.IFluentGapWithSideAndSize Is2 { get; }
        public static Blazorise.IFluentGapWithSideAndSize Is3 { get; }
        public static Blazorise.IFluentGapWithSideAndSize Is4 { get; }
        public static Blazorise.IFluentGapWithSideAndSize Is5 { get; }
        public static Blazorise.IFluentGapWithSize Is(string value) { }
    }
    public enum GapSide
    {
        None = 0,
        X = 1,
        Y = 2,
        All = 3,
    }
    public enum GapSize
    {
        Is0 = 0,
        Is1 = 1,
        Is2 = 2,
        Is3 = 3,
        Is4 = 4,
        Is5 = 5,
    }
    public class Grid : Blazorise.BaseGridComponent
    {
        public Grid() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.IFluentGridColumns Columns { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.IFluentGridRows Rows { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public static class GridColumns
    {
        public static Blazorise.IFluentGridColumnsAll Are1 { get; }
        public static Blazorise.IFluentGridColumnsAll Are10 { get; }
        public static Blazorise.IFluentGridColumnsAll Are11 { get; }
        public static Blazorise.IFluentGridColumnsAll Are12 { get; }
        public static Blazorise.IFluentGridColumnsAll Are2 { get; }
        public static Blazorise.IFluentGridColumnsAll Are3 { get; }
        public static Blazorise.IFluentGridColumnsAll Are4 { get; }
        public static Blazorise.IFluentGridColumnsAll Are5 { get; }
        public static Blazorise.IFluentGridColumnsAll Are6 { get; }
        public static Blazorise.IFluentGridColumnsAll Are7 { get; }
        public static Blazorise.IFluentGridColumnsAll Are8 { get; }
        public static Blazorise.IFluentGridColumnsAll Are9 { get; }
    }
    public class GridColumnsDefinition : System.IEquatable<Blazorise.GridColumnsDefinition>
    {
        public GridColumnsDefinition() { }
        public Blazorise.Breakpoint Breakpoint { get; set; }
    }
    public enum GridColumnsSize
    {
        Default = 0,
        Are1 = 1,
        Are2 = 2,
        Are3 = 3,
        Are4 = 4,
        Are5 = 5,
        Are6 = 6,
        Are7 = 7,
        Are8 = 8,
        Are9 = 9,
        Are10 = 10,
        Are11 = 11,
        Are12 = 12,
    }
    public static class GridRows
    {
        public static Blazorise.IFluentGridRowsAll Are1 { get; }
        public static Blazorise.IFluentGridRowsAll Are2 { get; }
        public static Blazorise.IFluentGridRowsAll Are3 { get; }
        public static Blazorise.IFluentGridRowsAll Are4 { get; }
        public static Blazorise.IFluentGridRowsAll Are5 { get; }
        public static Blazorise.IFluentGridRowsAll Are6 { get; }
    }
    public class GridRowsDefinition : System.IEquatable<Blazorise.GridRowsDefinition>
    {
        public GridRowsDefinition() { }
        public Blazorise.Breakpoint Breakpoint { get; set; }
    }
    public enum GridRowsSize
    {
        Default = 0,
        Are1 = 1,
        Are2 = 2,
        Are3 = 3,
        Are4 = 4,
        Are5 = 5,
        Are6 = 6,
    }
    public class Heading : Blazorise.BaseTypographyComponent
    {
        public Heading() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public string AlternativeTagName { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.HeadingSize Size { get; set; }
        protected string SizeNumber { get; }
        protected string TagName { get; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public enum HeadingSize
    {
        Is1 = 0,
        Is2 = 1,
        Is3 = 2,
        Is4 = 3,
        Is5 = 4,
        Is6 = 5,
    }
    public static class Height
    {
        public static Blazorise.IFluentSizingMinMaxViewportOnBreakpoint Auto { get; }
        public static Blazorise.IFluentSizingMinMaxViewportOnBreakpoint Is100 { get; }
        public static Blazorise.IFluentSizingMinMaxViewportOnBreakpoint Is25 { get; }
        public static Blazorise.IFluentSizingMinMaxViewportOnBreakpoint Is33 { get; }
        public static Blazorise.IFluentSizingMinMaxViewportOnBreakpoint Is50 { get; }
        public static Blazorise.IFluentSizingMinMaxViewportOnBreakpoint Is66 { get; }
        public static Blazorise.IFluentSizingMinMaxViewportOnBreakpoint Is75 { get; }
        public static Blazorise.IFluentSizingWithSizeOnBreakpoint Max100 { get; }
        public static Blazorise.IFluentSizing Ch(double size) { }
        public static Blazorise.IFluentSizing Em(double size) { }
        public static Blazorise.IFluentSizing Px(double size) { }
        public static Blazorise.IFluentSizing Rem(double size) { }
    }
    public class Help : Blazorise.BaseComponent
    {
        public Help() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class Highlighter : Blazorise.BaseComponent
    {
        public Highlighter() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool CaseSensitive { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string HighlightedText { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string NextBoundary { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Text { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool UntilNextBoundary { get; set; }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void OnParametersSet() { }
    }
    public struct HslColor
    {
        public static readonly Blazorise.HslColor Empty;
        public HslColor(double hue, double saturation, double luminosity) { }
        public double Hue { get; set; }
        public double Luminosity { get; set; }
        public double Saturation { get; set; }
        public System.Drawing.Color ToColor() { }
    }
    public interface IAnimatedComponent : Blazorise.IHideableComponent
    {
        bool Animated { get; set; }
        int AnimationDuration { get; set; }
        System.Threading.Tasks.Task BeginAnimation(bool visible);
        System.Threading.Tasks.Task EndAnimation(bool visible);
    }
    public interface IBehaviourProvider
    {
        bool DataGridRowMultiSelectPreventClick { get; }
    }
    public interface IBreakpointActivator
    {
        Blazorise.Breakpoint Breakpoint { get; }
        string ElementId { get; }
        System.Threading.Tasks.Task OnBreakpoint(bool broken);
    }
    public interface IClassProvider
    {
        string Provider { get; }
        bool UseCustomInputStyles { get; set; }
        string Accordion();
        string AccordionBody();
        string AccordionBodyActive(bool active);
        string AccordionBodyContent(bool firstInAccordion, bool lastInAccordion);
        string AccordionHeader();
        string AccordionItem();
        string AccordionItemActive(bool active);
        string AccordionToggle();
        string AccordionToggleCollapsed(bool collapsed);
        string Active();
        string Addon(Blazorise.AddonType addonType);
        string AddonLabel();
        string AddonSize(Blazorise.Size size);
        string Addons();
        string AddonsHasButton(bool hasButton);
        string AddonsSize(Blazorise.Size size);
        string Alert();
        string AlertColor(Blazorise.Color color);
        string AlertDescription();
        string AlertDismisable(bool dismissable);
        string AlertFade(bool dismissable);
        string AlertHasDescription(bool hasDescription);
        string AlertHasMessage(bool hasMessage);
        string AlertMessage();
        string AlertShow(bool dismissable, bool visible);
        string AutocompleteItemFocus(bool focus);
        string BackgroundColor(Blazorise.Background background);
        string Badge();
        string BadgeClose();
        string BadgeCloseColor(Blazorise.Color color);
        string BadgeColor(Blazorise.Color color);
        string BadgePill(bool pill);
        string Bar(Blazorise.BarMode mode);
        string BarAlignment(Blazorise.BarMode mode, Blazorise.Alignment alignment);
        string BarBrand(Blazorise.BarMode mode);
        string BarBreakpoint(Blazorise.BarMode mode, Blazorise.Breakpoint breakpoint);
        string BarCollapsed(Blazorise.BarMode mode, bool visible);
        string BarDropdown(Blazorise.BarMode mode, bool isBarDropDownSubmenu);
        string BarDropdownDivider(Blazorise.BarMode mode);
        string BarDropdownItem(Blazorise.BarMode mode);
        string BarDropdownMenu(Blazorise.BarMode mode);
        string BarDropdownMenuContainer(Blazorise.BarMode mode);
        string BarDropdownMenuRight(Blazorise.BarMode mode, bool rightAligned);
        string BarDropdownMenuVisible(Blazorise.BarMode mode, bool visible);
        string BarDropdownShow(Blazorise.BarMode mode, bool show);
        string BarDropdownToggle(Blazorise.BarMode mode, bool isBarDropDownSubmenu);
        string BarDropdownToggleDisabled(Blazorise.BarMode mode, bool isBarDropDownSubmenu, bool disabled);
        string BarEnd(Blazorise.BarMode mode);
        string BarInitial(Blazorise.BarMode mode, bool initial);
        string BarItem(Blazorise.BarMode mode, bool hasDropdown);
        string BarItemActive(Blazorise.BarMode mode, bool active);
        string BarItemDisabled(Blazorise.BarMode mode, bool disabled);
        string BarItemHasDropdown(Blazorise.BarMode mode, bool hasDropdown);
        string BarLabel(Blazorise.BarMode mode);
        string BarLink(Blazorise.BarMode mode);
        string BarLinkDisabled(Blazorise.BarMode mode, bool disabled);
        string BarMenu(Blazorise.BarMode mode);
        string BarMenuShow(Blazorise.BarMode mode, bool show);
        string BarMode(Blazorise.BarMode mode);
        string BarStart(Blazorise.BarMode mode);
        string BarThemeContrast(Blazorise.BarMode mode, Blazorise.ThemeContrast themeContrast);
        string BarToggler(Blazorise.BarMode mode, Blazorise.BarTogglerMode togglerMode);
        string BarTogglerCollapsed(Blazorise.BarMode mode, Blazorise.BarTogglerMode togglerMode, bool isShow);
        string BarTogglerIcon(Blazorise.BarMode mode);
        string Blockquote();
        string BlockquoteFooter();
        string Border(Blazorise.BorderSize borderSize, [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "borderSide",
                "borderColor"})] System.Collections.Generic.IEnumerable<System.ValueTuple<Blazorise.BorderSide, Blazorise.BorderColor>> rules);
        string Border(Blazorise.BorderSize borderSize, Blazorise.BorderSide borderSide, Blazorise.BorderColor borderColor);
        string BorderRadius(Blazorise.BorderRadius borderRadius);
        string Breadcrumb();
        string BreadcrumbItem();
        string BreadcrumbItemActive(bool active);
        string BreadcrumbLink();
        string Button(bool outline);
        string ButtonActive(bool outline, bool active);
        string ButtonBlock(bool outline, bool block);
        string ButtonColor(Blazorise.Color color, bool outline);
        string ButtonDisabled(bool outline, bool disabled);
        string ButtonLoading(bool outline, bool loading);
        string ButtonSize(Blazorise.Size size, bool outline);
        string ButtonStretchedLink(bool stretched);
        string Buttons(Blazorise.ButtonsRole role, Blazorise.Orientation orientation);
        string ButtonsSize(Blazorise.Size size);
        string Card();
        string CardActions();
        string CardBody();
        string CardDeck();
        string CardFooter();
        string CardGroup();
        string CardHeader();
        string CardImage();
        string CardLink();
        string CardLinkActive(bool active);
        string CardLinkUnstyled(bool unstyled);
        string CardSubtitle(bool insideHeader);
        string CardSubtitleSize(bool insideHeader, int size);
        string CardText();
        string CardTitle(bool insideHeader);
        string CardTitleSize(bool insideHeader, int? size);
        string CardWhiteText(bool whiteText);
        string Carousel();
        string CarouselCaption();
        string CarouselFade(bool fade);
        string CarouselIndicator();
        string CarouselIndicatorActive(bool active);
        string CarouselIndicators();
        string CarouselSlide();
        string CarouselSlideActive(bool active);
        string CarouselSlideIndex(int activeSlideIndex, int slideindex, int totalSlides);
        string CarouselSlideSlidingLeft(bool left);
        string CarouselSlideSlidingNext(bool next);
        string CarouselSlideSlidingPrev(bool previous);
        string CarouselSlideSlidingRight(bool right);
        string CarouselSlides();
        string Casing(Blazorise.CharacterCasing characterCasing);
        string Chart();
        string Check();
        string CheckCursor(Blazorise.Cursor cursor);
        string CheckInline(bool inline);
        string CheckSize(Blazorise.Size size);
        string CheckValidation(Blazorise.ValidationStatus validationStatus);
        string Clearfix();
        string CloseButton();
        string Code();
        string Collapse(bool accordion);
        string CollapseActive(bool accordion, bool active);
        string CollapseBody(bool accordion);
        string CollapseBodyActive(bool accordion, bool active);
        string CollapseBodyContent(bool accordion, bool firstInAccordion, bool lastInAccordion);
        string CollapseHeader(bool accordion);
        string Collapsed();
        string ColorEdit();
        string ColorEditSize(Blazorise.Size size);
        string ColorPicker();
        string ColorPickerSize(Blazorise.Size size);
        string Column(bool grid, bool hasSizes);
        string Column(bool grid, System.Collections.Generic.IEnumerable<Blazorise.ColumnDefinition> columnDefinitions);
        string Column(bool grid, Blazorise.ColumnWidth columnWidth, Blazorise.Breakpoint breakpoint, bool offset);
        string Container(Blazorise.Breakpoint breakpoint);
        string ContainerFluid();
        string ControlCheck(Blazorise.ControlRole role);
        string ControlFile(Blazorise.ControlRole role);
        string ControlInline(Blazorise.ControlRole role, bool inline);
        string ControlRadio(Blazorise.ControlRole role);
        string ControlSwitch(Blazorise.ControlRole role);
        string ControlText(Blazorise.ControlRole role);
        string DateEdit(bool plaintext);
        string DateEditColor(Blazorise.Color color);
        string DateEditSize(Blazorise.Size size);
        string DateEditValidation(Blazorise.ValidationStatus validationStatus);
        string DatePicker(bool plaintext);
        string DatePickerColor(Blazorise.Color color);
        string DatePickerSize(Blazorise.Size size);
        string DatePickerValidation(Blazorise.ValidationStatus validationStatus);
        string DescriptionList();
        string DescriptionListDefinition();
        string DescriptionListTerm();
        string Disabled();
        string Display(Blazorise.DisplayType displayType, Blazorise.DisplayDefinition displayDefinition);
        string Display(Blazorise.DisplayType displayType, System.Collections.Generic.IEnumerable<Blazorise.DisplayDefinition> displayDefinitions);
        string DisplayHeadingSize(Blazorise.DisplayHeadingSize displayHeadingSize);
        string Divider();
        string DividerType(Blazorise.DividerType dividerType);
        string Dropdown(bool isDropdownSubmenu);
        string DropdownDirection(Blazorise.Direction direction);
        string DropdownDisabled(bool disabled);
        string DropdownDivider();
        string DropdownFixedHeaderVisible(bool visible);
        string DropdownGroup(bool group);
        string DropdownHeader();
        string DropdownItem();
        string DropdownItemActive(bool active);
        string DropdownItemDisabled(bool disabled);
        string DropdownMenu();
        string DropdownMenuPositionStrategy(Blazorise.DropdownPositionStrategy dropdownPositionStrategy);
        string DropdownMenuRight(bool rightAligned);
        string DropdownMenuScrollable(bool scrollable);
        string DropdownMenuSelector();
        string DropdownMenuVisible(bool visible);
        string DropdownObserverShow();
        string DropdownRight(bool rightAligned);
        string DropdownShow(bool show);
        string DropdownToggle(bool isDropdownSubmenu, bool outline);
        string DropdownToggleColor(Blazorise.Color color, bool outline);
        string DropdownToggleIcon(bool visible);
        string DropdownToggleSelector(bool isDropdownSubmenu);
        string DropdownToggleSize(Blazorise.Size size, bool outline);
        string DropdownToggleSplit(bool split);
        string Fade();
        string Field();
        string FieldBody();
        string FieldColumn();
        string FieldHelp();
        string FieldHorizontal(bool horizontal);
        string FieldJustifyContent(Blazorise.JustifyContent justifyContent);
        string FieldLabel(bool horizontal);
        string FieldLabelRequiredIndicator(bool requiredIndicator);
        string FieldLabelScreenreader(Blazorise.Screenreader screenreader);
        string FieldSize(Blazorise.Size size);
        string FieldValidation(Blazorise.ValidationStatus validationStatus);
        string Fields();
        string FieldsBody();
        string FieldsColumn();
        string Figure();
        string FigureCaption();
        string FigureImage();
        string FigureImageRounded(bool rounded);
        string FigureSize(Blazorise.FigureSize figureSize);
        string FileEdit();
        string FileEditSize(Blazorise.Size size);
        string FileEditValidation(Blazorise.ValidationStatus validationStatus);
        string Flex(Blazorise.FlexDefinition flexDefinition);
        string Flex(Blazorise.FlexType flexType);
        string Flex(Blazorise.FlexType flexType, System.Collections.Generic.IEnumerable<Blazorise.FlexDefinition> flexDefinitions);
        string Float(Blazorise.Float @float);
        string FocusTrap();
        string Gap(Blazorise.GapSize gapSize, Blazorise.GapSide gapSide);
        string Gap(Blazorise.GapSize gapSize, System.Collections.Generic.IEnumerable<Blazorise.GapSide> rules);
        string Grid();
        string GridColumns(Blazorise.GridColumnsSize gridColumns, Blazorise.GridColumnsDefinition gridColumnsDefinition);
        string GridRows(Blazorise.GridRowsSize gridRows, Blazorise.GridRowsDefinition gridRowsDefinition);
        string HeadingSize(Blazorise.HeadingSize headingSize);
        string Help();
        string Image();
        string ImageFluid(bool fluid);
        string Inline();
        string InputMask(bool plaintext);
        string InputMaskColor(Blazorise.Color color);
        string InputMaskSize(Blazorise.Size size);
        string InputMaskValidation(Blazorise.ValidationStatus validationStatus);
        string Jumbotron();
        string JumbotronBackground(Blazorise.Background background);
        string JumbotronSubtitle();
        string JumbotronTitle(Blazorise.JumbotronTitleSize jumbotronTitleSize);
        string LabelCursor(Blazorise.Cursor cursor);
        string LabelType(Blazorise.LabelType labelType);
        string Layout();
        string LayoutContent();
        string LayoutFooter();
        string LayoutFooterFixed(bool @fixed);
        string LayoutHasSider(bool hasSider);
        string LayoutHeader();
        string LayoutHeaderFixed(bool @fixed);
        string LayoutLoading();
        string LayoutRoot(bool root);
        string LayoutSider();
        string LayoutSiderContent();
        string Lead();
        string Link();
        string LinkActive(bool active);
        string LinkDisabled(bool disabled);
        string LinkStretched(bool stretched);
        string LinkUnstyled(bool unstyled);
        string ListGroup();
        string ListGroupFlush(bool flush);
        string ListGroupItem();
        string ListGroupItemActive(bool active);
        string ListGroupItemColor(Blazorise.Color color, bool selectable, bool active);
        string ListGroupItemDisabled(bool disabled);
        string ListGroupItemSelectable(bool selectable);
        string ListGroupScrollable(bool scrollable);
        string Media();
        string MediaBody();
        string MediaLeft();
        string MediaRight();
        string MemoEdit(bool plaintext);
        string MemoEditSize(Blazorise.Size size);
        string MemoEditValidation(Blazorise.ValidationStatus validationStatus);
        string Modal();
        string ModalBackdrop();
        string ModalBackdropFade();
        string ModalBackdropVisible(bool visible);
        string ModalBody();
        string ModalCentered(bool centered);
        string ModalContent(bool dialog);
        string ModalContentCentered(bool centered);
        string ModalContentScrollable(bool scrollable);
        string ModalContentSize(Blazorise.ModalSize modalSize);
        string ModalFade(bool showing, bool hiding);
        string ModalFooter();
        string ModalHeader();
        string ModalSize(Blazorise.ModalSize modalSize);
        string ModalTitle();
        string ModalVisible(bool visible);
        string NumericEdit(bool plaintext);
        string NumericEditColor(Blazorise.Color color);
        string NumericEditSize(Blazorise.Size size);
        string NumericEditValidation(Blazorise.ValidationStatus validationStatus);
        string NumericPicker(bool plaintext);
        string NumericPickerColor(Blazorise.Color color);
        string NumericPickerSize(Blazorise.Size size);
        string NumericPickerValidation(Blazorise.ValidationStatus validationStatus);
        string Offcanvas();
        string OffcanvasBackdrop();
        string OffcanvasBackdropFade(bool showing, bool hiding);
        string OffcanvasBackdropVisible(bool visible);
        string OffcanvasBody();
        string OffcanvasFade(bool showing, bool hiding);
        string OffcanvasFooter();
        string OffcanvasHeader();
        string OffcanvasPlacement(Blazorise.Placement placement, bool visible);
        string OffcanvasVisible(bool visible);
        string OrderedList();
        string OrderedListType(Blazorise.OrderedListType orderedListType);
        string OrderedListUnstyled(bool unstyled);
        string Overflow(Blazorise.OverflowType overflowType, Blazorise.OverflowType secondOverflowType);
        string Pagination();
        string PaginationAlignment(Blazorise.Alignment alignment);
        string PaginationBackgroundColor(Blazorise.Background background);
        string PaginationItem();
        string PaginationItemActive(bool active);
        string PaginationItemDisabled(bool disabled);
        string PaginationLink();
        string PaginationLinkActive(bool active);
        string PaginationLinkDisabled(bool disabled);
        string PaginationLinkSize(Blazorise.Size size);
        string PaginationSize(Blazorise.Size size);
        string Paragraph();
        string ParagraphColor(Blazorise.TextColor textColor);
        string Position(Blazorise.PositionType positionType, [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "edgeType",
                "edgeOffset"})] System.Collections.Generic.IEnumerable<System.ValueTuple<Blazorise.PositionEdgeType, int>> edges, Blazorise.PositionTranslateType translateType);
        string Position(Blazorise.PositionType positionType, Blazorise.PositionEdgeType edgeType, int edgeOffset, Blazorise.PositionTranslateType translateType);
        string Progress();
        string ProgressAnimated(bool animated);
        string ProgressBar();
        string ProgressBarAnimated(bool animated);
        string ProgressBarColor(Blazorise.Color color);
        string ProgressBarIndeterminate(bool indeterminate);
        string ProgressBarSize(Blazorise.Size size);
        string ProgressBarStriped(bool striped);
        string ProgressBarWidth(int width);
        string ProgressColor(Blazorise.Color color);
        string ProgressIndeterminate(bool indeterminate);
        string ProgressSize(Blazorise.Size size);
        string ProgressStriped(bool stripped);
        string ProgressWidth(int width);
        string Radio(bool button);
        string RadioCursor(Blazorise.Cursor cursor);
        string RadioGroup(bool buttons, Blazorise.Orientation orientation);
        string RadioGroupSize(bool buttons, Blazorise.Orientation orientation, Blazorise.Size size);
        string RadioGroupValidation(Blazorise.ValidationStatus validationStatus);
        string RadioInline(bool inline);
        string RadioSize(bool button, Blazorise.Size size);
        string RadioValidation(Blazorise.ValidationStatus validationStatus);
        string Rating();
        string RatingDisabled(bool disabled);
        string RatingItem();
        string RatingItemColor(Blazorise.Color color);
        string RatingItemHovered(bool hover);
        string RatingItemSelected(bool selected);
        string RatingReadonly(bool @readonly);
        string Row();
        string RowColumns(Blazorise.RowColumnsSize rowColumnsSize, Blazorise.RowColumnsDefinition rowColumnsDefinition);
        string RowNoGutters(bool noGutters);
        string Select();
        string SelectMultiple(bool multiple);
        string SelectSize(Blazorise.Size size);
        string SelectValidation(Blazorise.ValidationStatus validationStatus);
        string Shadow(Blazorise.Shadow shadow);
        string Show();
        string Sizing(Blazorise.SizingType sizingType, Blazorise.SizingSize sizingSize, Blazorise.SizingDefinition sizingDefinition);
        string Sizing(Blazorise.SizingType sizingType, Blazorise.SizingSize sizingSize, System.Collections.Generic.IEnumerable<Blazorise.SizingDefinition> rules);
        string Slider();
        string SliderColor(Blazorise.Color color);
        string SliderValidation(Blazorise.ValidationStatus validationStatus);
        string Spacing(Blazorise.Spacing spacing, Blazorise.SpacingSize spacingSize, [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "side",
                "breakpoint"})] System.Collections.Generic.IEnumerable<System.ValueTuple<Blazorise.Side, Blazorise.Breakpoint>> rules);
        string Spacing(Blazorise.Spacing spacing, Blazorise.SpacingSize spacingSize, Blazorise.Side side, Blazorise.Breakpoint breakpoint);
        string StepItem();
        string StepItemActive(bool active);
        string StepItemColor(Blazorise.Color color);
        string StepItemCompleted(bool completed);
        string StepItemDescription();
        string StepItemMarker();
        string StepItemMarkerColor(Blazorise.Color color, bool active);
        string StepPanel();
        string StepPanelActive(bool active);
        string Steps();
        string StepsContent();
        string Switch();
        string SwitchChecked(bool @checked);
        string SwitchColor(Blazorise.Color color);
        string SwitchCursor(Blazorise.Cursor cursor);
        string SwitchSize(Blazorise.Size size);
        string SwitchValidation(Blazorise.ValidationStatus validationStatus);
        string TabItem(Blazorise.TabPosition tabPosition);
        string TabItemActive(bool active);
        string TabItemDisabled(bool disabled);
        string TabLink(Blazorise.TabPosition tabPosition);
        string TabLinkActive(bool active);
        string TabLinkDisabled(bool disabled);
        string TabPanel();
        string TabPanelActive(bool active);
        string Table();
        string TableBody();
        string TableBordered(bool bordered);
        string TableBorderless(bool borderless);
        string TableFixedColumns(bool fixedColumns);
        string TableFixedHeader(bool fixedHeader);
        string TableFooter();
        string TableFullWidth(bool fullWidth);
        string TableHeader();
        string TableHeaderCell();
        string TableHeaderCellCursor(Blazorise.Cursor cursor);
        string TableHeaderCellFixed(Blazorise.TableColumnFixedPosition fixedPosition);
        string TableHeaderThemeContrast(Blazorise.ThemeContrast themeContrast);
        string TableHoverable(bool hoverable);
        string TableNarrow(bool narrow);
        string TableResponsive(bool responsive);
        string TableResponsiveMode(Blazorise.TableResponsiveMode responsiveMode);
        string TableRow(bool striped, bool hoverable);
        string TableRowCell();
        string TableRowCellColor(Blazorise.Color color);
        string TableRowCellFixed(Blazorise.TableColumnFixedPosition fixedPosition);
        string TableRowColor(Blazorise.Color color);
        string TableRowGroup(bool expanded);
        string TableRowGroupCell();
        string TableRowGroupIndentCell();
        string TableRowHeader();
        string TableRowHeaderFixed(Blazorise.TableColumnFixedPosition fixedPosition);
        string TableRowHoverCursor(Blazorise.Cursor cursor);
        string TableRowIsSelected(bool selected);
        string TableStriped(bool striped);
        string Tabs(bool pills);
        string TabsCards(bool cards);
        string TabsContent();
        string TabsFullWidth(bool fullWidth);
        string TabsJustified(bool justified);
        string TabsVertical(bool vertical);
        string TextAlignment(Blazorise.TextAlignment textAlignment);
        string TextColor(Blazorise.TextColor textColor);
        string TextEdit(bool plaintext);
        string TextEditColor(Blazorise.Color color);
        string TextEditSize(Blazorise.Size size);
        string TextEditValidation(Blazorise.ValidationStatus validationStatus);
        string TextItalic(bool italic);
        string TextOverflow(Blazorise.TextOverflow textOverflow);
        string TextSize(Blazorise.TextSizeType textSizeType, Blazorise.TextSizeDefinition textSizeDefinition);
        string TextTransform(Blazorise.TextTransform textTransform);
        string TextWeight(Blazorise.TextWeight textWeight);
        string TimeEdit(bool plaintext);
        string TimeEditColor(Blazorise.Color color);
        string TimeEditSize(Blazorise.Size size);
        string TimeEditValidation(Blazorise.ValidationStatus validationStatus);
        string TimePicker(bool plaintext);
        string TimePickerColor(Blazorise.Color color);
        string TimePickerSize(Blazorise.Size size);
        string TimePickerValidation(Blazorise.ValidationStatus validationStatus);
        string ToAlignContent(Blazorise.FlexAlignContent alignContent);
        string ToAlignItems(Blazorise.FlexAlignItems alignItems);
        string ToAlignSelf(Blazorise.FlexAlignSelf alignSelf);
        string ToAlignment(Blazorise.Alignment alignment);
        string ToBackground(Blazorise.Background background);
        string ToBarCollapsedMode(Blazorise.BarCollapseMode collapseMode);
        string ToBarMode(Blazorise.BarMode mode);
        string ToBorderRadius(Blazorise.BorderRadius borderRadius);
        string ToBreakpoint(Blazorise.Breakpoint breakpoint);
        string ToCharacterCasing(Blazorise.CharacterCasing characterCasing);
        string ToColor(Blazorise.Color color);
        string ToColumnWidth(Blazorise.ColumnWidth columnWidth);
        string ToDirection(Blazorise.FlexDirection direction);
        string ToDisplayDirection(Blazorise.DisplayDirection displayDirection);
        string ToDisplayHeadingSize(Blazorise.DisplayHeadingSize displayHeadingSize);
        string ToDisplayType(Blazorise.DisplayType displayType);
        string ToFigureSize(Blazorise.FigureSize figureSize);
        string ToFloat(Blazorise.Float @float);
        string ToGapSize(Blazorise.GapSize gapSize);
        string ToGrowShrink(Blazorise.FlexGrowShrink growShrink);
        string ToGrowShrinkSize(Blazorise.FlexGrowShrinkSize growShrinkSize);
        string ToHeadingSize(Blazorise.HeadingSize headingSize);
        string ToJumbotronTitleSize(Blazorise.JumbotronTitleSize jumbotronTitleSize);
        string ToJustifyContent(Blazorise.FlexJustifyContent justifyContent);
        string ToJustifyContent(Blazorise.JustifyContent justifyContent);
        string ToModalSize(Blazorise.ModalSize modalSize);
        string ToOrder(Blazorise.FlexOrder order);
        string ToOrderedListType(Blazorise.OrderedListType orderedListType);
        string ToPlacement(Blazorise.Placement placement);
        string ToPositionEdgeType(Blazorise.PositionEdgeType positionEdgeType);
        string ToPositionTranslateType(Blazorise.PositionTranslateType positionTranslateType);
        string ToPositionType(Blazorise.PositionType positionType);
        string ToScreenreader(Blazorise.Screenreader screenreader);
        string ToShadow(Blazorise.Shadow shadow);
        string ToSide(Blazorise.Side side);
        string ToSize(Blazorise.Size size);
        string ToSizingSize(Blazorise.SizingSize sizingSize);
        string ToSizingType(Blazorise.SizingType sizingType);
        string ToSpacing(Blazorise.Spacing spacing);
        string ToSpacingSize(Blazorise.SpacingSize spacingSize);
        string ToTableColumnFixedPosition(Blazorise.TableColumnFixedPosition tableColumnFixedPosition);
        string ToTextAlignment(Blazorise.TextAlignment textAlignment);
        string ToTextColor(Blazorise.TextColor textColor);
        string ToTextOverflow(Blazorise.TextOverflow textOverflow);
        string ToTextSizeType(Blazorise.TextSizeType textSizeType);
        string ToTextTransform(Blazorise.TextTransform textTransform);
        string ToTextWeight(Blazorise.TextWeight textWeight);
        string ToThemeContrast(Blazorise.ThemeContrast themeContrast);
        string ToTooltipPlacement(Blazorise.TooltipPlacement tooltipPlacement);
        string ToVerticalAlignment(Blazorise.VerticalAlignment verticalAlignment);
        string ToWrap(Blazorise.FlexWrap wrap);
        string Toast();
        string ToastAnimated(bool animated);
        string ToastBody();
        string ToastFade(bool visible, bool showing, bool hiding);
        string ToastHeader();
        string ToastVisible(bool visible);
        string Toaster();
        string ToasterPlacement(Blazorise.ToasterPlacement placement);
        string ToasterPlacementStrategy(Blazorise.ToasterPlacementStrategy placementStrategy);
        string Tooltip();
        string TooltipAlwaysActive(bool alwaysActive);
        string TooltipFade(bool fade);
        string TooltipInline(bool inline);
        string TooltipMultiline(bool multiline);
        string TooltipPlacement(Blazorise.TooltipPlacement tooltipPlacement);
        string UnorderedList();
        string UnorderedListUnstyled(bool unstyled);
        string ValidationError();
        string ValidationErrorTooltip();
        string ValidationNone();
        string ValidationSuccess();
        string ValidationSuccessTooltip();
        string ValidationSummary();
        string ValidationSummaryError();
        string VerticalAlignment(Blazorise.VerticalAlignment verticalAlignment);
        string Visibility(Blazorise.Visibility visibility);
    }
    public interface ICloseActivator
    {
        string ElementId { get; }
        Microsoft.AspNetCore.Components.ElementReference ElementRef { get; }
        System.Threading.Tasks.Task Close(Blazorise.CloseReason closeReason);
        System.Threading.Tasks.Task<bool> IsSafeToClose(string elementId, Blazorise.CloseReason closeReason, bool isChild);
    }
    public interface IColumnComponent
    {
        Blazorise.IFluentColumn ColumnSize { get; }
    }
    public interface IComponentDisposer
    {
        void Dispose<TComponent>(TComponent component)
            where TComponent : Microsoft.AspNetCore.Components.IComponent;
    }
    public interface IDatePicker
    {
        System.Threading.Tasks.Task OnBlurHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs);
        System.Threading.Tasks.Task OnFocusHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs);
        System.Threading.Tasks.Task OnFocusInHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs);
        System.Threading.Tasks.Task OnFocusOutHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs);
        System.Threading.Tasks.Task OnKeyDownHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs);
        System.Threading.Tasks.Task OnKeyPressHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs);
        System.Threading.Tasks.Task OnKeyUpHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs);
    }
    public interface IEditContextValidator
    {
        void ValidateField(Microsoft.AspNetCore.Components.Forms.EditContext editContext, Microsoft.AspNetCore.Components.Forms.ValidationMessageStore messages, in Microsoft.AspNetCore.Components.Forms.FieldIdentifier fieldIdentifier, System.Func<string, System.Collections.Generic.IEnumerable<string>, string> messageLocalizer);
    }
    public interface IFileEdit
    {
        System.Threading.Tasks.Task NotifyChange(Blazorise.FileEntry[] files);
    }
    public interface IFileEntry
    {
        string ErrorMessage { get; set; }
        System.Threading.Tasks.TaskCompletionSource FileUploadEndedCallback { get; set; }
        int Id { get; }
        System.DateTime LastModified { get; }
        string Name { get; }
        string RelativePath { get; }
        long Size { get; }
        Blazorise.FileEntryStatus Status { get; set; }
        string Type { get; }
        string UploadUrl { get; set; }
        System.Threading.Tasks.Task Cancel();
        System.IO.Stream OpenReadStream(long maxAllowedSize = 512000, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task WriteToStreamAsync(System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default);
    }
    public interface IFileEntryNotifier
    {
        System.Threading.Tasks.Task UpdateFileEndedAsync(Blazorise.IFileEntry fileEntry, bool success, Blazorise.FileInvalidReason fileInvalidReason);
        System.Threading.Tasks.Task UpdateFileProgressAsync(Blazorise.IFileEntry fileEntry, long progressProgress);
        System.Threading.Tasks.Task UpdateFileStartedAsync(Blazorise.IFileEntry fileEntry);
        System.Threading.Tasks.Task UpdateFileWrittenAsync(Blazorise.IFileEntry fileEntry, long position, byte[] data);
    }
    public interface IFileEntryOwner
    {
        System.IO.Stream OpenReadStream(Blazorise.FileEntry fileEntry, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task WriteToStreamAsync(Blazorise.FileEntry fileEntry, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default);
    }
    public interface IFluentBarCollapseMode
    {
        string Class(Blazorise.IClassProvider classProvider);
    }
    public interface IFluentBarCollapseModeOnBreakpoint : Blazorise.IFluentDisplay
    {
        Blazorise.IFluentBarCollapseModeWithMode OnDesktop { get; }
        Blazorise.IFluentBarCollapseModeWithMode OnFullHD { get; }
        Blazorise.IFluentBarCollapseModeWithMode OnMobile { get; }
        Blazorise.IFluentBarCollapseModeWithMode OnQuadHD { get; }
        Blazorise.IFluentBarCollapseModeWithMode OnTablet { get; }
        Blazorise.IFluentBarCollapseModeWithMode OnWidescreen { get; }
    }
    public interface IFluentBarCollapseModeWithMode
    {
        Blazorise.IFluentBarCollapseModeOnBreakpoint Hide { get; }
        Blazorise.IFluentBarCollapseModeOnBreakpoint Small { get; }
    }
    public interface IFluentBorder
    {
        string Class(Blazorise.IClassProvider classProvider);
    }
    public interface IFluentBorderColor : Blazorise.IFluentBorder
    {
        Blazorise.IFluentBorderColorWithSide Danger { get; }
        Blazorise.IFluentBorderColorWithSide Dark { get; }
        Blazorise.IFluentBorderColorWithSide Info { get; }
        Blazorise.IFluentBorderColorWithSide Light { get; }
        Blazorise.IFluentBorderColorWithSide Primary { get; }
        Blazorise.IFluentBorderColorWithSide Secondary { get; }
        Blazorise.IFluentBorderColorWithSide Success { get; }
        Blazorise.IFluentBorderColorWithSide Warning { get; }
        Blazorise.IFluentBorderColorWithSide White { get; }
    }
    public interface IFluentBorderColorWithSide : Blazorise.IFluentBorder, Blazorise.IFluentBorderSide { }
    public interface IFluentBorderRadius : Blazorise.IFluentBorder
    {
        Blazorise.IFluentBorderWithAll Rounded { get; }
        Blazorise.IFluentBorderWithAll RoundedBottom { get; }
        Blazorise.IFluentBorderWithAll RoundedCircle { get; }
        Blazorise.IFluentBorderWithAll RoundedEnd { get; }
        Blazorise.IFluentBorderWithAll RoundedPill { get; }
        Blazorise.IFluentBorderWithAll RoundedStart { get; }
        Blazorise.IFluentBorderWithAll RoundedTop { get; }
        Blazorise.IFluentBorderWithAll RoundedZero { get; }
    }
    public interface IFluentBorderSide : Blazorise.IFluentBorder
    {
        Blazorise.IFluentBorderWithAll OnAll { get; }
        Blazorise.IFluentBorderWithAll OnBottom { get; }
        Blazorise.IFluentBorderWithAll OnEnd { get; }
        Blazorise.IFluentBorderWithAll OnStart { get; }
        Blazorise.IFluentBorderWithAll OnTop { get; }
    }
    public interface IFluentBorderSize : Blazorise.IFluentBorder
    {
        Blazorise.IFluentBorderWithAll Is0 { get; }
        Blazorise.IFluentBorderWithAll Is1 { get; }
        Blazorise.IFluentBorderWithAll Is2 { get; }
        Blazorise.IFluentBorderWithAll Is3 { get; }
        Blazorise.IFluentBorderWithAll Is4 { get; }
        Blazorise.IFluentBorderWithAll Is5 { get; }
    }
    public interface IFluentBorderWithAll : Blazorise.IFluentBorder, Blazorise.IFluentBorderColor, Blazorise.IFluentBorderColorWithSide, Blazorise.IFluentBorderRadius, Blazorise.IFluentBorderSide, Blazorise.IFluentBorderSize, Blazorise.IFluentBorderWithSizeAndSide { }
    public interface IFluentBorderWithSizeAndSide : Blazorise.IFluentBorder, Blazorise.IFluentBorderSide, Blazorise.IFluentBorderSize { }
    public interface IFluentColumn
    {
        bool HasSizes { get; }
        string Class(bool grid, Blazorise.IClassProvider classProvider);
    }
    public interface IFluentColumnOnBreakpoint : Blazorise.IFluentColumn
    {
        Blazorise.IFluentColumnWithSize OnDesktop { get; }
        Blazorise.IFluentColumnWithSize OnFullHD { get; }
        Blazorise.IFluentColumnWithSize OnMobile { get; }
        Blazorise.IFluentColumnWithSize OnQuadHD { get; }
        Blazorise.IFluentColumnWithSize OnTablet { get; }
        Blazorise.IFluentColumnWithSize OnWidescreen { get; }
    }
    public interface IFluentColumnOnBreakpointWithOffsetAndSize : Blazorise.IFluentColumn, Blazorise.IFluentColumnOnBreakpoint, Blazorise.IFluentColumnWithOffset, Blazorise.IFluentColumnWithSize { }
    public interface IFluentColumnWithOffset : Blazorise.IFluentColumn
    {
        Blazorise.IFluentColumnOnBreakpoint WithOffset { get; }
    }
    public interface IFluentColumnWithSize : Blazorise.IFluentColumn
    {
        Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is1 { get; }
        Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is10 { get; }
        Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is11 { get; }
        Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is12 { get; }
        Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is2 { get; }
        Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is3 { get; }
        Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is4 { get; }
        Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is5 { get; }
        Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is6 { get; }
        Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is7 { get; }
        Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is8 { get; }
        Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize Is9 { get; }
        Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize IsAuto { get; }
        Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize IsFull { get; }
        Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize IsHalf { get; }
        Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize IsQuarter { get; }
        Blazorise.IFluentColumnOnBreakpointWithOffsetAndSize IsThird { get; }
        Blazorise.IFluentColumnWithSize Is(string value);
    }
    public interface IFluentDisplay
    {
        string Class(Blazorise.IClassProvider classProvider);
    }
    public interface IFluentDisplayOnBreakpoint : Blazorise.IFluentDisplay
    {
        Blazorise.IFluentDisplayWithDisplay OnDesktop { get; }
        Blazorise.IFluentDisplayWithDisplay OnFullHD { get; }
        Blazorise.IFluentDisplayWithDisplay OnMobile { get; }
        Blazorise.IFluentDisplayWithDisplay OnQuadHD { get; }
        Blazorise.IFluentDisplayWithDisplay OnTablet { get; }
        Blazorise.IFluentDisplayWithDisplay OnWidescreen { get; }
    }
    public interface IFluentDisplayOnCondition : Blazorise.IFluentDisplay
    {
        Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection If(bool condition);
    }
    public interface IFluentDisplayWithDisplay : Blazorise.IFluentDisplay
    {
        Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection Block { get; }
        Blazorise.IFluentDisplayWithDisplayFlexWithDirection Flex { get; }
        Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection Inline { get; }
        Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection InlineBlock { get; }
        Blazorise.IFluentDisplayWithDisplayFlexWithDirection InlineFlex { get; }
        Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection None { get; }
        Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection Table { get; }
        Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection TableCell { get; }
        Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection TableRow { get; }
    }
    public interface IFluentDisplayWithDisplayFlexWithDirection : Blazorise.IFluentDisplay
    {
        Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection Column { get; }
        Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection ReverseColumn { get; }
        Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection ReverseRow { get; }
        Blazorise.IFluentDisplayWithDisplayOnBreakpointWithDirection Row { get; }
    }
    public interface IFluentDisplayWithDisplayOnBreakpointWithDirection : Blazorise.IFluentDisplay, Blazorise.IFluentDisplayOnBreakpoint, Blazorise.IFluentDisplayOnCondition, Blazorise.IFluentDisplayWithDisplay { }
    public interface IFluentFlex
    {
        string Class(Blazorise.IClassProvider classProvider);
    }
    public interface IFluentFlexAlignContent : Blazorise.IFluentFlex
    {
        Blazorise.IFluentFlexAlignContentPosition AlignContent { get; }
    }
    public interface IFluentFlexAlignContentPosition : Blazorise.IFluentFlex
    {
        Blazorise.IFluentFlexAll Around { get; }
        Blazorise.IFluentFlexAll Between { get; }
        Blazorise.IFluentFlexAll Center { get; }
        Blazorise.IFluentFlexAll End { get; }
        Blazorise.IFluentFlexAll Start { get; }
        Blazorise.IFluentFlexAll Stretch { get; }
    }
    public interface IFluentFlexAlignItems : Blazorise.IFluentFlex
    {
        Blazorise.IFluentFlexAlignItemsPosition AlignItems { get; }
    }
    public interface IFluentFlexAlignItemsPosition : Blazorise.IFluentFlex
    {
        Blazorise.IFluentFlexAll Baseline { get; }
        Blazorise.IFluentFlexAll Center { get; }
        Blazorise.IFluentFlexAll End { get; }
        Blazorise.IFluentFlexAll Start { get; }
        Blazorise.IFluentFlexAll Stretch { get; }
    }
    public interface IFluentFlexAlignSelf : Blazorise.IFluentFlex
    {
        Blazorise.IFluentFlexAlignSelfPosition AlignSelf { get; }
    }
    public interface IFluentFlexAlignSelfPosition : Blazorise.IFluentFlex
    {
        Blazorise.IFluentFlexAll Auto { get; }
        Blazorise.IFluentFlexAll Baseline { get; }
        Blazorise.IFluentFlexAll Center { get; }
        Blazorise.IFluentFlexAll End { get; }
        Blazorise.IFluentFlexAll Start { get; }
        Blazorise.IFluentFlexAll Stretch { get; }
    }
    public interface IFluentFlexAll : Blazorise.IFluentFlex, Blazorise.IFluentFlexAlignContent, Blazorise.IFluentFlexAlignItems, Blazorise.IFluentFlexAlignSelf, Blazorise.IFluentFlexBreakpoint, Blazorise.IFluentFlexCondition, Blazorise.IFluentFlexDirection, Blazorise.IFluentFlexFill, Blazorise.IFluentFlexGrowShrink, Blazorise.IFluentFlexJustifyContent, Blazorise.IFluentFlexOrder, Blazorise.IFluentFlexWrap { }
    public interface IFluentFlexBreakpoint : Blazorise.IFluentFlex
    {
        Blazorise.IFluentFlexAll OnDesktop { get; }
        Blazorise.IFluentFlexAll OnFullHD { get; }
        Blazorise.IFluentFlexAll OnMobile { get; }
        Blazorise.IFluentFlexAll OnQuadHD { get; }
        Blazorise.IFluentFlexAll OnTablet { get; }
        Blazorise.IFluentFlexAll OnWidescreen { get; }
    }
    public interface IFluentFlexCondition : Blazorise.IFluentFlex
    {
        Blazorise.IFluentFlexAll If(bool condition);
    }
    public interface IFluentFlexDirection : Blazorise.IFluentFlex
    {
        Blazorise.IFluentFlexAll Column { get; }
        Blazorise.IFluentFlexAll ReverseColumn { get; }
        Blazorise.IFluentFlexAll ReverseRow { get; }
        Blazorise.IFluentFlexAll Row { get; }
    }
    public interface IFluentFlexFill : Blazorise.IFluentFlex
    {
        Blazorise.IFluentFlexAll Fill { get; }
    }
    public interface IFluentFlexGrowShrink : Blazorise.IFluentFlex
    {
        Blazorise.IFluentFlexGrowShrinkSize Grow { get; }
        Blazorise.IFluentFlexGrowShrinkSize Shrink { get; }
    }
    public interface IFluentFlexGrowShrinkSize : Blazorise.IFluentFlex
    {
        Blazorise.IFluentFlexAll Is0 { get; }
        Blazorise.IFluentFlexAll Is1 { get; }
    }
    public interface IFluentFlexJustifyContent : Blazorise.IFluentFlex
    {
        Blazorise.IFluentFlexJustifyContentPositions JustifyContent { get; }
    }
    public interface IFluentFlexJustifyContentPositions : Blazorise.IFluentFlex
    {
        Blazorise.IFluentFlexAll Around { get; }
        Blazorise.IFluentFlexAll Between { get; }
        Blazorise.IFluentFlexAll Center { get; }
        Blazorise.IFluentFlexAll End { get; }
        Blazorise.IFluentFlexAll Start { get; }
    }
    public interface IFluentFlexOrder : Blazorise.IFluentFlex
    {
        Blazorise.IFluentFlexOrderNumber Order { get; }
    }
    public interface IFluentFlexOrderNumber : Blazorise.IFluentFlex
    {
        Blazorise.IFluentFlexAll Is0 { get; }
        Blazorise.IFluentFlexAll Is1 { get; }
        Blazorise.IFluentFlexAll Is10 { get; }
        Blazorise.IFluentFlexAll Is11 { get; }
        Blazorise.IFluentFlexAll Is12 { get; }
        Blazorise.IFluentFlexAll Is2 { get; }
        Blazorise.IFluentFlexAll Is3 { get; }
        Blazorise.IFluentFlexAll Is4 { get; }
        Blazorise.IFluentFlexAll Is5 { get; }
        Blazorise.IFluentFlexAll Is6 { get; }
        Blazorise.IFluentFlexAll Is7 { get; }
        Blazorise.IFluentFlexAll Is8 { get; }
        Blazorise.IFluentFlexAll Is9 { get; }
    }
    public interface IFluentFlexWrap : Blazorise.IFluentFlex
    {
        Blazorise.IFluentFlexAll NoWrap { get; }
        Blazorise.IFluentFlexAll ReverseWrap { get; }
        Blazorise.IFluentFlexAll Wrap { get; }
    }
    public interface IFluentGap
    {
        string Class(Blazorise.IClassProvider classProvider);
    }
    public interface IFluentGapFromSide : Blazorise.IFluentGap
    {
        Blazorise.IFluentGapWithSideAndSize OnAll { get; }
        Blazorise.IFluentGapWithSideAndSize OnX { get; }
        Blazorise.IFluentGapWithSideAndSize OnY { get; }
    }
    public interface IFluentGapWithSide : Blazorise.IFluentGap, Blazorise.IFluentGapFromSide { }
    public interface IFluentGapWithSideAndSize : Blazorise.IFluentGap, Blazorise.IFluentGapFromSide, Blazorise.IFluentGapWithSize { }
    public interface IFluentGapWithSize : Blazorise.IFluentGap
    {
        Blazorise.IFluentGapWithSideAndSize Is0 { get; }
        Blazorise.IFluentGapWithSideAndSize Is1 { get; }
        Blazorise.IFluentGapWithSideAndSize Is2 { get; }
        Blazorise.IFluentGapWithSideAndSize Is3 { get; }
        Blazorise.IFluentGapWithSideAndSize Is4 { get; }
        Blazorise.IFluentGapWithSideAndSize Is5 { get; }
        Blazorise.IFluentGapWithSize Is(string value);
    }
    public interface IFluentGridColumns
    {
        bool HasSizes { get; }
        string Class(Blazorise.IClassProvider classProvider);
    }
    public interface IFluentGridColumnsAll : Blazorise.IFluentGridColumns, Blazorise.IFluentGridColumnsBreakpoint, Blazorise.IFluentGridColumnsSize { }
    public interface IFluentGridColumnsBreakpoint : Blazorise.IFluentGridColumns
    {
        Blazorise.IFluentGridColumnsSize OnDesktop { get; }
        Blazorise.IFluentGridColumnsSize OnFullHD { get; }
        Blazorise.IFluentGridColumnsSize OnMobile { get; }
        Blazorise.IFluentGridColumnsSize OnQuadHD { get; }
        Blazorise.IFluentGridColumnsSize OnTablet { get; }
        Blazorise.IFluentGridColumnsSize OnWidescreen { get; }
    }
    public interface IFluentGridColumnsSize : Blazorise.IFluentGridColumns
    {
        Blazorise.IFluentGridColumnsAll Are1 { get; }
        Blazorise.IFluentGridColumnsAll Are10 { get; }
        Blazorise.IFluentGridColumnsAll Are11 { get; }
        Blazorise.IFluentGridColumnsAll Are12 { get; }
        Blazorise.IFluentGridColumnsAll Are2 { get; }
        Blazorise.IFluentGridColumnsAll Are3 { get; }
        Blazorise.IFluentGridColumnsAll Are4 { get; }
        Blazorise.IFluentGridColumnsAll Are5 { get; }
        Blazorise.IFluentGridColumnsAll Are6 { get; }
        Blazorise.IFluentGridColumnsAll Are7 { get; }
        Blazorise.IFluentGridColumnsAll Are8 { get; }
        Blazorise.IFluentGridColumnsAll Are9 { get; }
    }
    public interface IFluentGridRows
    {
        bool HasSizes { get; }
        string Class(Blazorise.IClassProvider classProvider);
    }
    public interface IFluentGridRowsAll : Blazorise.IFluentGridRows, Blazorise.IFluentGridRowsBreakpoint, Blazorise.IFluentGridRowsSize { }
    public interface IFluentGridRowsBreakpoint : Blazorise.IFluentGridRows
    {
        Blazorise.IFluentGridRowsSize OnDesktop { get; }
        Blazorise.IFluentGridRowsSize OnFullHD { get; }
        Blazorise.IFluentGridRowsSize OnMobile { get; }
        Blazorise.IFluentGridRowsSize OnQuadHD { get; }
        Blazorise.IFluentGridRowsSize OnTablet { get; }
        Blazorise.IFluentGridRowsSize OnWidescreen { get; }
    }
    public interface IFluentGridRowsSize : Blazorise.IFluentGridRows
    {
        Blazorise.IFluentGridRowsAll Are1 { get; }
        Blazorise.IFluentGridRowsAll Are2 { get; }
        Blazorise.IFluentGridRowsAll Are3 { get; }
        Blazorise.IFluentGridRowsAll Are4 { get; }
        Blazorise.IFluentGridRowsAll Are5 { get; }
        Blazorise.IFluentGridRowsAll Are6 { get; }
    }
    public interface IFluentOverflow
    {
        string Class(Blazorise.IClassProvider classProvider);
    }
    public interface IFluentOverflowSecondRule : Blazorise.IFluentOverflow
    {
        Blazorise.IFluentOverflow Auto { get; }
        Blazorise.IFluentOverflow Hidden { get; }
        Blazorise.IFluentOverflow Scroll { get; }
        Blazorise.IFluentOverflow Visible { get; }
    }
    public interface IFluentPosition
    {
        string Class(Blazorise.IClassProvider classProvider);
    }
    public interface IFluentPositionEdgeOffset : Blazorise.IFluentPosition, Blazorise.IFluentPositionTranslate
    {
        Blazorise.IFluentPositionWithAll Is0 { get; }
        Blazorise.IFluentPositionWithAll Is100 { get; }
        Blazorise.IFluentPositionWithAll Is50 { get; }
    }
    public interface IFluentPositionEdgeType : Blazorise.IFluentPosition
    {
        Blazorise.IFluentPositionEdgeOffset Bottom { get; }
        Blazorise.IFluentPositionEdgeOffset End { get; }
        Blazorise.IFluentPositionEdgeOffset Start { get; }
        Blazorise.IFluentPositionEdgeOffset Top { get; }
    }
    public interface IFluentPositionTranslate : Blazorise.IFluentPosition
    {
        Blazorise.IFluentPositionTranslateType Translate { get; }
    }
    public interface IFluentPositionTranslateType : Blazorise.IFluentPosition
    {
        Blazorise.IFluentPositionWithAll Middle { get; }
        Blazorise.IFluentPositionWithAll MiddleX { get; }
        Blazorise.IFluentPositionWithAll MiddleY { get; }
    }
    public interface IFluentPositionType : Blazorise.IFluentPosition
    {
        Blazorise.IFluentPositionWithEdgeTypeAndTranslateType Absolute { get; }
        Blazorise.IFluentPositionWithEdgeTypeAndTranslateType Fixed { get; }
        Blazorise.IFluentPositionWithEdgeTypeAndTranslateType Relative { get; }
        Blazorise.IFluentPositionWithEdgeTypeAndTranslateType Static { get; }
        Blazorise.IFluentPositionWithEdgeTypeAndTranslateType Sticky { get; }
    }
    public interface IFluentPositionWithAll : Blazorise.IFluentPosition, Blazorise.IFluentPositionEdgeOffset, Blazorise.IFluentPositionEdgeType, Blazorise.IFluentPositionTranslate, Blazorise.IFluentPositionType, Blazorise.IFluentPositionWithEdgeTypeAndTranslateType { }
    public interface IFluentPositionWithEdgeTypeAndTranslateType : Blazorise.IFluentPosition, Blazorise.IFluentPositionEdgeType, Blazorise.IFluentPositionTranslate { }
    public interface IFluentRowColumns
    {
        bool HasSizes { get; }
        string Class(Blazorise.IClassProvider classProvider);
    }
    public interface IFluentRowColumnsAll : Blazorise.IFluentRowColumns, Blazorise.IFluentRowColumnsBreakpoint, Blazorise.IFluentRowColumnsSize { }
    public interface IFluentRowColumnsBreakpoint : Blazorise.IFluentRowColumns
    {
        Blazorise.IFluentRowColumnsSize OnDesktop { get; }
        Blazorise.IFluentRowColumnsSize OnFullHD { get; }
        Blazorise.IFluentRowColumnsSize OnMobile { get; }
        Blazorise.IFluentRowColumnsSize OnQuadHD { get; }
        Blazorise.IFluentRowColumnsSize OnTablet { get; }
        Blazorise.IFluentRowColumnsSize OnWidescreen { get; }
    }
    public interface IFluentRowColumnsSize : Blazorise.IFluentRowColumns
    {
        Blazorise.IFluentRowColumnsAll Are1 { get; }
        Blazorise.IFluentRowColumnsAll Are2 { get; }
        Blazorise.IFluentRowColumnsAll Are3 { get; }
        Blazorise.IFluentRowColumnsAll Are4 { get; }
        Blazorise.IFluentRowColumnsAll Are5 { get; }
        Blazorise.IFluentRowColumnsAll Are6 { get; }
    }
    public interface IFluentSizing
    {
        double? FixedSize { get; }
        string Class(Blazorise.IClassProvider classProvider);
        string Style(Blazorise.IStyleProvider styleProvider);
    }
    public interface IFluentSizingMax : Blazorise.IFluentSizing
    {
        Blazorise.IFluentSizingWithSizeOnBreakpoint Max { get; }
    }
    public interface IFluentSizingMin : Blazorise.IFluentSizing
    {
        Blazorise.IFluentSizingViewport Min { get; }
    }
    public interface IFluentSizingMinMaxViewport : Blazorise.IFluentSizing, Blazorise.IFluentSizingMax, Blazorise.IFluentSizingMin, Blazorise.IFluentSizingViewport { }
    public interface IFluentSizingMinMaxViewportOnBreakpoint : Blazorise.IFluentSizing, Blazorise.IFluentSizingMax, Blazorise.IFluentSizingMin, Blazorise.IFluentSizingMinMaxViewport, Blazorise.IFluentSizingOnBreakpoint, Blazorise.IFluentSizingSize, Blazorise.IFluentSizingViewport { }
    public interface IFluentSizingOnBreakpoint : Blazorise.IFluentSizing, Blazorise.IFluentSizingMax, Blazorise.IFluentSizingMin, Blazorise.IFluentSizingMinMaxViewport, Blazorise.IFluentSizingSize, Blazorise.IFluentSizingViewport
    {
        Blazorise.IFluentSizingWithSizeWithMinMaxWithViewportAll OnDesktop { get; }
        Blazorise.IFluentSizingWithSizeWithMinMaxWithViewportAll OnFullHD { get; }
        Blazorise.IFluentSizingWithSizeWithMinMaxWithViewportAll OnMobile { get; }
        Blazorise.IFluentSizingWithSizeWithMinMaxWithViewportAll OnQuadHD { get; }
        Blazorise.IFluentSizingWithSizeWithMinMaxWithViewportAll OnTablet { get; }
        Blazorise.IFluentSizingWithSizeWithMinMaxWithViewportAll OnWidescreen { get; }
    }
    public interface IFluentSizingSize : Blazorise.IFluentSizing
    {
        Blazorise.IFluentSizing Auto { get; }
        Blazorise.IFluentSizingMinMaxViewportOnBreakpoint Is100 { get; }
        Blazorise.IFluentSizingOnBreakpoint Is25 { get; }
        Blazorise.IFluentSizingOnBreakpoint Is33 { get; }
        Blazorise.IFluentSizingOnBreakpoint Is50 { get; }
        Blazorise.IFluentSizingOnBreakpoint Is66 { get; }
        Blazorise.IFluentSizingOnBreakpoint Is75 { get; }
        Blazorise.IFluentSizing Is(string unit, double size);
    }
    public interface IFluentSizingViewport : Blazorise.IFluentSizing
    {
        Blazorise.IFluentSizing Viewport { get; }
    }
    public interface IFluentSizingWithSizeOnBreakpoint : Blazorise.IFluentSizing, Blazorise.IFluentSizingMax, Blazorise.IFluentSizingMin, Blazorise.IFluentSizingMinMaxViewport, Blazorise.IFluentSizingOnBreakpoint, Blazorise.IFluentSizingSize, Blazorise.IFluentSizingViewport { }
    public interface IFluentSizingWithSizeWithMinMaxWithViewportAll : Blazorise.IFluentSizing, Blazorise.IFluentSizingMax, Blazorise.IFluentSizingMin, Blazorise.IFluentSizingMinMaxViewport, Blazorise.IFluentSizingSize, Blazorise.IFluentSizingViewport { }
    public interface IFluentSpacing
    {
        string Class(Blazorise.IClassProvider classProvider);
    }
    public interface IFluentSpacingFromSide : Blazorise.IFluentSpacing
    {
        Blazorise.IFluentSpacingOnBreakpointWithSideAndSize FromBottom { get; }
        Blazorise.IFluentSpacingOnBreakpointWithSideAndSize FromEnd { get; }
        Blazorise.IFluentSpacingOnBreakpointWithSideAndSize FromStart { get; }
        Blazorise.IFluentSpacingOnBreakpointWithSideAndSize FromTop { get; }
        Blazorise.IFluentSpacingOnBreakpointWithSideAndSize OnAll { get; }
        Blazorise.IFluentSpacingOnBreakpointWithSideAndSize OnX { get; }
        Blazorise.IFluentSpacingOnBreakpointWithSideAndSize OnY { get; }
    }
    public interface IFluentSpacingOnBreakpoint : Blazorise.IFluentSpacing, Blazorise.IFluentSpacingFromSide
    {
        Blazorise.IFluentSpacingOnBreakpointWithSideAndSize OnDesktop { get; }
        Blazorise.IFluentSpacingOnBreakpointWithSideAndSize OnFullHD { get; }
        Blazorise.IFluentSpacingOnBreakpointWithSideAndSize OnMobile { get; }
        Blazorise.IFluentSpacingOnBreakpointWithSideAndSize OnQuadHD { get; }
        Blazorise.IFluentSpacingOnBreakpointWithSideAndSize OnTablet { get; }
        Blazorise.IFluentSpacingOnBreakpointWithSideAndSize OnWidescreen { get; }
    }
    public interface IFluentSpacingOnBreakpointWithSide : Blazorise.IFluentSpacing, Blazorise.IFluentSpacingFromSide, Blazorise.IFluentSpacingOnBreakpoint { }
    public interface IFluentSpacingOnBreakpointWithSideAndSize : Blazorise.IFluentSpacing, Blazorise.IFluentSpacingFromSide, Blazorise.IFluentSpacingOnBreakpoint, Blazorise.IFluentSpacingWithSize { }
    public interface IFluentSpacingWithSize : Blazorise.IFluentSpacing
    {
        Blazorise.IFluentSpacingOnBreakpointWithSideAndSize Is0 { get; }
        Blazorise.IFluentSpacingOnBreakpointWithSideAndSize Is1 { get; }
        Blazorise.IFluentSpacingOnBreakpointWithSideAndSize Is2 { get; }
        Blazorise.IFluentSpacingOnBreakpointWithSideAndSize Is3 { get; }
        Blazorise.IFluentSpacingOnBreakpointWithSideAndSize Is4 { get; }
        Blazorise.IFluentSpacingOnBreakpointWithSideAndSize Is5 { get; }
        Blazorise.IFluentSpacingOnBreakpointWithSideAndSize IsAuto { get; }
        Blazorise.IFluentSpacingWithSize Is(string value);
    }
    public interface IFluentTextSize
    {
        string Class(Blazorise.IClassProvider classProvider);
    }
    public interface IFluentTextSizeOnBreakpoint : Blazorise.IFluentTextSize
    {
        Blazorise.IFluentTextSizeWithSize OnDesktop { get; }
        Blazorise.IFluentTextSizeWithSize OnFullHD { get; }
        Blazorise.IFluentTextSizeWithSize OnMobile { get; }
        Blazorise.IFluentTextSizeWithSize OnQuadHD { get; }
        Blazorise.IFluentTextSizeWithSize OnTablet { get; }
        Blazorise.IFluentTextSizeWithSize OnWidescreen { get; }
    }
    public interface IFluentTextSizeWithSize : Blazorise.IFluentTextSize
    {
        Blazorise.IFluentTextSizeOnBreakpoint Default { get; }
        Blazorise.IFluentTextSizeOnBreakpoint ExtraLarge { get; }
        Blazorise.IFluentTextSizeOnBreakpoint ExtraSmall { get; }
        Blazorise.IFluentTextSizeOnBreakpoint Heading1 { get; }
        Blazorise.IFluentTextSizeOnBreakpoint Heading2 { get; }
        Blazorise.IFluentTextSizeOnBreakpoint Heading3 { get; }
        Blazorise.IFluentTextSizeOnBreakpoint Heading4 { get; }
        Blazorise.IFluentTextSizeOnBreakpoint Heading5 { get; }
        Blazorise.IFluentTextSizeOnBreakpoint Heading6 { get; }
        Blazorise.IFluentTextSizeOnBreakpoint Large { get; }
        Blazorise.IFluentTextSizeOnBreakpoint Medium { get; }
        Blazorise.IFluentTextSizeOnBreakpoint Small { get; }
    }
    public interface IFocusableComponent
    {
        bool Autofocus { get; }
        System.Threading.Tasks.Task Focus(bool scrollToElement = true);
    }
    public interface IFocusableContainerComponent
    {
        void NotifyFocusableComponentInitialized(Blazorise.IFocusableComponent focusableComponent);
        void NotifyFocusableComponentRemoved(Blazorise.IFocusableComponent focusableComponent);
    }
    public interface IHideableComponent
    {
        System.Threading.Tasks.Task Hide();
        System.Threading.Tasks.Task Show();
    }
    public interface IIconProvider
    {
        bool IconNameAsContent { get; }
        string GetIconName(string customName);
        string GetIconName(Blazorise.IconName name, Blazorise.IconStyle iconStyle);
        string Icon(object name, Blazorise.IconStyle iconStyle);
        string IconSize(Blazorise.IconSize iconSize);
        void SetIconName(Blazorise.IconName name, string newName);
    }
    public interface IIdGenerator
    {
        string Generate { get; }
    }
    public interface IMessageService
    {
        event System.EventHandler<Blazorise.MessageEventArgs> MessageReceived;
        System.Threading.Tasks.Task<bool> Confirm(Microsoft.AspNetCore.Components.MarkupString message, string title = null, System.Action<Blazorise.MessageOptions> options = null);
        System.Threading.Tasks.Task<bool> Confirm(string message, string title = null, System.Action<Blazorise.MessageOptions> options = null);
        System.Threading.Tasks.Task Error(Microsoft.AspNetCore.Components.MarkupString message, string title = null, System.Action<Blazorise.MessageOptions> options = null);
        System.Threading.Tasks.Task Error(string message, string title = null, System.Action<Blazorise.MessageOptions> options = null);
        System.Threading.Tasks.Task Info(Microsoft.AspNetCore.Components.MarkupString message, string title = null, System.Action<Blazorise.MessageOptions> options = null);
        System.Threading.Tasks.Task Info(string message, string title = null, System.Action<Blazorise.MessageOptions> options = null);
        System.Threading.Tasks.Task Success(Microsoft.AspNetCore.Components.MarkupString message, string title = null, System.Action<Blazorise.MessageOptions> options = null);
        System.Threading.Tasks.Task Success(string message, string title = null, System.Action<Blazorise.MessageOptions> options = null);
        System.Threading.Tasks.Task Warning(Microsoft.AspNetCore.Components.MarkupString message, string title = null, System.Action<Blazorise.MessageOptions> options = null);
        System.Threading.Tasks.Task Warning(string message, string title = null, System.Action<Blazorise.MessageOptions> options = null);
    }
    public interface IModalService
    {
        Blazorise.ModalProvider ModalProvider { get; }
        System.Collections.Generic.IEnumerable<Blazorise.ModalInstance> GetInstances();
        System.Threading.Tasks.Task Hide();
        System.Threading.Tasks.Task Hide(Blazorise.ModalInstance modalInstance);
        System.Threading.Tasks.Task Remove(Blazorise.ModalInstance modalInstance);
        System.Threading.Tasks.Task Reset();
        void SetModalProvider(Blazorise.ModalProvider modalProvider);
        System.Threading.Tasks.Task Show(Blazorise.ModalInstance modalInstance);
        System.Threading.Tasks.Task<Blazorise.ModalInstance> Show(Microsoft.AspNetCore.Components.RenderFragment content);
        System.Threading.Tasks.Task<Blazorise.ModalInstance> Show(System.Type componentType);
        System.Threading.Tasks.Task<Blazorise.ModalInstance> Show(string title, Microsoft.AspNetCore.Components.RenderFragment content);
        System.Threading.Tasks.Task<Blazorise.ModalInstance> Show(string title, System.Type componentType);
        System.Threading.Tasks.Task<Blazorise.ModalInstance> Show(string title, Microsoft.AspNetCore.Components.RenderFragment childContent, Blazorise.ModalInstanceOptions modalInstanceOptions = null);
        System.Threading.Tasks.Task<Blazorise.ModalInstance> Show(string title, System.Type componentType, System.Collections.Generic.Dictionary<string, object> componentParameters = null, Blazorise.ModalInstanceOptions modalInstanceOptions = null);
        System.Threading.Tasks.Task<Blazorise.ModalInstance> Show<TComponent>()
            where TComponent :  notnull, Microsoft.AspNetCore.Components.IComponent;
        System.Threading.Tasks.Task<Blazorise.ModalInstance> Show<TComponent>(System.Action<Blazorise.ModalProviderParameterBuilder<TComponent>> parameters)
            where TComponent :  notnull, Microsoft.AspNetCore.Components.IComponent;
        System.Threading.Tasks.Task<Blazorise.ModalInstance> Show<TComponent>(string title)
            where TComponent :  notnull, Microsoft.AspNetCore.Components.IComponent;
        System.Threading.Tasks.Task<Blazorise.ModalInstance> Show<TComponent>(System.Action<Blazorise.ModalProviderParameterBuilder<TComponent>> parameters, Blazorise.ModalInstanceOptions modalInstanceOptions)
            where TComponent :  notnull, Microsoft.AspNetCore.Components.IComponent;
        System.Threading.Tasks.Task<Blazorise.ModalInstance> Show<TComponent>(string title, Blazorise.ModalInstanceOptions modalInstanceOptions)
            where TComponent :  notnull, Microsoft.AspNetCore.Components.IComponent;
        System.Threading.Tasks.Task<Blazorise.ModalInstance> Show<TComponent>(string title, System.Action<Blazorise.ModalProviderParameterBuilder<TComponent>> parameters)
            where TComponent :  notnull, Microsoft.AspNetCore.Components.IComponent;
        System.Threading.Tasks.Task<Blazorise.ModalInstance> Show<TComponent>(string title, System.Action<Blazorise.ModalProviderParameterBuilder<TComponent>> parameters, Blazorise.ModalInstanceOptions modalInstanceOptions)
            where TComponent :  notnull, Microsoft.AspNetCore.Components.IComponent;
    }
    public interface IModalSharedContext
    {
        int OpenIndex { get; }
        int DecreaseModalOpenIndex();
        int RaiseModalOpenIndex();
    }
    public interface INotificationService
    {
        event System.EventHandler<Blazorise.NotificationEventArgs> NotificationReceived;
        System.Threading.Tasks.Task Error(Microsoft.AspNetCore.Components.MarkupString message, string title = null, System.Action<Blazorise.NotificationOptions> options = null);
        System.Threading.Tasks.Task Error(string message, string title = null, System.Action<Blazorise.NotificationOptions> options = null);
        System.Threading.Tasks.Task Info(Microsoft.AspNetCore.Components.MarkupString message, string title = null, System.Action<Blazorise.NotificationOptions> options = null);
        System.Threading.Tasks.Task Info(string message, string title = null, System.Action<Blazorise.NotificationOptions> options = null);
        System.Threading.Tasks.Task Success(Microsoft.AspNetCore.Components.MarkupString message, string title = null, System.Action<Blazorise.NotificationOptions> options = null);
        System.Threading.Tasks.Task Success(string message, string title = null, System.Action<Blazorise.NotificationOptions> options = null);
        System.Threading.Tasks.Task Warning(Microsoft.AspNetCore.Components.MarkupString message, string title = null, System.Action<Blazorise.NotificationOptions> options = null);
        System.Threading.Tasks.Task Warning(string message, string title = null, System.Action<Blazorise.NotificationOptions> options = null);
    }
    public interface INumericPicker
    {
        System.Threading.Tasks.Task SetValue(string value);
    }
    public interface IPageProgressService
    {
        event System.EventHandler<Blazorise.PageProgressEventArgs> ProgressChanged;
        System.Threading.Tasks.Task Go(int? percentage, System.Action<Blazorise.PageProgressOptions> options = null);
    }
    public interface ISelectItem<TValue>
    {
        Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        TValue Value { get; set; }
    }
    public interface ISelectableComponent
    {
        System.Threading.Tasks.Task Select(bool focus = true);
    }
    public interface IStyleProvider
    {
        int DefaultModalBackdropZIndex { get; }
        int DefaultModalZIndex { get; }
        string ColumnGutter([System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "Horizontal",
                "Vertical"})] System.ValueTuple<int, int> gutter);
        string ModalAnimationDuration(bool animated, int animationDuration);
        string ModalBackdropZIndex(int modalOpenIndex);
        string ModalBodyMaxHeight(int maxHeight);
        string ModalFade(bool showing, bool hiding);
        string ModalShow(bool visible);
        string ModalZIndex(int modalOpenIndex);
        string OffcanvasAnimationDuration(bool animated, int animationDuration);
        string OffcanvasBackdropAnimationDuration(bool animated, int animationDuration);
        string ProgressBarSize(Blazorise.Size size);
        string ProgressBarValue(int value);
        string RowGutter([System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "Horizontal",
                "Vertical"})] System.ValueTuple<int, int> gutter);
        string ToastAnimationDuration(bool animated, int animationDuration);
    }
    public interface IThemeCache
    {
        void CacheStyles(Blazorise.Theme theme, string styles);
        void CacheVariables(Blazorise.Theme theme, string variables);
        bool TryGetStylesFromCache(Blazorise.Theme theme, out string styles);
        bool TryGetVariablesFromCache(Blazorise.Theme theme, out string variables);
    }
    public interface IThemeGenerator
    {
        string GenerateStyles(Blazorise.Theme theme);
        string GenerateVariables(Blazorise.Theme theme);
    }
    public interface IToastService
    {
        event System.EventHandler<Blazorise.ToastEventArgs> ToastReceived;
        System.Threading.Tasks.Task Error(Microsoft.AspNetCore.Components.MarkupString message, string title = null, System.Action<Blazorise.ToastInstanceOptions> options = null);
        System.Threading.Tasks.Task Error(string message, string title = null, System.Action<Blazorise.ToastInstanceOptions> options = null);
        System.Threading.Tasks.Task Info(Microsoft.AspNetCore.Components.MarkupString message, string title = null, System.Action<Blazorise.ToastInstanceOptions> options = null);
        System.Threading.Tasks.Task Info(string message, string title = null, System.Action<Blazorise.ToastInstanceOptions> options = null);
        System.Threading.Tasks.Task Show(Microsoft.AspNetCore.Components.MarkupString message, string title = null, System.Action<Blazorise.ToastInstanceOptions> options = null);
        System.Threading.Tasks.Task Show(string message, string title = null, System.Action<Blazorise.ToastInstanceOptions> options = null);
        System.Threading.Tasks.Task Success(Microsoft.AspNetCore.Components.MarkupString message, string title = null, System.Action<Blazorise.ToastInstanceOptions> options = null);
        System.Threading.Tasks.Task Success(string message, string title = null, System.Action<Blazorise.ToastInstanceOptions> options = null);
        System.Threading.Tasks.Task Warning(Microsoft.AspNetCore.Components.MarkupString message, string title = null, System.Action<Blazorise.ToastInstanceOptions> options = null);
        System.Threading.Tasks.Task Warning(string message, string title = null, System.Action<Blazorise.ToastInstanceOptions> options = null);
    }
    public interface IValidation
    {
        System.Func<Blazorise.ValidatorEventArgs, System.Threading.CancellationToken, System.Threading.Tasks.Task> AsyncValidator { get; }
        Microsoft.AspNetCore.Components.Forms.EditContext EditContext { get; }
        Microsoft.AspNetCore.Components.Forms.FieldIdentifier FieldIdentifier { get; }
        System.Func<string, System.Collections.Generic.IEnumerable<string>, string> MessageLocalizer { get; }
        System.Collections.Generic.IEnumerable<string> Messages { get; }
        Blazorise.Validations ParentValidations { get; }
        System.Text.RegularExpressions.Regex Pattern { get; }
        Blazorise.ValidationStatus Status { get; }
        System.Action<Blazorise.ValidatorEventArgs> Validator { get; }
        void NotifyValidationStarted();
        void NotifyValidationStatusChanged(Blazorise.ValidationStatus status, System.Collections.Generic.IEnumerable<string> messages = null);
        System.Threading.Tasks.Task<Blazorise.ValidationStatus> ValidateAsync();
    }
    public interface IValidationHandler
    {
        void Validate(Blazorise.IValidation validation, object newValidationValue);
        System.Threading.Tasks.Task ValidateAsync(Blazorise.IValidation validation, object newValidationValue, System.Threading.CancellationToken cancellationToken = default);
    }
    public interface IValidationHandlerFactory
    {
        Blazorise.IValidationHandler Create(System.Type handlerType);
    }
    public interface IValidationInput
    {
        bool Disabled { get; }
        object ValidationValue { get; }
    }
    public interface IVersionProvider
    {
        string MilestoneVersion { get; }
        string Version { get; }
    }
    public class Icon : Blazorise.BaseComponent
    {
        public Icon() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs> Clicked { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.IIconProvider IconProvider { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.IconSize? IconSize { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.IconStyle? IconStyle { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs> MouseOut { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs> MouseOver { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public object Name { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.BlazoriseOptions Options { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected Blazorise.IconSize GetIconSize() { }
        protected Blazorise.IconStyle GetIconStyle() { }
        protected System.Threading.Tasks.Task OnClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
        protected System.Threading.Tasks.Task OnMouseOutHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
        protected System.Threading.Tasks.Task OnMouseOverHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
    }
    public enum IconName
    {
        Add = 0,
        Adjust = 1,
        Alert = 2,
        AlertOff = 3,
        AlignCenter = 4,
        AlignJustify = 5,
        AlignLeft = 6,
        AlignRight = 7,
        AngleDown = 8,
        AngleLeft = 9,
        AngleRight = 10,
        AngleUp = 11,
        Apple = 12,
        Archive = 13,
        ArrowAltCircleDown = 14,
        ArrowDown = 15,
        ArrowLeft = 16,
        ArrowRight = 17,
        ArrowUp = 18,
        Baby = 19,
        BabyCarriage = 20,
        Backspace = 21,
        Backward = 22,
        BalanceScale = 23,
        Ban = 24,
        BandAid = 25,
        Bars = 26,
        BatteryFull = 27,
        Bell = 28,
        BellSlash = 29,
        Biking = 30,
        BirthdayCake = 31,
        Bold = 32,
        Bolt = 33,
        Book = 34,
        Bookmark = 35,
        BookReader = 36,
        BorderAll = 37,
        BorderNone = 38,
        BorderStyle = 39,
        Briefcase = 40,
        Brush = 41,
        Bug = 42,
        Building = 43,
        Bus = 44,
        Calendar = 45,
        CalendarCheck = 46,
        CalendarDay = 47,
        CalendarTimes = 48,
        CalendarWeek = 49,
        Camera = 50,
        CameraRetro = 51,
        Car = 52,
        CaretSquareRight = 53,
        Cart = 54,
        CartMinus = 55,
        CartPlus = 56,
        Chair = 57,
        ChartArea = 58,
        ChartBar = 59,
        ChartLine = 60,
        ChartPie = 61,
        ChartScatter = 62,
        Check = 63,
        CheckCircle = 64,
        CheckDouble = 65,
        CheckSquare = 66,
        ChevronDown = 67,
        ChevronLeft = 68,
        ChevronRight = 69,
        ChevronUp = 70,
        Circle = 71,
        City = 72,
        Clear = 73,
        ClinicMedical = 74,
        Clipboard = 75,
        Clock = 76,
        ClosedCaptioning = 77,
        Cloud = 78,
        CloudDownloadAlt = 79,
        CloudUploadAlt = 80,
        Cocktail = 81,
        Code = 82,
        Coffee = 83,
        Comment = 84,
        CommentAlt = 85,
        Comments = 86,
        CompactDisc = 87,
        Compass = 88,
        Compress = 89,
        Copy = 90,
        Copyright = 91,
        CreditCard = 92,
        Crop = 93,
        Cut = 94,
        Dashboard = 95,
        Delete = 96,
        Desktop = 97,
        Dice = 98,
        Directions = 99,
        Dog = 100,
        DollarSign = 101,
        DotCircle = 102,
        Download = 103,
        Dumbbell = 104,
        Edit = 105,
        Eject = 106,
        Ethernet = 107,
        EuroSign = 108,
        Exclamation = 109,
        ExclamationCircle = 110,
        ExclamationTriangle = 111,
        Expand = 112,
        ExpandArrowsAlt = 113,
        ExpandLess = 114,
        ExpandMore = 115,
        ExternalLinkSquareAlt = 116,
        Eye = 117,
        EyeSlash = 118,
        FastBackward = 119,
        FastForward = 120,
        File = 121,
        FileAlt = 122,
        FileDownload = 123,
        FilePdf = 124,
        FileUpload = 125,
        Film = 126,
        Filter = 127,
        Fingerprint = 128,
        Fire = 129,
        Flag = 130,
        Flask = 131,
        Folder = 132,
        FolderOpen = 133,
        FolderPlus = 134,
        Forward = 135,
        Frown = 136,
        FrownOpen = 137,
        Gamepad = 138,
        GasPump = 139,
        Gavel = 140,
        Gift = 141,
        Globe = 142,
        Grin = 143,
        GripLines = 144,
        GripVertical = 145,
        HandPaper = 146,
        HandsHelping = 147,
        Headphones = 148,
        Headset = 149,
        Heart = 150,
        Highlighter = 151,
        History = 152,
        Home = 153,
        Hospital = 154,
        Hotel = 155,
        HotTub = 156,
        Hourglass = 157,
        IdCard = 158,
        Image = 159,
        Images = 160,
        Inbox = 161,
        Indent = 162,
        Infinity = 163,
        Info = 164,
        InfoCircle = 165,
        Italic = 166,
        Key = 167,
        Keyboard = 168,
        Language = 169,
        Laptop = 170,
        LaptopCode = 171,
        Laugh = 172,
        LayerGroup = 173,
        Lightbulb = 174,
        Link = 175,
        List = 176,
        ListOl = 177,
        ListUl = 178,
        LocationArrow = 179,
        Lock = 180,
        LockOpen = 181,
        Mail = 182,
        MailOpen = 183,
        Map = 184,
        MapMarker = 185,
        MapMarkerAlt = 186,
        Memory = 187,
        Microphone = 188,
        MicrophoneSlash = 189,
        MinusCircle = 190,
        MinusSquare = 191,
        MoneyBillAlt = 192,
        MoreHorizontal = 193,
        MoreVertical = 194,
        Motorcycle = 195,
        Mouse = 196,
        Music = 197,
        PaintBrush = 198,
        PaintRoller = 199,
        Palette = 200,
        Paperclip = 201,
        PaperPlane = 202,
        Parking = 203,
        Paste = 204,
        Pause = 205,
        PauseCircle = 206,
        Pen = 207,
        Phone = 208,
        PhoneAlt = 209,
        PizzaSlice = 210,
        Plane = 211,
        PlaneArrival = 212,
        PlaneDeparture = 213,
        Play = 214,
        PlayCircle = 215,
        Plug = 216,
        PlusCircle = 217,
        PlusSquare = 218,
        Poll = 219,
        Portrait = 220,
        Print = 221,
        PuzzlePiece = 222,
        QuestionCircle = 223,
        QuoteRight = 224,
        Random = 225,
        Receipt = 226,
        Redo = 227,
        Remove = 228,
        RemoveFormat = 229,
        Reply = 230,
        ReplyAll = 231,
        Restroom = 232,
        Rss = 233,
        RulerHorizontal = 234,
        Running = 235,
        Satellite = 236,
        Save = 237,
        School = 238,
        Screenshot = 239,
        SdCard = 240,
        Search = 241,
        SearchMinus = 242,
        SearchPlus = 243,
        Seedling = 244,
        Send = 245,
        Server = 246,
        Settings = 247,
        Shapes = 248,
        Share = 249,
        ShareAlt = 250,
        Shield = 251,
        ShieldAlt = 252,
        Ship = 253,
        ShoppingBag = 254,
        ShoppingBasket = 255,
        ShoppingCart = 256,
        ShuttleVan = 257,
        SimCard = 258,
        SliderHorizontal = 259,
        Smartphone = 260,
        Smile = 261,
        Smoking = 262,
        SmokingBan = 263,
        Sms = 264,
        Snowflake = 265,
        Sort = 266,
        SortAlphaDown = 267,
        SortAlphaUp = 268,
        SortAmountDownAlt = 269,
        SortDown = 270,
        SortUp = 271,
        Spa = 272,
        SpellCheck = 273,
        Square = 274,
        Star = 275,
        StarHalf = 276,
        StepBackward = 277,
        StepForward = 278,
        StickyNote = 279,
        Stop = 280,
        Store = 281,
        StoreAlt = 282,
        Stream = 283,
        StreetView = 284,
        Strikethrough = 285,
        Subscript = 286,
        Subway = 287,
        Suitcase = 288,
        Sun = 289,
        Superscript = 290,
        SwimmingPool = 291,
        Sync = 292,
        SyncAlt = 293,
        Table = 294,
        Tablet = 295,
        Tag = 296,
        Taxi = 297,
        TextHeight = 298,
        ThumbsDown = 299,
        ThumbsUp = 300,
        Ticket = 301,
        TicketAlt = 302,
        Times = 303,
        TimesCircle = 304,
        Tint = 305,
        TintSlash = 306,
        TrafficLight = 307,
        Train = 308,
        Tram = 309,
        Tree = 310,
        Truck = 311,
        Tv = 312,
        UmbrellaBeach = 313,
        Underline = 314,
        Undo = 315,
        Unlock = 316,
        User = 317,
        UserCheck = 318,
        UserCircle = 319,
        UserFriends = 320,
        UserPlus = 321,
        Users = 322,
        UserTie = 323,
        Utensils = 324,
        Video = 325,
        VideoSlash = 326,
        Voicemail = 327,
        VolumeDown = 328,
        VolumeMute = 329,
        VolumeOff = 330,
        VolumeUp = 331,
        Walking = 332,
        Wallet = 333,
        Wheelchair = 334,
        Wifi = 335,
        WineBottle = 336,
        Wrench = 337,
        Zoom = 338,
        ZoomIn = 339,
        ZoomOut = 340,
    }
    public enum IconSize
    {
        Default = 0,
        ExtraSmall = 1,
        Small = 2,
        Large = 3,
        x2 = 4,
        x3 = 5,
        x4 = 6,
        x5 = 7,
        x6 = 8,
        x7 = 9,
        x8 = 10,
        x9 = 11,
        x10 = 12,
    }
    public enum IconStyle
    {
        Solid = 0,
        Regular = 1,
        Light = 2,
        DuoTone = 4,
    }
    [System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field, AllowMultiple=false)]
    public sealed class IgnoreFieldAttribute : System.Attribute
    {
        public IgnoreFieldAttribute() { }
    }
    public class Image : Blazorise.BaseComponent
    {
        public Image() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Fluid { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Loading { get; set; }
        protected string LoadingString { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Source { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Text { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class Inline : Blazorise.BaseComponent
    {
        public Inline() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class InputMask : Blazorise.BaseTextInput<string>, System.IAsyncDisposable
    {
        public InputMask() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Alias { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool AutoUnmask { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ClearIncomplete { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ClearMaskOnLostFocus { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback Cleared { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<string> Completed { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string DecimalSeparator { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string GroupSeparator { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<string> Incompleted { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string InputFormat { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        public Blazorise.Modules.IJSInputMaskModule JSModule { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Mask { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string MaskPlaceholder { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Nullable { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool NumericInput { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string OutputFormat { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.InputMaskCaretPosition PositionCaretOnClick { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Regex { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool RightAlign { get; set; }
        protected override bool ShouldAutoGenerateId { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ShowMaskOnFocus { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ShowMaskOnHover { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Value { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<string> ValueChanged { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Linq.Expressions.Expression<System.Func<string>> ValueExpression { get; set; }
        protected override string InternalValue { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override System.Threading.Tasks.ValueTask DisposeAsync(bool disposing) { }
        public virtual System.Threading.Tasks.Task ExtendAliases(object aliasOptions) { }
        protected override string FormatValueAsString(string value) { }
        protected override string GetFormatedValueExpression() { }
        [Microsoft.JSInterop.JSInvokable]
        public System.Threading.Tasks.Task NotifyCleared() { }
        [Microsoft.JSInterop.JSInvokable]
        public System.Threading.Tasks.Task NotifyCompleted(string value) { }
        [Microsoft.JSInterop.JSInvokable]
        public System.Threading.Tasks.Task NotifyIncompleted(string value) { }
        protected override System.Threading.Tasks.Task OnChangeHandler(Microsoft.AspNetCore.Components.ChangeEventArgs e) { }
        protected override System.Threading.Tasks.Task OnFirstAfterRenderAsync() { }
        protected override System.Threading.Tasks.Task OnInternalValueChanged(string value) { }
        protected override System.Threading.Tasks.Task<Blazorise.ParseValue<string>> ParseValueFromStringAsync(string value) { }
        public override System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) { }
    }
    public enum InputMaskCaretPosition
    {
        None = 0,
        LastValidPosition = 1,
        RadixFocus = 2,
        Select = 3,
        Ignore = 4,
    }
    public class Jumbotron : Blazorise.BaseComponent
    {
        public Jumbotron() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class JumbotronSubtitle : Blazorise.BaseComponent
    {
        public JumbotronSubtitle() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class JumbotronTitle : Blazorise.BaseComponent
    {
        public JumbotronTitle() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.JumbotronTitleSize Size { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected string GetHeadingElementName() { }
    }
    public enum JumbotronTitleSize
    {
        Is1 = 0,
        Is2 = 1,
        Is3 = 2,
        Is4 = 3,
    }
    public enum JustifyContent
    {
        Default = 0,
        Start = 1,
        End = 2,
        Center = 3,
        Between = 4,
        Around = 5,
    }
    public class Label : Blazorise.BaseComponent
    {
        public Label() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Cursor Cursor { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string For { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.LabelType Type { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public enum LabelType
    {
        None = 0,
        Check = 1,
        Radio = 2,
        Switch = 3,
        File = 4,
    }
    public class Layout : Blazorise.BaseComponent
    {
        public Layout() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Loading { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<bool> LoadingChanged { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string LoadingClass { get; set; }
        protected Blazorise.Utilities.ClassBuilder LoadingClassBuilder { get; }
        protected string LoadingClassNames { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment LoadingTemplate { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Layout ParentLayout { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Sider { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected void BuildLoadingClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void DirtyClasses() { }
    }
    public class LayoutContent : Blazorise.BaseComponent
    {
        public LayoutContent() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class LayoutFooter : Blazorise.BaseComponent
    {
        public LayoutFooter() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Fixed { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class LayoutHeader : Blazorise.BaseComponent
    {
        public LayoutHeader() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Fixed { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class LayoutSider : Blazorise.BaseComponent
    {
        public LayoutSider() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class LayoutSiderContent : Blazorise.BaseComponent
    {
        public LayoutSiderContent() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class Lead : Blazorise.BaseTypographyComponent
    {
        public Lead() { }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class Link : Blazorise.BaseLinkComponent, System.IDisposable
    {
        public Link() { }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class ListGroup : Blazorise.BaseComponent
    {
        public ListGroup() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Flush { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.ListGroupMode Mode { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Scrollable { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string SelectedItem { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<string> SelectedItemChanged { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Collections.Generic.List<string> SelectedItems { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<string>> SelectedItemsChanged { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.ListGroupSelectionMode SelectionMode { get; set; }
        protected Blazorise.States.ListGroupState State { get; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        public System.Threading.Tasks.Task SelectItem(string name) { }
    }
    public class ListGroupItem : Blazorise.BaseComponent
    {
        public ListGroupItem() { }
        protected bool Active { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs> Clicked { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Color Color { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Disabled { get; set; }
        protected string DisabledString { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Name { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.ListGroup ParentListGroup { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.States.ListGroupState ParentListGroupState { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected System.Threading.Tasks.Task ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
    }
    public enum ListGroupMode
    {
        Static = 0,
        Selectable = 1,
    }
    public enum ListGroupSelectionMode
    {
        Single = 0,
        Multiple = 1,
    }
    public static class Margin
    {
        public static Blazorise.IFluentSpacingOnBreakpointWithSideAndSize Is0 { get; }
        public static Blazorise.IFluentSpacingOnBreakpointWithSideAndSize Is1 { get; }
        public static Blazorise.IFluentSpacingOnBreakpointWithSideAndSize Is2 { get; }
        public static Blazorise.IFluentSpacingOnBreakpointWithSideAndSize Is3 { get; }
        public static Blazorise.IFluentSpacingOnBreakpointWithSideAndSize Is4 { get; }
        public static Blazorise.IFluentSpacingOnBreakpointWithSideAndSize Is5 { get; }
        public static Blazorise.IFluentSpacingOnBreakpointWithSideAndSize IsAuto { get; }
        public static Blazorise.IFluentSpacingWithSize Is(string value) { }
    }
    public enum MaskType
    {
        None = 0,
        Numeric = 1,
        DateTime = 2,
        RegEx = 3,
    }
    public enum Match
    {
        Prefix = 0,
        All = 1,
        Custom = 2,
    }
    public class Media : Blazorise.BaseComponent
    {
        public Media() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class MediaBody : Blazorise.BaseComponent
    {
        public MediaBody() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class MediaLeft : Blazorise.BaseComponent
    {
        public MediaLeft() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class MediaRight : Blazorise.BaseComponent
    {
        public MediaRight() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class MemoEdit : Blazorise.BaseInputComponent<string>, Blazorise.ISelectableComponent, System.IAsyncDisposable
    {
        public MemoEdit() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool AutoSize { get; set; }
        protected string BindValueEventName { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool? Debounce { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int? DebounceInterval { get; set; }
        protected int DebounceIntervalValue { get; }
        protected override string DefaultValue { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool? Immediate { get; set; }
        protected bool IsDebounce { get; }
        protected bool IsImmediate { get; }
        [Microsoft.AspNetCore.Components.Inject]
        public Blazorise.Modules.IJSMemoEditModule JSModule { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int? MaxLength { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Pattern { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Placeholder { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Plaintext { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ReplaceTab { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int? Rows { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool SoftTabs { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int TabSize { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Text { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<string> TextChanged { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Linq.Expressions.Expression<System.Func<string>> TextExpression { get; set; }
        protected override string InternalValue { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override System.Threading.Tasks.ValueTask DisposeAsync(bool disposing) { }
        protected override string GetFormatedValueExpression() { }
        protected override System.Threading.Tasks.Task OnBlurHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs) { }
        protected System.Threading.Tasks.Task OnChangeHandler(Microsoft.AspNetCore.Components.ChangeEventArgs e) { }
        protected override System.Threading.Tasks.Task OnFirstAfterRenderAsync() { }
        protected override void OnInitialized() { }
        protected System.Threading.Tasks.Task OnInputHandler(Microsoft.AspNetCore.Components.ChangeEventArgs e) { }
        protected override System.Threading.Tasks.Task OnInternalValueChanged(string value) { }
        protected override System.Threading.Tasks.Task OnKeyPressHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs) { }
        protected override System.Threading.Tasks.Task<Blazorise.ParseValue<string>> ParseValueFromStringAsync(string value) { }
        public virtual System.Threading.Tasks.Task Select(bool focus = true) { }
        public override System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) { }
    }
    [System.Obsolete("MessageAlert is deprecated, please use MessageProvider instead.")]
    public class MessageAlert : Blazorise.BaseComponent, System.IDisposable
    {
        public MessageAlert() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool BackgroundCancel { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Threading.Tasks.TaskCompletionSource<bool> Callback { get; set; }
        protected virtual string CancelButtonClass { get; }
        protected virtual Blazorise.Color CancelButtonColor { get; }
        protected virtual Blazorise.IFluentSpacing CancelButtonPadding { get; }
        protected virtual string CancelButtonText { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback Canceled { get; set; }
        protected virtual bool CenterMessage { get; }
        protected virtual string ConfirmButtonClass { get; }
        protected virtual Blazorise.Color ConfirmButtonColor { get; }
        protected virtual Blazorise.IFluentSpacing ConfirmButtonPadding { get; }
        protected virtual string ConfirmButtonText { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback Confirmed { get; set; }
        protected virtual bool IsConfirmation { get; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.Localization.ITextLocalizer<Blazorise.MessageProvider> Localizer { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.Localization.ITextLocalizerService LocalizerService { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.MarkupString Message { get; set; }
        protected virtual string MessageClass { get; }
        protected virtual object MessageIcon { get; }
        protected virtual Blazorise.TextColor MessageIconColor { get; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.IMessageService MessageService { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.MessageType MessageType { get; set; }
        protected Blazorise.Modal ModalRef { get; set; }
        protected virtual string OkButtonClass { get; }
        protected virtual Blazorise.Color OkButtonColor { get; }
        protected virtual Blazorise.IFluentSpacing OkButtonPadding { get; }
        protected virtual string OkButtonText { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback Okayed { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.MessageOptions Options { get; set; }
        protected virtual bool ScrollableMessage { get; }
        protected virtual bool ShowCloseButton { get; }
        protected virtual bool ShowMessageIcon { get; }
        protected virtual Blazorise.ModalSize Size { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Title { get; set; }
        protected virtual string TitleClass { get; }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void Dispose(bool disposing) { }
        protected System.Threading.Tasks.Task OnCancelClicked() { }
        protected System.Threading.Tasks.Task OnConfirmClicked() { }
        protected override void OnInitialized() { }
        protected virtual System.Threading.Tasks.Task OnModalClosing(Blazorise.ModalClosingEventArgs eventArgs) { }
        protected System.Threading.Tasks.Task OnOkClicked() { }
    }
    public class MessageEventArgs : System.EventArgs
    {
        public MessageEventArgs(Blazorise.MessageType messageType, Microsoft.AspNetCore.Components.MarkupString message, string title, Blazorise.MessageOptions options) { }
        public MessageEventArgs(Blazorise.MessageType messageType, string message, string title, Blazorise.MessageOptions options) { }
        public MessageEventArgs(Blazorise.MessageType messageType, Microsoft.AspNetCore.Components.MarkupString message, string title, Blazorise.MessageOptions options, System.Threading.Tasks.TaskCompletionSource<bool> callback) { }
        public MessageEventArgs(Blazorise.MessageType messageType, string message, string title, Blazorise.MessageOptions options, System.Threading.Tasks.TaskCompletionSource<bool> callback) { }
        public System.Threading.Tasks.TaskCompletionSource<bool> Callback { get; }
        public Microsoft.AspNetCore.Components.MarkupString Message { get; }
        public Blazorise.MessageType MessageType { get; }
        public Blazorise.MessageOptions Options { get; }
        public string Title { get; }
    }
    public class MessageOptions
    {
        public MessageOptions() { }
        public string CancelButtonClass { get; set; }
        public Blazorise.Color CancelButtonColor { get; set; }
        public object CancelButtonIcon { get; set; }
        public Blazorise.TextColor CancelButtonIconColor { get; set; }
        public Blazorise.IFluentSpacing CancelButtonPadding { get; set; }
        public string CancelButtonText { get; set; }
        public bool CenterMessage { get; set; }
        public string ConfirmButtonClass { get; set; }
        public Blazorise.Color ConfirmButtonColor { get; set; }
        public object ConfirmButtonIcon { get; set; }
        public Blazorise.TextColor ConfirmButtonIconColor { get; set; }
        public Blazorise.IFluentSpacing ConfirmButtonPadding { get; set; }
        public string ConfirmButtonText { get; set; }
        public string MessageClass { get; set; }
        public object MessageIcon { get; set; }
        public Blazorise.TextColor MessageIconColor { get; set; }
        public string OkButtonClass { get; set; }
        public Blazorise.Color OkButtonColor { get; set; }
        public object OkButtonIcon { get; set; }
        public Blazorise.TextColor OkButtonIconColor { get; set; }
        public Blazorise.IFluentSpacing OkButtonPadding { get; set; }
        public string OkButtonText { get; set; }
        public bool ScrollableMessage { get; set; }
        public bool ShowCloseButton { get; set; }
        public bool ShowMessageIcon { get; set; }
        public Blazorise.ModalSize Size { get; set; }
        public string TitleClass { get; set; }
        public static Blazorise.MessageOptions Default { get; }
    }
    public class MessageProvider : Blazorise.MessageAlert
    {
        public MessageProvider() { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public enum MessageType
    {
        Info = 0,
        Success = 1,
        Warning = 2,
        Error = 3,
        Confirmation = 4,
    }
    public class Modal : Blazorise.BaseComponent, Blazorise.IAnimatedComponent, Blazorise.ICloseActivator, Blazorise.IHideableComponent, System.IAsyncDisposable
    {
        protected bool BackdropVisible;
        protected bool lazyLoaded;
        public Modal() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Animated { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int AnimationDuration { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        public System.Collections.Generic.IEnumerable<string> CloseActivatorElementIds { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback Closed { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Func<Blazorise.ModalClosingEventArgs, System.Threading.Tasks.Task> Closing { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool? FocusTrap { get; set; }
        protected bool IsVisible { get; }
        [Microsoft.AspNetCore.Components.Inject]
        public Blazorise.Modules.IJSClosableModule JSClosableModule { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        public Blazorise.Modules.IJSModalModule JSModalModule { get; set; }
        protected int OpenIndex { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback Opened { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Func<Blazorise.ModalOpeningEventArgs, System.Threading.Tasks.Task> Opening { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.ModalRenderMode RenderMode { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ScrollToTop { get; set; }
        protected override bool ShouldAutoGenerateId { get; }
        protected bool ShouldRenderContent { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ShowBackdrop { get; set; }
        protected Blazorise.States.ModalState State { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Visible { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<bool> VisibleChanged { get; set; }
        public System.Threading.Tasks.Task BeginAnimation(bool visible) { }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void BuildStyles(Blazorise.Utilities.StyleBuilder builder) { }
        public System.Threading.Tasks.Task Close(Blazorise.CloseReason closeReason) { }
        protected override System.Threading.Tasks.ValueTask DisposeAsync(bool disposing) { }
        public System.Threading.Tasks.Task EndAnimation(bool visible) { }
        protected virtual System.Threading.Tasks.Task HandleVisibilityStyles(bool visible) { }
        public System.Threading.Tasks.Task Hide() { }
        protected System.Threading.Tasks.Task Hide(Blazorise.CloseReason closeReason) { }
        public System.Threading.Tasks.Task<bool> IsSafeToClose(string elementId, Blazorise.CloseReason closeReason, bool isChildClicked) { }
        protected override System.Threading.Tasks.Task OnFirstAfterRenderAsync() { }
        protected virtual System.Threading.Tasks.Task RaiseEvents(bool visible) { }
        public override System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) { }
        public System.Threading.Tasks.Task Show() { }
    }
    public class ModalBody : Blazorise.BaseComponent
    {
        public ModalBody() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int? MaxHeight { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.ModalContent ParentModalContent { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void BuildStyles(Blazorise.Utilities.StyleBuilder builder) { }
        protected override void OnInitialized() { }
    }
    public class ModalClosingEventArgs : System.ComponentModel.CancelEventArgs
    {
        public ModalClosingEventArgs(bool cancel, Blazorise.CloseReason closeReason) { }
        public Blazorise.CloseReason CloseReason { get; }
    }
    public class ModalContent : Blazorise.BaseComponent, System.IDisposable
    {
        public ModalContent() { }
        protected virtual bool AsDialog { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Centered { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected Blazorise.FocusTrap FocusTrapRef { get; set; }
        protected bool HasModalBody { get; set; }
        protected bool HasModalFooter { get; set; }
        protected bool HasModalHeader { get; set; }
        protected bool IsFocusTrap { get; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.BlazoriseOptions Options { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Modal ParentModal { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Scrollable { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public virtual Blazorise.ModalSize Size { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void Dispose(bool disposing) { }
        protected override void OnInitialized() { }
    }
    public class ModalFooter : Blazorise.BaseComponent
    {
        public ModalFooter() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.ModalContent ParentModalContent { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void OnInitialized() { }
    }
    public class ModalHeader : Blazorise.BaseComponent
    {
        public ModalHeader() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.ModalContent ParentModalContent { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void OnInitialized() { }
    }
    public class ModalInstance
    {
        public ModalInstance(Blazorise.ModalProvider modalProvider, string id, string title, Microsoft.AspNetCore.Components.RenderFragment childContent, Blazorise.ModalInstanceOptions modalInstanceOptions) { }
        public bool Animated { get; }
        public int AnimationDuration { get; }
        public System.Collections.Generic.Dictionary<string, object> Attributes { get; }
        public Blazorise.Background Background { get; }
        public Blazorise.IFluentBorder Border { get; }
        public Blazorise.CharacterCasing Casing { get; }
        public bool Centered { get; }
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; }
        public string Class { get; }
        public bool Clearfix { get; }
        public Microsoft.AspNetCore.Components.EventCallback Closed { get; }
        public System.Func<Blazorise.ModalClosingEventArgs, System.Threading.Tasks.Task> Closing { get; }
        public Blazorise.IFluentDisplay Display { get; }
        public Blazorise.IFluentFlex Flex { get; }
        public Blazorise.Float Float { get; }
        public bool? FocusTrap { get; }
        public Blazorise.IFluentSizing Height { get; }
        public Blazorise.IFluentSpacing Margin { get; }
        public string ModalId { get; set; }
        public Blazorise.ModalInstanceOptions ModalInstanceOptions { get; }
        public Blazorise.ModalProvider ModalProvider { get; }
        public Blazorise.Modal ModalRef { get; set; }
        public Microsoft.AspNetCore.Components.EventCallback Opened { get; }
        public System.Func<Blazorise.ModalOpeningEventArgs, System.Threading.Tasks.Task> Opening { get; }
        public Blazorise.IFluentOverflow Overflow { get; }
        public Blazorise.IFluentSpacing Padding { get; }
        public Blazorise.IFluentPosition Position { get; }
        public Blazorise.ModalRenderMode RenderMode { get; }
        public bool ScrollToTop { get; }
        public bool Scrollable { get; }
        public Blazorise.Shadow Shadow { get; }
        public bool ShowBackdrop { get; }
        public Blazorise.ModalSize Size { get; }
        public bool Stateful { get; }
        public string Style { get; }
        public Blazorise.TextAlignment TextAlignment { get; }
        public Blazorise.TextColor TextColor { get; }
        public Blazorise.TextOverflow TextOverflow { get; }
        public Blazorise.TextTransform TextTransform { get; }
        public Blazorise.TextWeight TextWeight { get; }
        public string Title { get; }
        public bool UseModalStructure { get; }
        public Blazorise.VerticalAlignment VerticalAlignment { get; }
        public Blazorise.Visibility Visibility { get; }
        public bool Visible { get; set; }
        public Blazorise.IFluentSizing Width { get; }
    }
    public class ModalInstanceOptions
    {
        public ModalInstanceOptions() { }
        public bool? Animated { get; set; }
        public int? AnimationDuration { get; set; }
        public System.Collections.Generic.Dictionary<string, object> Attributes { get; set; }
        public Blazorise.Background Background { get; set; }
        public Blazorise.IFluentBorder Border { get; set; }
        public Blazorise.CharacterCasing Casing { get; set; }
        public bool? Centered { get; set; }
        public string Class { get; set; }
        public bool Clearfix { get; set; }
        public Microsoft.AspNetCore.Components.EventCallback? Closed { get; set; }
        public System.Func<Blazorise.ModalClosingEventArgs, System.Threading.Tasks.Task> Closing { get; set; }
        public Blazorise.IFluentDisplay Display { get; set; }
        public string ElementId { get; set; }
        public Microsoft.AspNetCore.Components.ElementReference ElementRef { get; set; }
        public Blazorise.IFluentFlex Flex { get; set; }
        public Blazorise.Float Float { get; set; }
        public bool? FocusTrap { get; set; }
        public Blazorise.IFluentSizing Height { get; set; }
        public Blazorise.IFluentSpacing Margin { get; set; }
        public Microsoft.AspNetCore.Components.EventCallback? Opened { get; set; }
        public System.Func<Blazorise.ModalOpeningEventArgs, System.Threading.Tasks.Task> Opening { get; set; }
        public Blazorise.IFluentOverflow Overflow { get; set; }
        public Blazorise.IFluentSpacing Padding { get; set; }
        public Blazorise.IFluentPosition Position { get; set; }
        public Blazorise.ModalRenderMode? RenderMode { get; set; }
        public bool? ScrollToTop { get; set; }
        public bool? Scrollable { get; set; }
        public Blazorise.Shadow Shadow { get; set; }
        public bool? ShowBackdrop { get; set; }
        public Blazorise.ModalSize? Size { get; set; }
        public bool? Stateful { get; set; }
        public string Style { get; set; }
        public Blazorise.TextAlignment TextAlignment { get; set; }
        public Blazorise.TextColor TextColor { get; set; }
        public Blazorise.TextOverflow TextOverflow { get; set; }
        public Blazorise.TextTransform TextTransform { get; set; }
        public Blazorise.TextWeight TextWeight { get; set; }
        public bool? UseModalStructure { get; set; }
        public Blazorise.VerticalAlignment VerticalAlignment { get; set; }
        public Blazorise.Visibility Visibility { get; set; }
        public Blazorise.IFluentSizing Width { get; set; }
    }
    public class ModalOpeningEventArgs : System.ComponentModel.CancelEventArgs
    {
        public ModalOpeningEventArgs(bool cancel) { }
    }
    public class ModalProvider : Blazorise.BaseComponent
    {
        public ModalProvider() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Animated { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int AnimationDuration { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Centered { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback Closed { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Func<Blazorise.ModalClosingEventArgs, System.Threading.Tasks.Task> Closing { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool? FocusTrap { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.IModalService ModalService { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback Opened { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Func<Blazorise.ModalOpeningEventArgs, System.Threading.Tasks.Task> Opening { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.ModalRenderMode RenderMode { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ScrollToTop { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Scrollable { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ShowBackdrop { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.ModalSize Size { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Stateful { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool UseModalStructure { get; set; }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override System.Threading.Tasks.Task OnInitializedAsync() { }
        protected System.Threading.Tasks.Task OnModalClosed(Blazorise.ModalInstance modalInstance) { }
    }
    public class ModalProviderParameterBuilder<TComponent>
    {
        public ModalProviderParameterBuilder() { }
        public void Add(string name, object value) { }
        public void Add<TValue>(System.Linq.Expressions.Expression<System.Func<TComponent, TValue>> selector, TValue value) { }
    }
    public enum ModalRenderMode
    {
        Default = 0,
        LazyLoad = 1,
        LazyReload = 2,
    }
    public class ModalService : Blazorise.IModalService
    {
        public ModalService() { }
        public Blazorise.ModalProvider ModalProvider { get; }
        public System.Collections.Generic.IEnumerable<Blazorise.ModalInstance> GetInstances() { }
        public System.Threading.Tasks.Task Hide() { }
        public System.Threading.Tasks.Task Hide(Blazorise.ModalInstance modalInstance) { }
        public System.Threading.Tasks.Task Remove(Blazorise.ModalInstance modalInstance) { }
        public System.Threading.Tasks.Task Reset() { }
        public void SetModalProvider(Blazorise.ModalProvider modalProvider) { }
        public System.Threading.Tasks.Task Show(Blazorise.ModalInstance modalInstance) { }
        public System.Threading.Tasks.Task<Blazorise.ModalInstance> Show(Microsoft.AspNetCore.Components.RenderFragment content) { }
        public System.Threading.Tasks.Task<Blazorise.ModalInstance> Show(System.Type componentType) { }
        public System.Threading.Tasks.Task<Blazorise.ModalInstance> Show(string title, Microsoft.AspNetCore.Components.RenderFragment content) { }
        public System.Threading.Tasks.Task<Blazorise.ModalInstance> Show(string title, System.Type componentType) { }
        public System.Threading.Tasks.Task<Blazorise.ModalInstance> Show(string title, Microsoft.AspNetCore.Components.RenderFragment childContent, Blazorise.ModalInstanceOptions modalInstanceOptions = null) { }
        public System.Threading.Tasks.Task<Blazorise.ModalInstance> Show(string title, System.Type componentType, System.Collections.Generic.Dictionary<string, object> componentParameters = null, Blazorise.ModalInstanceOptions modalInstanceOptions = null) { }
        public System.Threading.Tasks.Task<Blazorise.ModalInstance> Show<TComponent>()
            where TComponent :  notnull, Microsoft.AspNetCore.Components.IComponent { }
        public System.Threading.Tasks.Task<Blazorise.ModalInstance> Show<TComponent>(System.Action<Blazorise.ModalProviderParameterBuilder<TComponent>> parameters)
            where TComponent :  notnull, Microsoft.AspNetCore.Components.IComponent { }
        public System.Threading.Tasks.Task<Blazorise.ModalInstance> Show<TComponent>(string title)
            where TComponent :  notnull, Microsoft.AspNetCore.Components.IComponent { }
        public System.Threading.Tasks.Task<Blazorise.ModalInstance> Show<TComponent>(System.Action<Blazorise.ModalProviderParameterBuilder<TComponent>> parameters, Blazorise.ModalInstanceOptions modalInstanceOptions)
            where TComponent :  notnull, Microsoft.AspNetCore.Components.IComponent { }
        public System.Threading.Tasks.Task<Blazorise.ModalInstance> Show<TComponent>(string title, Blazorise.ModalInstanceOptions modalProviderOptions)
            where TComponent :  notnull, Microsoft.AspNetCore.Components.IComponent { }
        public System.Threading.Tasks.Task<Blazorise.ModalInstance> Show<TComponent>(string title, System.Action<Blazorise.ModalProviderParameterBuilder<TComponent>> parameters)
            where TComponent :  notnull, Microsoft.AspNetCore.Components.IComponent { }
        public System.Threading.Tasks.Task<Blazorise.ModalInstance> Show<TComponent>(string title, System.Action<Blazorise.ModalProviderParameterBuilder<TComponent>> parameters, Blazorise.ModalInstanceOptions modalInstanceOptions)
            where TComponent :  notnull, Microsoft.AspNetCore.Components.IComponent { }
    }
    public class ModalSharedContext : Blazorise.IModalSharedContext
    {
        public ModalSharedContext() { }
        public int OpenIndex { get; }
        public int DecreaseModalOpenIndex() { }
        public int RaiseModalOpenIndex() { }
    }
    public enum ModalSize
    {
        Default = 0,
        Small = 1,
        Large = 2,
        ExtraLarge = 3,
        Fullscreen = 4,
    }
    public class ModalStateEventArgs : System.EventArgs
    {
        public ModalStateEventArgs(bool visible) { }
        public bool Visible { get; }
    }
    public class ModalTitle : Blazorise.BaseComponent
    {
        public ModalTitle() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.HeadingSize Size { get; set; }
        protected string SizeNumber { get; }
        protected string TagName { get; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public enum MouseButton
    {
        Left = 0,
        Middle = 1,
        Right = 2,
    }
    public class NotificationEventArgs : System.EventArgs
    {
        public NotificationEventArgs(Blazorise.NotificationType notificationType, Microsoft.AspNetCore.Components.MarkupString message, string title, Blazorise.NotificationOptions options) { }
        public NotificationEventArgs(Blazorise.NotificationType notificationType, string message, string title, Blazorise.NotificationOptions options) { }
        public Microsoft.AspNetCore.Components.MarkupString Message { get; }
        public Blazorise.NotificationType NotificationType { get; }
        public Blazorise.NotificationOptions Options { get; }
        public string Title { get; }
    }
    public enum NotificationLocation
    {
        Center = 0,
        Start = 1,
        End = 2,
    }
    public class NotificationOptions
    {
        public NotificationOptions() { }
        public double? IntervalBeforeClose { get; set; }
        public bool Multiline { get; set; }
        public object OkButtonIcon { get; set; }
        public string OkButtonText { get; set; }
        public static Blazorise.NotificationOptions Default { get; }
    }
    public enum NotificationType
    {
        Info = 0,
        Success = 1,
        Warning = 2,
        Error = 3,
    }
    public enum NumericAllowDecimalPadding
    {
        Always = 0,
        Never = 1,
        Floats = 2,
    }
    [System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field, AllowMultiple=false)]
    public sealed class NumericAttribute : System.Attribute
    {
        public NumericAttribute() { }
        public string Culture { get; set; }
        public string DecimalSeparator { get; set; }
        public int Decimals { get; set; }
        public bool EnableStep { get; set; }
        public bool ShowStepButtons { get; set; }
        public int Step { get; set; }
    }
    public class NumericEdit<TValue> : Blazorise.BaseTextInput<TValue>, System.IAsyncDisposable
    {
        public NumericEdit() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Culture { get; set; }
        protected System.Globalization.CultureInfo CurrentCultureInfo { get; }
        protected string InputMode { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public TValue Max { get; set; }
        protected string MaxString { get; }
        protected object MaxValue { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public TValue Min { get; set; }
        protected string MinString { get; }
        protected object MinValue { get; }
        protected override bool ShouldAutoGenerateId { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public decimal? Step { get; set; }
        protected string StepString { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public TValue Value { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<TValue> ValueChanged { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Linq.Expressions.Expression<System.Func<TValue>> ValueExpression { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int? VisibleCharacters { get; set; }
        protected override TValue InternalValue { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override string FormatValueAsString(TValue value) { }
        protected override string GetFormatedValueExpression() { }
        protected override System.Threading.Tasks.Task OnBlurHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs) { }
        protected override System.Threading.Tasks.Task OnInternalValueChanged(TValue value) { }
        protected override System.Threading.Tasks.Task<Blazorise.ParseValue<TValue>> ParseValueFromStringAsync(string value) { }
        protected virtual System.Threading.Tasks.Task ProcessNumber(TValue number) { }
        public override System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) { }
    }
    public enum NumericMinMaxLimitsOverride
    {
        Ignore = 0,
        DoNotOverride = 1,
        Ceiling = 2,
        Floor = 3,
    }
    public class NumericPickerAdapter
    {
        public NumericPickerAdapter(Blazorise.INumericPicker numericEdit) { }
        [Microsoft.JSInterop.JSInvokable]
        public System.Threading.Tasks.Task SetValue(string value) { }
    }
    public class NumericPicker<TValue> : Blazorise.BaseTextInput<TValue>, Blazorise.INumericPicker, System.IAsyncDisposable
    {
        public NumericPicker() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.NumericAllowDecimalPadding AllowDecimalPadding { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string AlternativeDecimalSeparator { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool AlwaysAllowDecimalSeparator { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Culture { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string CurrencySymbol { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.CurrencySymbolPlacement CurrencySymbolPlacement { get; set; }
        protected System.Globalization.CultureInfo CurrentCultureInfo { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string DecimalSeparator { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int Decimals { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool? EnableStep { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string GroupSeparator { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string GroupSpacing { get; set; }
        protected string InputMode { get; }
        protected bool IsEnableStep { get; }
        protected bool IsShowStepButtons { get; }
        [Microsoft.AspNetCore.Components.Inject]
        public Blazorise.Modules.IJSNumericPickerModule JSModule { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public TValue Max { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public TValue Min { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.NumericMinMaxLimitsOverride MinMaxLimitsOverride { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ModifyValueOnWheel { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.NumericRoundingMethod RoundingMethod { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool SelectAllOnFocus { get; set; }
        protected override bool ShouldAutoGenerateId { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool? ShowStepButtons { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public decimal? Step { get; set; }
        protected string StepString { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public TValue Value { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<TValue> ValueChanged { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Linq.Expressions.Expression<System.Func<TValue>> ValueExpression { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int? VisibleCharacters { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.NumericWheelOn WheelOn { get; set; }
        protected override TValue InternalValue { get; set; }
        protected virtual TValue AddStep(TValue value, int sign) { }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override System.Threading.Tasks.ValueTask DisposeAsync(bool disposing) { }
        protected override string FormatValueAsString(TValue value) { }
        protected int GetDecimals() { }
        protected override string GetFormatedValueExpression() { }
        protected override System.Threading.Tasks.Task OnBlurHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs) { }
        protected override System.Threading.Tasks.Task OnFirstAfterRenderAsync() { }
        protected override System.Threading.Tasks.Task OnInternalValueChanged(TValue value) { }
        protected override System.Threading.Tasks.Task OnKeyDownHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs) { }
        protected override System.Threading.Tasks.Task OnKeyPressHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs) { }
        protected virtual System.Threading.Tasks.Task OnSpinDownClicked() { }
        protected virtual System.Threading.Tasks.Task OnSpinUpClicked() { }
        protected override System.Threading.Tasks.Task<Blazorise.ParseValue<TValue>> ParseValueFromStringAsync(string value) { }
        protected virtual System.Threading.Tasks.Task ProcessNumber(TValue number) { }
        public override System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) { }
        public System.Threading.Tasks.Task SetValue(string value) { }
    }
    public enum NumericRoundingMethod
    {
        HalfUpSymmetric = 0,
        HalfUpAsymmetric = 1,
        HalfDownSymmetric = 2,
        HalfDownAsymmetric = 3,
        HalfEvenBankersRounding = 4,
        UpRoundAwayFromZero = 5,
        DownRoundTowardZero = 6,
        ToCeilingTowardPositiveInfinity = 7,
        ToFloorTowardNegativeInfinity = 8,
        ToNearest05 = 9,
        ToNearest05Alt = 10,
        UpToNext05 = 11,
        DownToNext05 = 12,
    }
    public enum NumericWheelOn
    {
        Focus = 0,
        Hover = 1,
    }
    public class Offcanvas : Blazorise.BaseComponent, Blazorise.IAnimatedComponent, Blazorise.ICloseActivator, Blazorise.IHideableComponent, System.IAsyncDisposable
    {
        protected bool BackdropVisible;
        public Offcanvas() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Animated { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int AnimationDuration { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback Closed { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Func<Blazorise.OffcanvasClosingEventArgs, System.Threading.Tasks.Task> Closing { get; set; }
        protected bool HasOffcanvasBody { get; }
        protected bool HasOffcanvasFooter { get; }
        protected bool HasOffcanvasHeader { get; }
        protected bool IsVisible { get; }
        [Microsoft.AspNetCore.Components.Inject]
        public Blazorise.Modules.IJSClosableModule JSClosableModule { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback Opened { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Func<Blazorise.OffcanvasOpeningEventArgs, System.Threading.Tasks.Task> Opening { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Placement Placement { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ShowBackdrop { get; set; }
        protected Blazorise.States.OffcanvasState State { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Visible { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<bool> VisibleChanged { get; set; }
        public System.Threading.Tasks.Task BeginAnimation(bool visible) { }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void BuildStyles(Blazorise.Utilities.StyleBuilder builder) { }
        public System.Threading.Tasks.Task Close(Blazorise.CloseReason closeReason) { }
        protected override System.Threading.Tasks.ValueTask DisposeAsync(bool disposing) { }
        public System.Threading.Tasks.Task EndAnimation(bool visible) { }
        protected virtual System.Threading.Tasks.Task HandleVisibilityStyles(bool visible) { }
        public System.Threading.Tasks.Task Hide() { }
        protected System.Threading.Tasks.Task Hide(Blazorise.CloseReason closeReason) { }
        public System.Threading.Tasks.Task<bool> IsSafeToClose(string elementId, Blazorise.CloseReason closeReason, bool isChildClicked) { }
        protected override System.Threading.Tasks.Task OnFirstAfterRenderAsync() { }
        protected virtual System.Threading.Tasks.Task RaiseEvents(bool visible) { }
        public override System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) { }
        public System.Threading.Tasks.Task Show() { }
    }
    public class OffcanvasBody : Blazorise.BaseComponent, System.IDisposable
    {
        public OffcanvasBody() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Offcanvas ParentOffcanvas { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void Dispose(bool disposing) { }
        protected override void OnInitialized() { }
    }
    public class OffcanvasClosingEventArgs : System.ComponentModel.CancelEventArgs
    {
        public OffcanvasClosingEventArgs(bool cancel, Blazorise.CloseReason closeReason) { }
        public Blazorise.CloseReason CloseReason { get; }
    }
    public class OffcanvasFooter : Blazorise.BaseComponent, System.IDisposable
    {
        public OffcanvasFooter() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Offcanvas ParentOffcanvas { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void Dispose(bool disposing) { }
        protected override void OnInitialized() { }
    }
    public class OffcanvasHeader : Blazorise.BaseComponent, System.IDisposable
    {
        public OffcanvasHeader() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Offcanvas ParentOffcanvas { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void Dispose(bool disposing) { }
        protected override void OnInitialized() { }
    }
    public class OffcanvasOpeningEventArgs : System.ComponentModel.CancelEventArgs
    {
        public OffcanvasOpeningEventArgs(bool cancel) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field, AllowMultiple=false)]
    public sealed class OrderAttribute : System.Attribute
    {
        public OrderAttribute() { }
        public int DisplayOrder { get; set; }
        public int EditOrder { get; set; }
    }
    public class OrderedList : Blazorise.BaseTypographyComponent
    {
        public OrderedList() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public string ListStyleImage { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.OrderedListType ListType { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Unstyled { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void BuildStyles(Blazorise.Utilities.StyleBuilder builder) { }
    }
    public class OrderedListItem : Blazorise.BaseTypographyComponent
    {
        public OrderedListItem() { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public enum OrderedListType
    {
        Default = 0,
        LowerAlpha = 1,
        LowerRoman = 2,
        UpperAlpha = 3,
        UpperRoman = 4,
    }
    public enum Orientation
    {
        Horizontal = 0,
        Vertical = 1,
    }
    public static class Overflow
    {
        public static Blazorise.IFluentOverflowSecondRule Auto { get; }
        public static Blazorise.IFluentOverflowSecondRule Hidden { get; }
        public static Blazorise.IFluentOverflowSecondRule Scroll { get; }
        public static Blazorise.IFluentOverflowSecondRule Visible { get; }
    }
    public enum OverflowType
    {
        Default = 0,
        Visible = 1,
        Hidden = 2,
        Scroll = 3,
        Auto = 4,
    }
    public static class Padding
    {
        public static Blazorise.IFluentSpacingOnBreakpointWithSideAndSize Is0 { get; }
        public static Blazorise.IFluentSpacingOnBreakpointWithSideAndSize Is1 { get; }
        public static Blazorise.IFluentSpacingOnBreakpointWithSideAndSize Is2 { get; }
        public static Blazorise.IFluentSpacingOnBreakpointWithSideAndSize Is3 { get; }
        public static Blazorise.IFluentSpacingOnBreakpointWithSideAndSize Is4 { get; }
        public static Blazorise.IFluentSpacingOnBreakpointWithSideAndSize Is5 { get; }
        public static Blazorise.IFluentSpacingOnBreakpointWithSideAndSize IsAuto { get; }
        public static Blazorise.IFluentSpacingWithSize Is(string value) { }
    }
    public class PageProgress : Blazorise.BaseComponent
    {
        public PageProgress() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Color Color { get; set; }
        protected Blazorise.Utilities.ClassBuilder IndicatorClassBuilder { get; }
        protected string IndicatorClassNames { get; }
        protected string IndicatorStyleNames { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int? Value { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Visible { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected virtual void BuildIndicatorClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void DirtyClasses() { }
        public System.Threading.Tasks.Task SetValueAsync(int? value) { }
    }
    [System.Obsolete("PageProgressAlert is deprecated, please use PageProgressProvider instead.")]
    public class PageProgressAlert : Blazorise.BaseComponent, System.IDisposable
    {
        public PageProgressAlert() { }
        protected Blazorise.Color Color { get; set; }
        protected Blazorise.PageProgress PageProgressRef { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.IPageProgressService PageProgressService { get; set; }
        protected int? Percentage { get; set; }
        protected bool Visible { get; set; }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void Dispose(bool disposing) { }
        protected override void OnInitialized() { }
    }
    public class PageProgressEventArgs : System.EventArgs
    {
        public PageProgressEventArgs(int? percentage, Blazorise.PageProgressOptions options) { }
        public Blazorise.PageProgressOptions Options { get; }
        public int? Percentage { get; }
    }
    public class PageProgressOptions
    {
        public PageProgressOptions() { }
        public Blazorise.Color Color { get; set; }
        public static Blazorise.PageProgressOptions Default { get; }
    }
    public class PageProgressProvider : Blazorise.PageProgressAlert
    {
        public PageProgressProvider() { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class Pagination : Blazorise.BaseComponent, System.IDisposable
    {
        public Pagination() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Alignment Alignment { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Size? Size { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        public Blazorise.Theme Theme { get; set; }
        protected Blazorise.Size ThemeSize { get; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void Dispose(bool disposing) { }
        protected override void OnInitialized() { }
    }
    public class PaginationItem : Blazorise.BaseComponent
    {
        public PaginationItem() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Active { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Disabled { get; set; }
        protected string DisabledString { get; }
        protected Blazorise.States.PaginationItemState State { get; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class PaginationLink : Blazorise.BaseComponent
    {
        public PaginationLink() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<string> Clicked { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Page { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Pagination ParentPagination { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.States.PaginationItemState ParentPaginationItemState { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected System.Threading.Tasks.Task ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
    }
    public class Paragraph : Blazorise.BaseTypographyComponent
    {
        public Paragraph() { }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public struct ParseValue<TValue>
    {
        public static readonly Blazorise.ParseValue<TValue> Empty;
        public ParseValue(bool success, TValue parsedValue, string errorMessage = null) { }
        public string ErrorMessage { get; }
        public TValue ParsedValue { get; }
        public bool Success { get; }
    }
    public class PatternValidationHandler : Blazorise.IValidationHandler
    {
        public PatternValidationHandler() { }
        public void Validate(Blazorise.IValidation validation, object newValidationValue) { }
        public System.Threading.Tasks.Task ValidateAsync(Blazorise.IValidation validation, object newValidationValue, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public enum Placement
    {
        Top = 0,
        Bottom = 1,
        Start = 2,
        End = 3,
    }
    public static class Position
    {
        public static Blazorise.IFluentPositionWithEdgeTypeAndTranslateType Absolute { get; }
        public static Blazorise.IFluentPositionWithEdgeTypeAndTranslateType Fixed { get; }
        public static Blazorise.IFluentPositionWithEdgeTypeAndTranslateType Relative { get; }
        public static Blazorise.IFluentPositionWithEdgeTypeAndTranslateType Static { get; }
        public static Blazorise.IFluentPositionWithEdgeTypeAndTranslateType Sticky { get; }
    }
    public enum PositionEdgeType
    {
        Default = 0,
        Top = 1,
        Start = 2,
        Bottom = 3,
        End = 4,
    }
    public enum PositionTranslateType
    {
        None = 0,
        Middle = 1,
        MiddleX = 2,
        MiddleY = 3,
    }
    public enum PositionType
    {
        Default = 0,
        Static = 1,
        Relative = 2,
        Absolute = 3,
        Fixed = 4,
        Sticky = 5,
    }
    public class Progress : Blazorise.BaseComponent, System.IDisposable
    {
        public Progress() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Animated { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Color Color { get; set; }
        protected bool HasProgressBar { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Indeterminate { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int Max { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int Min { get; set; }
        protected int? Percentage { get; }
        protected Blazorise.Utilities.ClassBuilder ProgressBarClassBuilder { get; }
        protected string ProgressBarClassNames { get; }
        protected Blazorise.Utilities.StyleBuilder ProgressBarStyleBuilder { get; }
        protected string ProgressBarStyleNames { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ShowValue { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Size? Size { get; set; }
        protected Blazorise.States.ProgressState State { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Striped { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        public Blazorise.Theme Theme { get; set; }
        protected Blazorise.Size ThemeSize { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int? Value { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void DirtyClasses() { }
        protected override void DirtyStyles() { }
        protected override void Dispose(bool disposing) { }
        protected override void OnInitialized() { }
    }
    public class ProgressBar : Blazorise.BaseComponent
    {
        public ProgressBar() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Animated { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Color Color { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Indeterminate { get; set; }
        protected bool IsShowValue { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int Max { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int Min { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Progress ParentProgress { get; set; }
        protected int? Percentage { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Striped { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int? Value { get; set; }
        public System.Threading.Tasks.Task Animate(bool animated) { }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void BuildStyles(Blazorise.Utilities.StyleBuilder builder) { }
        protected override void OnInitialized() { }
    }
    public class RadioCheckedChangedEventArgs<TValue> : System.EventArgs
    {
        public RadioCheckedChangedEventArgs(TValue value) { }
        public TValue Value { get; }
    }
    [Microsoft.AspNetCore.Components.CascadingTypeParameter("TValue")]
    public class RadioGroup<TValue> : Blazorise.BaseInputComponent<TValue>
    {
        public RadioGroup() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Buttons { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public TValue CheckedValue { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<TValue> CheckedValueChanged { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Linq.Expressions.Expression<System.Func<TValue>> CheckedValueExpression { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Color Color { get; set; }
        public bool Inline { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Name { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Orientation Orientation { get; set; }
        protected override TValue InternalValue { get; set; }
        public event System.EventHandler<Blazorise.RadioCheckedChangedEventArgs<TValue>> RadioCheckedChanged;
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override string GetFormatedValueExpression() { }
        protected override System.Threading.Tasks.Task OnInternalValueChanged(TValue value) { }
        protected override void OnValidationStatusChanged(object sender, Blazorise.ValidationStatusChangedEventArgs eventArgs) { }
        protected override System.Threading.Tasks.Task<Blazorise.ParseValue<TValue>> ParseValueFromStringAsync(string value) { }
        public override System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) { }
    }
    public class Radio<TValue> : Blazorise.BaseCheckComponent<bool>, System.IDisposable
    {
        public Radio() { }
        protected bool AsButton { get; }
        protected Blazorise.Color ButtonColor { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Group { get; set; }
        protected bool ParentIsRadioGroup { get; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.RadioGroup<TValue> ParentRadioGroup { get; set; }
        protected override string TrueValueName { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public TValue Value { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void Dispose(bool disposing) { }
        protected override System.Threading.Tasks.Task OnChangeHandler(Microsoft.AspNetCore.Components.ChangeEventArgs eventArgs) { }
        protected override void OnInitialized() { }
        public override System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) { }
    }
    public class Rating : Blazorise.BaseComponent
    {
        public Rating() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Color Color { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Disabled { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public virtual object EmptyIcon { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.IconStyle? EmptyIconStyle { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public virtual object FullIcon { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.IconStyle? FullIconStyle { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Func<int, Blazorise.RatingTooltip> GetTooltip { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<int?> HoveredValueChanged { get; set; }
        public bool Hovering { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int MaxValue { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string RatingItemsClass { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string RatingItemsStyle { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ReadOnly { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int SelectedValue { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<int> SelectedValueChanged { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected virtual System.Threading.Tasks.Task HandleItemClicked(int value) { }
        protected virtual System.Threading.Tasks.Task HandleItemHovered(int? value) { }
        public virtual bool IsHoveredRange(int value) { }
        public virtual bool IsSelectedRange(int value) { }
        protected virtual System.Threading.Tasks.Task OnMouseOutHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
        protected virtual System.Threading.Tasks.Task OnMouseOverHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
    }
    public class RatingItem : Blazorise.BaseComponent
    {
        public RatingItem() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Color Color { get; set; }
        protected virtual object IconName { get; }
        protected virtual Blazorise.IconStyle IconStyle { get; }
        protected bool IsActive { get; set; }
        protected bool IsSelected { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<int> ItemClicked { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<int?> ItemHovered { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Rating Rating { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int Value { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected virtual System.Threading.Tasks.Task HandleClick() { }
        protected virtual System.Threading.Tasks.Task HandleMouseOut(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
        protected virtual System.Threading.Tasks.Task HandleMouseOver(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
    }
    public class RatingTooltip
    {
        public RatingTooltip(string text) { }
        public RatingTooltip(string text, Blazorise.TooltipPlacement placement) { }
        public RatingTooltip(string text, Blazorise.TooltipPlacement placement, bool multiline, bool showArrow) { }
        public bool Multiline { get; }
        public Blazorise.TooltipPlacement Placement { get; }
        public bool ShowArrow { get; }
        public string Text { get; }
    }
    public class Repeater<TItem> : Microsoft.AspNetCore.Components.IComponent, System.IDisposable
    {
        public Repeater() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment<TItem> ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<System.Collections.Specialized.NotifyCollectionChangedEventArgs> CollectionChanged { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Collections.Generic.IEnumerable<TItem> Items { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public long? Skip { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public long? Take { get; set; }
        public virtual void Attach(Microsoft.AspNetCore.Components.RenderHandle handle) { }
        protected virtual System.Threading.Tasks.Task CollectionChangedAsync(System.Collections.Specialized.NotifyCollectionChangedEventArgs e) { }
        public void Dispose() { }
        protected virtual void Dispose(bool disposing) { }
        protected override void Finalize() { }
        public virtual void RenderItems() { }
        public virtual System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) { }
    }
    public class Row : Blazorise.BaseRowComponent
    {
        public Row() { }
        [Microsoft.AspNetCore.Components.Parameter]
        [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "Horizontal",
                "Vertical"})]
        public System.ValueTuple<int, int>? Gutter { get; set; }
        [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "Horizontal",
                "Vertical"})]
        protected System.ValueTuple<int, int> GutterState { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int? HorizontalGutter { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool NoGutters { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.IFluentRowColumns RowColumns { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int? VerticalGutter { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void BuildStyles(Blazorise.Utilities.StyleBuilder builder) { }
    }
    public static class RowColumns
    {
        public static Blazorise.IFluentRowColumnsAll Are1 { get; }
        public static Blazorise.IFluentRowColumnsAll Are2 { get; }
        public static Blazorise.IFluentRowColumnsAll Are3 { get; }
        public static Blazorise.IFluentRowColumnsAll Are4 { get; }
        public static Blazorise.IFluentRowColumnsAll Are5 { get; }
        public static Blazorise.IFluentRowColumnsAll Are6 { get; }
    }
    public class RowColumnsDefinition : System.IEquatable<Blazorise.RowColumnsDefinition>
    {
        public RowColumnsDefinition() { }
        public Blazorise.Breakpoint Breakpoint { get; set; }
    }
    public enum RowColumnsSize
    {
        Default = 0,
        Are1 = 1,
        Are2 = 2,
        Are3 = 3,
        Are4 = 4,
        Are5 = 5,
        Are6 = 6,
    }
    public enum Screenreader
    {
        Always = 0,
        Only = 1,
        OnlyFocusable = 2,
    }
    [System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field, AllowMultiple=false)]
    public sealed class SelectAttribute : System.Attribute
    {
        public SelectAttribute() { }
        public string GetDataFunction { get; set; }
        public int MaxVisibleItems { get; set; }
        public string TextField { get; set; }
        public string ValueField { get; set; }
    }
    public class SelectGroup : Blazorise.BaseComponent
    {
        public SelectGroup() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Label { get; set; }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class SelectItem<TValue> : Blazorise.BaseComponent, Blazorise.ISelectItem<TValue>, System.IDisposable
    {
        public SelectItem() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Disabled { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Hidden { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected virtual Blazorise.Select<TValue> ParentSelect { get; set; }
        protected bool Selected { get; }
        protected string StringValue { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public TValue Value { get; set; }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void Dispose(bool disposing) { }
        protected override System.Threading.Tasks.Task OnInitializedAsync() { }
    }
    [Microsoft.AspNetCore.Components.CascadingTypeParameter("TValue")]
    public class Select<TValue> : Blazorise.BaseInputComponent<System.Collections.Generic.IReadOnlyList<TValue>>
    {
        public Select() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Loading { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int? MaxVisibleItems { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Multiple { get; set; }
        protected System.Collections.Generic.IEnumerable<Blazorise.ISelectItem<TValue>> SelectItems { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public TValue SelectedValue { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<TValue> SelectedValueChanged { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Linq.Expressions.Expression<System.Func<TValue>> SelectedValueExpression { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Collections.Generic.IReadOnlyList<TValue> SelectedValues { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.IReadOnlyList<TValue>> SelectedValuesChanged { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Linq.Expressions.Expression<System.Func<System.Collections.Generic.IReadOnlyList<TValue>>> SelectedValuesExpression { get; set; }
        public override object ValidationValue { get; }
        protected override System.Collections.Generic.IReadOnlyList<TValue> InternalValue { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        public bool ContainsValue(TValue value) { }
        protected override string FormatValueAsString(System.Collections.Generic.IReadOnlyList<TValue> value) { }
        protected override string GetFormatedValueExpression() { }
        protected virtual System.Threading.Tasks.Task OnChangeHandler(Microsoft.AspNetCore.Components.ChangeEventArgs eventArgs) { }
        protected override System.Threading.Tasks.Task OnInternalValueChanged(System.Collections.Generic.IReadOnlyList<TValue> value) { }
        protected override System.Threading.Tasks.Task<Blazorise.ParseValue<System.Collections.Generic.IReadOnlyList<TValue>>> ParseValueFromStringAsync(string value) { }
        protected override object PrepareValueForValidation(System.Collections.Generic.IReadOnlyList<TValue> value) { }
        public override System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) { }
    }
    public enum Shadow
    {
        None = 0,
        Remove = 1,
        Default = 2,
        Small = 3,
        Large = 4,
    }
    public enum Side
    {
        None = 0,
        Top = 1,
        Bottom = 2,
        Start = 3,
        End = 4,
        X = 5,
        Y = 6,
        All = 7,
    }
    public enum Size
    {
        Default = 0,
        ExtraSmall = 1,
        Small = 2,
        Medium = 3,
        Large = 4,
        ExtraLarge = 5,
    }
    public class SizingDefinition : System.IEquatable<Blazorise.SizingDefinition>
    {
        public SizingDefinition() { }
        public Blazorise.Breakpoint Breakpoint { get; set; }
        public bool IsMax { get; set; }
        public bool IsMin { get; set; }
        public bool IsViewport { get; set; }
    }
    public enum SizingSize
    {
        Default = 0,
        Is25 = 1,
        Is33 = 2,
        Is50 = 3,
        Is66 = 4,
        Is75 = 5,
        Is100 = 6,
        Auto = 7,
    }
    public enum SizingType
    {
        None = 0,
        Width = 1,
        Height = 2,
    }
    public class Slider<TValue> : Blazorise.BaseInputComponent<TValue>
    {
        public Slider() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public TValue Max { get; set; }
        protected bool MaxDefined { get; }
        protected string MaxString { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public TValue Min { get; set; }
        protected bool MinDefined { get; }
        protected string MinString { get; }
        protected override bool ShouldAutoGenerateId { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public TValue Step { get; set; }
        protected string StepString { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public TValue Value { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<TValue> ValueChanged { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Linq.Expressions.Expression<System.Func<TValue>> ValueExpression { get; set; }
        protected override TValue InternalValue { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override string FormatValueAsString(TValue value) { }
        protected override string GetFormatedValueExpression() { }
        protected override System.Threading.Tasks.Task OnInternalValueChanged(TValue value) { }
        protected override System.Threading.Tasks.Task<Blazorise.ParseValue<TValue>> ParseValueFromStringAsync(string value) { }
        public override System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) { }
    }
    public class Small : Blazorise.BaseElementComponent
    {
        public Small() { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public enum SortDirection
    {
        Default = 0,
        Ascending = 1,
        Descending = 2,
    }
    public enum Spacing
    {
        None = 0,
        Margin = 1,
        Padding = 2,
    }
    public enum SpacingSize
    {
        Is0 = 0,
        Is1 = 1,
        Is2 = 2,
        Is3 = 3,
        Is4 = 4,
        Is5 = 5,
        IsAuto = 6,
    }
    public class Span : Blazorise.BaseElementComponent
    {
        public Span() { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class Step : Blazorise.BaseComponent, System.IDisposable
    {
        public Step() { }
        protected bool Active { get; }
        protected int? CalculatedIndex { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment Caption { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs> Clicked { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Color Color { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Completed { get; set; }
        protected Blazorise.Utilities.ClassBuilder DescriptionClassBuilder { get; }
        protected string DescriptionClassNames { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int? Index { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment Marker { get; set; }
        protected Blazorise.Utilities.ClassBuilder MarkerClassBuilder { get; }
        protected string MarkerClassNames { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Name { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Steps ParentSteps { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.States.StepsState ParentStepsState { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected virtual void BuildDescriptionClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected virtual void BuildMarkerClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected System.Threading.Tasks.Task ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
        protected override void DirtyClasses() { }
        protected override void Dispose(bool disposing) { }
        protected override void OnInitialized() { }
    }
    public class StepNavigationContext
    {
        public StepNavigationContext() { }
        public int CurrentStepIndex { get; init; }
        public string CurrentStepName { get; init; }
        public int NextStepIndex { get; init; }
        public string NextStepName { get; init; }
    }
    public class StepPanel : Blazorise.BaseComponent, System.IDisposable
    {
        public StepPanel() { }
        protected bool Active { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Name { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Steps ParentSteps { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.StepsContent ParentStepsContent { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.States.StepsContentState ParentStepsContentStore { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.States.StepsState ParentStepsState { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void Dispose(bool disposing) { }
        protected override void OnInitialized() { }
    }
    public class Steps : Blazorise.BaseComponent
    {
        public Steps() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment Content { get; set; }
        protected Blazorise.Utilities.ClassBuilder ContentClassBuilder { get; }
        protected string ContentClassNames { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment Items { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Func<Blazorise.StepNavigationContext, bool> NavigationAllowed { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string SelectedStep { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<string> SelectedStepChanged { get; set; }
        protected Blazorise.States.StepsState State { get; }
        protected System.Collections.Generic.IReadOnlyList<string> StepItems { get; }
        protected System.Collections.Generic.IReadOnlyList<string> StepPanels { get; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        public System.Threading.Tasks.Task NextStep() { }
        public System.Threading.Tasks.Task PreviousStep() { }
        public System.Threading.Tasks.Task SelectStep(string stepName) { }
    }
    public class StepsContent : Blazorise.BaseComponent
    {
        public StepsContent() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected int IndexOfSelectedPanel { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string SelectedPanel { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<string> SelectedPanelChanged { get; set; }
        protected Blazorise.States.StepsContentState State { get; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        public System.Threading.Tasks.Task SelectPanel(string name) { }
    }
    public class Strong : Blazorise.BaseElementComponent
    {
        public Strong() { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public abstract class StyleProvider : Blazorise.IStyleProvider
    {
        protected StyleProvider() { }
        public abstract int DefaultModalBackdropZIndex { get; }
        public abstract int DefaultModalZIndex { get; }
        public virtual string ColumnGutter([System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "Horizontal",
                "Vertical"})] System.ValueTuple<int, int> gutter) { }
        public abstract string ModalAnimationDuration(bool animated, int animationDuration);
        public abstract string ModalBackdropZIndex(int modalOpenIndex);
        public abstract string ModalBodyMaxHeight(int maxHeight);
        public abstract string ModalFade(bool showing, bool hiding);
        public abstract string ModalShow(bool visible);
        public abstract string ModalZIndex(int modalOpenIndex);
        public abstract string OffcanvasAnimationDuration(bool animated, int AnimationDuration);
        public abstract string OffcanvasBackdropAnimationDuration(bool animated, int animationDuration);
        public abstract string ProgressBarSize(Blazorise.Size size);
        public abstract string ProgressBarValue(int value);
        public virtual string RowGutter([System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "Horizontal",
                "Vertical"})] System.ValueTuple<int, int> gutter) { }
        public abstract string ToastAnimationDuration(bool animated, int animationDuration);
    }
    public class Switch<TValue> : Blazorise.BaseCheckComponent<TValue>
    {
        public Switch() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Color Color { get; set; }
        protected bool IsChecked { get; }
        protected override string TrueValueName { get; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        public override System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) { }
    }
    public class Tab : Blazorise.BaseComponent
    {
        public Tab() { }
        protected bool Active { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs> Clicked { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Disabled { get; set; }
        protected Blazorise.Utilities.ClassBuilder LinkClassBuilder { get; }
        protected string LinkClassNames { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Name { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Tabs ParentTabs { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.States.TabsState ParentTabsState { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected System.Threading.Tasks.Task ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
        protected override void DirtyClasses() { }
        protected override void OnInitialized() { }
    }
    public class TabPanel : Blazorise.BaseComponent, System.IDisposable
    {
        public TabPanel() { }
        protected bool Active { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Name { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Tabs ParentTabs { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.TabsContent ParentTabsContent { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.States.TabsContentState ParentTabsContentState { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.States.TabsState ParentTabsState { get; set; }
        protected Blazorise.TabsRenderMode RenderMode { get; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void Dispose(bool disposing) { }
        protected override void OnInitialized() { }
        protected override System.Threading.Tasks.Task OnParametersSetAsync() { }
    }
    public enum TabPosition
    {
        Top = 0,
        Bottom = 1,
        Start = 2,
        End = 3,
    }
    public class Table : Blazorise.BaseDraggableComponent
    {
        public Table() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Bordered { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Borderless { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected Blazorise.Utilities.ClassBuilder ContainerClassBuilder { get; }
        protected string ContainerClassNames { get; }
        protected Blazorise.Utilities.StyleBuilder ContainerStyleBuilder { get; }
        protected string ContainerStyleNames { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool FixedColumns { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool FixedHeader { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string FixedHeaderTableHeight { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string FixedHeaderTableMaxHeight { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool FullWidth { get; set; }
        protected bool HasContainer { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Hoverable { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        public Blazorise.Modules.IJSTableModule JSModule { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Narrow { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Resizable { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.TableResizeMode ResizeMode { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Responsive { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.TableResponsiveMode ResponsiveMode { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Striped { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected virtual void BuildContainerClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected virtual void BuildContainerStyles(Blazorise.Utilities.StyleBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void DirtyClasses() { }
        protected override void DirtyStyles() { }
        protected virtual System.Threading.Tasks.ValueTask InitializeTableFixedHeader() { }
        protected override System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender) { }
        public System.Threading.Tasks.ValueTask ScrollToPixels(int pixels) { }
        public System.Threading.Tasks.ValueTask ScrollToRow(int row) { }
    }
    public class TableBody : Blazorise.BaseDraggableComponent
    {
        public TableBody() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Table ParentTable { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public enum TableColumnFixedPosition
    {
        None = 0,
        Start = 1,
        End = 2,
    }
    public class TableFooter : Blazorise.BaseDraggableComponent
    {
        public TableFooter() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class TableHeader : Blazorise.BaseDraggableComponent
    {
        public TableHeader() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Table ParentTable { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.ThemeContrast ThemeContrast { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class TableHeaderCell : Blazorise.BaseDraggableComponent
    {
        public TableHeaderCell() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Blazorise.BLMouseEventArgs> Clicked { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int? ColumnSpan { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Cursor Cursor { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.TableColumnFixedPosition FixedPosition { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.TableRow ParentTableRow { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int? RowSpan { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void BuildStyles(Blazorise.Utilities.StyleBuilder builder) { }
        protected System.Threading.Tasks.Task OnClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
        protected override void OnInitialized() { }
    }
    public enum TableResizeMode
    {
        Header = 0,
        Columns = 1,
    }
    public enum TableResponsiveMode
    {
        Default = 0,
        Mobile = 1,
    }
    public class TableRow : Blazorise.BaseDraggableComponent
    {
        public TableRow() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Blazorise.BLMouseEventArgs> Clicked { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Color Color { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Blazorise.BLMouseEventArgs> DoubleClicked { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Cursor HoverCursor { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Blazorise.BLMouseEventArgs> MouseLeave { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Blazorise.BLMouseEventArgs> MouseOver { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Table ParentTable { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Selected { get; set; }
        public event System.EventHandler<Blazorise.TableRow.TableRowCellFixedPositionEndAddedEventArgs> TableRowCellFixedPositionEndAdded;
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void Dispose(bool disposing) { }
        protected override System.Threading.Tasks.ValueTask DisposeAsync(bool disposing) { }
        protected System.Threading.Tasks.Task OnClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
        protected System.Threading.Tasks.Task OnMouseLeaveHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
        protected System.Threading.Tasks.Task OnMouseOverHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
        public class TableRowCellFixedPositionEndAddedEventArgs
        {
            public TableRowCellFixedPositionEndAddedEventArgs() { }
            public double Width { get; set; }
        }
    }
    public class TableRowCell : Blazorise.BaseDraggableComponent
    {
        public TableRowCell() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ClickPreventDefault { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ClickStopPropagation { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Blazorise.BLMouseEventArgs> Clicked { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Color Color { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int? ColumnSpan { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.TableColumnFixedPosition FixedPosition { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string MobileModeCaption { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.TableRow ParentTableRow { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int? RowSpan { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void BuildStyles(Blazorise.Utilities.StyleBuilder builder) { }
        protected System.Threading.Tasks.Task OnClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
        protected override void OnInitialized() { }
    }
    public class TableRowGroup : Blazorise.BaseDraggableComponent
    {
        public TableRowGroup() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs> Clicked { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int ColumnSpan { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs> DoubleClicked { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Expanded { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<bool> ExpandedChanged { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment<int> IndentTableCellTemplate { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int IndentTableCells { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Table ParentTable { get; set; }
        protected Blazorise.Utilities.ClassBuilder RowCellClassBuilder { get; }
        protected Blazorise.Utilities.ClassBuilder RowIndentCellClassBuilder { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Title { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment TitleTemplate { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Toggleable { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void DirtyClasses() { }
        protected System.Threading.Tasks.Task OnClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
    }
    public class TableRowHeader : Blazorise.BaseDraggableComponent
    {
        public TableRowHeader() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Blazorise.BLMouseEventArgs> Clicked { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int? ColumnSpan { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.TableColumnFixedPosition FixedPosition { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string MobileModeCaption { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.TableRow ParentTableRow { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int? RowSpan { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void BuildStyles(Blazorise.Utilities.StyleBuilder builder) { }
        protected System.Threading.Tasks.Task ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs) { }
        protected override void OnInitialized() { }
    }
    public class Tabs : Blazorise.BaseComponent
    {
        public Tabs() { }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.CardHeader CardHeader { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment Content { get; set; }
        protected Blazorise.Utilities.ClassBuilder ContentClassBuilder { get; }
        protected string ContentClassNames { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool FullWidth { get; set; }
        protected int IndexOfSelectedTab { get; }
        protected bool IsCards { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment Items { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Justified { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Pills { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.TabsRenderMode RenderMode { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string SelectedTab { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<string> SelectedTabChanged { get; set; }
        protected Blazorise.States.TabsState State { get; }
        protected System.Collections.Generic.IReadOnlyList<string> TabItems { get; }
        protected System.Collections.Generic.IReadOnlyList<string> TabPanels { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.TabPosition TabPosition { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.IFluentColumn VerticalItemsColumnSize { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected virtual void BuildContentClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        public System.Threading.Tasks.Task SelectTab(string tabName) { }
    }
    public class TabsContent : Blazorise.BaseComponent
    {
        public TabsContent() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected int IndexOfSelectedPanel { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.TabsRenderMode RenderMode { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string SelectedPanel { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<string> SelectedPanelChanged { get; set; }
        protected Blazorise.States.TabsContentState State { get; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        public System.Threading.Tasks.Task SelectPanel(string name) { }
    }
    public class TabsContentStateEventArgs : System.EventArgs
    {
        public TabsContentStateEventArgs(string panelName) { }
        public string PanelName { get; }
    }
    public enum TabsRenderMode
    {
        Default = 0,
        LazyLoad = 1,
        LazyReload = 2,
    }
    public class TabsStateEventArgs : System.EventArgs
    {
        public TabsStateEventArgs(string tabName) { }
        public string TabName { get; }
    }
    public class Target : Blazorise.Enumeration<Blazorise.Target>, System.IEquatable<Blazorise.Target>
    {
        public static readonly Blazorise.Target Blank;
        public static readonly Blazorise.Target Default;
        public static readonly Blazorise.Target Parent;
        public static readonly Blazorise.Target Self;
        public static readonly Blazorise.Target Top;
        public Target(string name) { }
        public static Blazorise.Target Frame(string name) { }
        public static Blazorise.Target op_Implicit(string name) { }
    }
    public class Text : Blazorise.BaseTypographyComponent
    {
        public Text() { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public enum TextAlignment
    {
        Default = 0,
        Start = 1,
        End = 2,
        Center = 3,
        Justified = 4,
    }
    public class TextColor : Blazorise.Enumeration<Blazorise.TextColor>, System.IEquatable<Blazorise.TextColor>
    {
        public static readonly Blazorise.TextColor Black50;
        public static readonly Blazorise.TextColor Body;
        public static readonly Blazorise.TextColor Danger;
        public static readonly Blazorise.TextColor Dark;
        public static readonly Blazorise.TextColor Default;
        public static readonly Blazorise.TextColor Info;
        public static readonly Blazorise.TextColor Light;
        public static readonly Blazorise.TextColor Muted;
        public static readonly Blazorise.TextColor Primary;
        public static readonly Blazorise.TextColor Secondary;
        public static readonly Blazorise.TextColor Success;
        public static readonly Blazorise.TextColor Warning;
        public static readonly Blazorise.TextColor White;
        public static readonly Blazorise.TextColor White50;
        public TextColor(string name) { }
        public static Blazorise.TextColor op_Implicit(string name) { }
    }
    public class TextEdit : Blazorise.BaseTextInput<string>, System.IAsyncDisposable
    {
        public TextEdit() { }
        protected override string DefaultValue { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string EditMask { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.TextInputMode InputMode { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        public Blazorise.Modules.IJSTextEditModule JSModule { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.MaskType MaskType { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int? MaxLength { get; set; }
        protected string Mode { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.TextRole Role { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Text { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<string> TextChanged { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Linq.Expressions.Expression<System.Func<string>> TextExpression { get; set; }
        protected string Type { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int? VisibleCharacters { get; set; }
        protected override string InternalValue { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override System.Threading.Tasks.ValueTask DisposeAsync(bool disposing) { }
        protected override string GetFormatedValueExpression() { }
        protected override System.Threading.Tasks.Task OnFirstAfterRenderAsync() { }
        protected override System.Threading.Tasks.Task OnInternalValueChanged(string value) { }
        protected override System.Threading.Tasks.Task<Blazorise.ParseValue<string>> ParseValueFromStringAsync(string value) { }
        public override System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) { }
    }
    public enum TextInputMode
    {
        None = 0,
        Text = 1,
        Tel = 2,
        Url = 3,
        Email = 4,
        Numeric = 5,
        Decimal = 6,
        Search = 7,
    }
    public enum TextOverflow
    {
        Default = 0,
        Wrap = 1,
        NoWrap = 2,
        Truncate = 3,
    }
    public enum TextRole
    {
        Text = 0,
        Email = 1,
        Password = 2,
        Url = 3,
        Search = 4,
        Telephone = 5,
    }
    public static class TextSize
    {
        public static Blazorise.IFluentTextSizeOnBreakpoint Default { get; }
        public static Blazorise.IFluentTextSizeOnBreakpoint ExtraLarge { get; }
        public static Blazorise.IFluentTextSizeOnBreakpoint ExtraSmall { get; }
        public static Blazorise.IFluentTextSizeOnBreakpoint Heading1 { get; }
        public static Blazorise.IFluentTextSizeOnBreakpoint Heading2 { get; }
        public static Blazorise.IFluentTextSizeOnBreakpoint Heading3 { get; }
        public static Blazorise.IFluentTextSizeOnBreakpoint Heading4 { get; }
        public static Blazorise.IFluentTextSizeOnBreakpoint Heading5 { get; }
        public static Blazorise.IFluentTextSizeOnBreakpoint Heading6 { get; }
        public static Blazorise.IFluentTextSizeOnBreakpoint Large { get; }
        public static Blazorise.IFluentTextSizeOnBreakpoint Medium { get; }
        public static Blazorise.IFluentTextSizeOnBreakpoint Small { get; }
    }
    public sealed class TextSizeDefinition
    {
        public TextSizeDefinition() { }
        public Blazorise.Breakpoint Breakpoint { get; set; }
    }
    public enum TextSizeType
    {
        Default = 0,
        ExtraSmall = 1,
        Small = 2,
        Medium = 3,
        Large = 4,
        ExtraLarge = 5,
        Heading1 = 6,
        Heading2 = 7,
        Heading3 = 8,
        Heading4 = 9,
        Heading5 = 10,
        Heading6 = 11,
    }
    public enum TextTransform
    {
        Default = 0,
        Lowercase = 1,
        Uppercase = 2,
        Capitalize = 3,
    }
    public enum TextWeight
    {
        Default = 0,
        Normal = 1,
        SemiBold = 2,
        Bold = 3,
        Light = 4,
    }
    [Blazorise.Generator.Features.GenerateEquality]
    public class Theme : System.IEquatable<Blazorise.Theme>
    {
        public Theme() { }
        public Blazorise.ThemeAlertOptions AlertOptions { get; set; }
        public Blazorise.ThemeBackgroundOptions BackgroundOptions { get; set; }
        public Blazorise.ThemeBadgeOptions BadgeOptions { get; set; }
        public Blazorise.ThemeBarOptions BarOptions { get; set; }
        public string Black { get; set; }
        public Blazorise.ThemeBodyOptions BodyOptions { get; set; }
        public Blazorise.ThemeBreadcrumbOptions BreadcrumbOptions { get; set; }
        public Blazorise.ThemeBreakpointOptions BreakpointOptions { get; set; }
        public Blazorise.ThemeButtonOptions ButtonOptions { get; set; }
        public Blazorise.ThemeCardOptions CardOptions { get; set; }
        public Blazorise.ThemeColorOptions ColorOptions { get; set; }
        public Blazorise.ThemeContainerMaxWidthOptions ContainerMaxWidthOptions { get; set; }
        public Blazorise.ThemeDividerOptions DividerOptions { get; set; }
        public Blazorise.ThemeDropdownOptions DropdownOptions { get; set; }
        public bool Enabled { get; set; }
        public Blazorise.ThemeInputOptions InputOptions { get; set; }
        public bool IsGradient { get; set; }
        public bool IsRounded { get; set; }
        public Blazorise.ThemeListGroupItemOptions ListGroupItemOptions { get; set; }
        public byte LuminanceThreshold { get; set; }
        public Blazorise.ThemeModalOptions ModalOptions { get; set; }
        public Blazorise.ThemePaginationOptions PaginationOptions { get; set; }
        public Blazorise.ThemeProgressOptions ProgressOptions { get; set; }
        public Blazorise.ThemeRatingOptions RatingOptions { get; set; }
        public Blazorise.ThemeSidebarOptions SidebarOptions { get; set; }
        public Blazorise.ThemeSnackbarOptions SnackbarOptions { get; set; }
        public Blazorise.ThemeSpacingOptions SpacingOptions { get; set; }
        public Blazorise.ThemeSpinKitOptions SpinKitOptions { get; set; }
        public Blazorise.ThemeStepsOptions StepsOptions { get; set; }
        public Blazorise.ThemeSwitchOptions SwitchOptions { get; set; }
        public Blazorise.ThemeTableOptions TableOptions { get; set; }
        public Blazorise.ThemeTabsOptions TabsOptions { get; set; }
        public Blazorise.ThemeTextColorOptions TextColorOptions { get; set; }
        public float ThemeColorInterval { get; set; }
        public Blazorise.ThemeTooltipOptions TooltipOptions { get; set; }
        [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "name",
                "color"})]
        public System.Collections.Generic.IEnumerable<System.ValueTuple<string, string>> ValidBackgroundColors { get; }
        [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "name",
                "size"})]
        public System.Collections.Generic.IEnumerable<System.ValueTuple<string, string>> ValidBreakpoints { get; }
        [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "name",
                "color"})]
        public System.Collections.Generic.IEnumerable<System.ValueTuple<string, string>> ValidColors { get; }
        [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "name",
                "size"})]
        public System.Collections.Generic.IEnumerable<System.ValueTuple<string, string>> ValidContainerMaxWidths { get; }
        [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "name",
                "color"})]
        public System.Collections.Generic.IEnumerable<System.ValueTuple<string, string>> ValidTextColors { get; }
        public string White { get; set; }
        [Blazorise.Generator.Features.GenerateIgnoreEquality]
        public event System.EventHandler<System.EventArgs> Changed;
        public virtual bool Equals(Blazorise.Theme obj) { }
        public override int GetHashCode() { }
        public void ThemeHasChanged() { }
    }
    public class ThemeAlertOptions : Blazorise.ThemeBasicOptions, System.IEquatable<Blazorise.ThemeAlertOptions>
    {
        public ThemeAlertOptions() { }
        public int? BackgroundLevel { get; set; }
        public int? BorderLevel { get; set; }
        public int? ColorLevel { get; set; }
        public float? GradientBlendPercentage { get; set; }
    }
    public class ThemeBackgroundOptions : System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Func<string>>>, System.Collections.IEnumerable, System.IEquatable<Blazorise.ThemeBackgroundOptions>
    {
        public ThemeBackgroundOptions() { }
        public string Body { get; set; }
        protected System.Collections.Generic.Dictionary<string, System.Func<string>> ColorMap { get; }
        public string Danger { get; set; }
        public string Dark { get; set; }
        public string Info { get; set; }
        public System.Func<string> this[string key] { get; }
        public string Light { get; set; }
        public string Muted { get; set; }
        public string Primary { get; set; }
        public string Secondary { get; set; }
        public string Success { get; set; }
        public string Warning { get; set; }
        public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, System.Func<string>>> GetEnumerator() { }
    }
    public class ThemeBadgeOptions : Blazorise.ThemeBasicOptions, System.IEquatable<Blazorise.ThemeBadgeOptions>
    {
        public ThemeBadgeOptions() { }
    }
    public class ThemeBarBrandColorOptions : System.IEquatable<Blazorise.ThemeBarBrandColorOptions>
    {
        public ThemeBarBrandColorOptions() { }
        public string BackgroundColor { get; set; }
    }
    public class ThemeBarColorOptions : System.IEquatable<Blazorise.ThemeBarColorOptions>
    {
        public ThemeBarColorOptions() { }
        public string BackgroundColor { get; set; }
        public Blazorise.ThemeBarBrandColorOptions BrandColorOptions { get; set; }
        public string Color { get; set; }
        public Blazorise.ThemeBarDropdownColorOptions DropdownColorOptions { get; set; }
        public float? GradientBlendPercentage { get; set; }
        public Blazorise.ThemeBarItemColorOptions ItemColorOptions { get; set; }
    }
    public class ThemeBarDropdownColorOptions : System.IEquatable<Blazorise.ThemeBarDropdownColorOptions>
    {
        public ThemeBarDropdownColorOptions() { }
        public string BackgroundColor { get; set; }
    }
    public class ThemeBarItemColorOptions : System.IEquatable<Blazorise.ThemeBarItemColorOptions>
    {
        public ThemeBarItemColorOptions() { }
        public string ActiveBackgroundColor { get; set; }
        public string ActiveColor { get; set; }
        public string HoverBackgroundColor { get; set; }
        public string HoverColor { get; set; }
    }
    public class ThemeBarOptions : System.IEquatable<Blazorise.ThemeBarOptions>
    {
        public ThemeBarOptions() { }
        public Blazorise.ThemeBarColorOptions DarkColors { get; set; }
        public string HorizontalHeight { get; set; }
        public Blazorise.ThemeBarColorOptions LightColors { get; set; }
        public string VerticalBrandHeight { get; set; }
        public string VerticalPopoutMenuWidth { get; set; }
        public string VerticalSmallWidth { get; set; }
        public string VerticalWidth { get; set; }
    }
    public class ThemeBasicOptions : System.IEquatable<Blazorise.ThemeBasicOptions>
    {
        public ThemeBasicOptions() { }
        public string BorderRadius { get; set; }
        public virtual bool HasOptions() { }
    }
    public class ThemeBodyOptions : System.IEquatable<Blazorise.ThemeBodyOptions>
    {
        public ThemeBodyOptions() { }
        public string BackgroundColor { get; set; }
        public Blazorise.ThemeFontOptions FontOptions { get; set; }
        public string TextColor { get; set; }
    }
    public class ThemeBreadcrumbOptions : Blazorise.ThemeBasicOptions, System.IEquatable<Blazorise.ThemeBreadcrumbOptions>
    {
        public ThemeBreadcrumbOptions() { }
        public string Color { get; set; }
    }
    public class ThemeBreakpointOptions : System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Func<string>>>, System.Collections.IEnumerable, System.IEquatable<Blazorise.ThemeBreakpointOptions>
    {
        public ThemeBreakpointOptions() { }
        public string Desktop { get; set; }
        public string FullHD { get; set; }
        public System.Func<string> this[string key] { get; }
        public string Mobile { get; set; }
        public string Tablet { get; set; }
        public string Widescreen { get; set; }
        public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, System.Func<string>>> GetEnumerator() { }
    }
    public class ThemeButtonOptions : Blazorise.ThemeBasicOptions, System.IEquatable<Blazorise.ThemeButtonOptions>
    {
        public ThemeButtonOptions() { }
        public float? ActiveDarkenColor { get; set; }
        public float? ActiveLightenColor { get; set; }
        public string BoxShadowSize { get; set; }
        public byte? BoxShadowTransparency { get; set; }
        public float? DisabledOpacity { get; set; }
        public float? GradientBlendPercentage { get; set; }
        public float? HoverDarkenColor { get; set; }
        public float? HoverLightenColor { get; set; }
        public string LargeBorderRadius { get; set; }
        public string Margin { get; set; }
        public string Padding { get; set; }
        public Blazorise.Size? Size { get; set; }
        public string SmallBorderRadius { get; set; }
    }
    public class ThemeCardOptions : Blazorise.ThemeBasicOptions, System.IEquatable<Blazorise.ThemeCardOptions>
    {
        public ThemeCardOptions() { }
        public string ImageTopRadius { get; set; }
    }
    public class ThemeColor : System.IEquatable<Blazorise.ThemeColor>
    {
        public ThemeColor(string key, string name) { }
        public string Key { get; }
        public string Name { get; }
        public System.Collections.Generic.Dictionary<string, Blazorise.ThemeColorShade> Shades { get; set; }
    }
    public class ThemeColorAmber : Blazorise.ThemeColor, System.IEquatable<Blazorise.ThemeColorAmber>
    {
        public ThemeColorAmber() { }
        public Blazorise.ThemeColorShade A100 { get; }
        public Blazorise.ThemeColorShade A200 { get; }
        public Blazorise.ThemeColorShade A400 { get; }
        public Blazorise.ThemeColorShade A700 { get; }
        public Blazorise.ThemeColorShade _100 { get; }
        public Blazorise.ThemeColorShade _200 { get; }
        public Blazorise.ThemeColorShade _300 { get; }
        public Blazorise.ThemeColorShade _400 { get; }
        public Blazorise.ThemeColorShade _50 { get; }
        public Blazorise.ThemeColorShade _500 { get; }
        public Blazorise.ThemeColorShade _600 { get; }
        public Blazorise.ThemeColorShade _700 { get; }
        public Blazorise.ThemeColorShade _800 { get; }
        public Blazorise.ThemeColorShade _900 { get; }
    }
    public class ThemeColorBlue : Blazorise.ThemeColor, System.IEquatable<Blazorise.ThemeColorBlue>
    {
        public ThemeColorBlue() { }
        public Blazorise.ThemeColorShade A100 { get; }
        public Blazorise.ThemeColorShade A200 { get; }
        public Blazorise.ThemeColorShade A400 { get; }
        public Blazorise.ThemeColorShade A700 { get; }
        public Blazorise.ThemeColorShade _100 { get; }
        public Blazorise.ThemeColorShade _200 { get; }
        public Blazorise.ThemeColorShade _300 { get; }
        public Blazorise.ThemeColorShade _400 { get; }
        public Blazorise.ThemeColorShade _50 { get; }
        public Blazorise.ThemeColorShade _500 { get; }
        public Blazorise.ThemeColorShade _600 { get; }
        public Blazorise.ThemeColorShade _700 { get; }
        public Blazorise.ThemeColorShade _800 { get; }
        public Blazorise.ThemeColorShade _900 { get; }
    }
    public class ThemeColorBlueGray : Blazorise.ThemeColor, System.IEquatable<Blazorise.ThemeColorBlueGray>
    {
        public ThemeColorBlueGray() { }
        public Blazorise.ThemeColorShade _100 { get; }
        public Blazorise.ThemeColorShade _200 { get; }
        public Blazorise.ThemeColorShade _300 { get; }
        public Blazorise.ThemeColorShade _400 { get; }
        public Blazorise.ThemeColorShade _50 { get; }
        public Blazorise.ThemeColorShade _500 { get; }
        public Blazorise.ThemeColorShade _600 { get; }
        public Blazorise.ThemeColorShade _700 { get; }
        public Blazorise.ThemeColorShade _800 { get; }
        public Blazorise.ThemeColorShade _900 { get; }
    }
    public class ThemeColorBrown : Blazorise.ThemeColor, System.IEquatable<Blazorise.ThemeColorBrown>
    {
        public ThemeColorBrown() { }
        public Blazorise.ThemeColorShade _100 { get; }
        public Blazorise.ThemeColorShade _200 { get; }
        public Blazorise.ThemeColorShade _300 { get; }
        public Blazorise.ThemeColorShade _400 { get; }
        public Blazorise.ThemeColorShade _50 { get; }
        public Blazorise.ThemeColorShade _500 { get; }
        public Blazorise.ThemeColorShade _600 { get; }
        public Blazorise.ThemeColorShade _700 { get; }
        public Blazorise.ThemeColorShade _800 { get; }
        public Blazorise.ThemeColorShade _900 { get; }
    }
    public class ThemeColorCyan : Blazorise.ThemeColor, System.IEquatable<Blazorise.ThemeColorCyan>
    {
        public ThemeColorCyan() { }
        public Blazorise.ThemeColorShade A100 { get; }
        public Blazorise.ThemeColorShade A200 { get; }
        public Blazorise.ThemeColorShade A400 { get; }
        public Blazorise.ThemeColorShade A700 { get; }
        public Blazorise.ThemeColorShade _100 { get; }
        public Blazorise.ThemeColorShade _200 { get; }
        public Blazorise.ThemeColorShade _300 { get; }
        public Blazorise.ThemeColorShade _400 { get; }
        public Blazorise.ThemeColorShade _50 { get; }
        public Blazorise.ThemeColorShade _500 { get; }
        public Blazorise.ThemeColorShade _600 { get; }
        public Blazorise.ThemeColorShade _700 { get; }
        public Blazorise.ThemeColorShade _800 { get; }
        public Blazorise.ThemeColorShade _900 { get; }
    }
    public class ThemeColorDeepOrange : Blazorise.ThemeColor, System.IEquatable<Blazorise.ThemeColorDeepOrange>
    {
        public ThemeColorDeepOrange() { }
        public Blazorise.ThemeColorShade A100 { get; }
        public Blazorise.ThemeColorShade A200 { get; }
        public Blazorise.ThemeColorShade A400 { get; }
        public Blazorise.ThemeColorShade A700 { get; }
        public Blazorise.ThemeColorShade _100 { get; }
        public Blazorise.ThemeColorShade _200 { get; }
        public Blazorise.ThemeColorShade _300 { get; }
        public Blazorise.ThemeColorShade _400 { get; }
        public Blazorise.ThemeColorShade _50 { get; }
        public Blazorise.ThemeColorShade _500 { get; }
        public Blazorise.ThemeColorShade _600 { get; }
        public Blazorise.ThemeColorShade _700 { get; }
        public Blazorise.ThemeColorShade _800 { get; }
        public Blazorise.ThemeColorShade _900 { get; }
    }
    public class ThemeColorDeepPurple : Blazorise.ThemeColor, System.IEquatable<Blazorise.ThemeColorDeepPurple>
    {
        public ThemeColorDeepPurple() { }
        public Blazorise.ThemeColorShade A100 { get; }
        public Blazorise.ThemeColorShade A200 { get; }
        public Blazorise.ThemeColorShade A400 { get; }
        public Blazorise.ThemeColorShade A700 { get; }
        public Blazorise.ThemeColorShade _100 { get; }
        public Blazorise.ThemeColorShade _200 { get; }
        public Blazorise.ThemeColorShade _300 { get; }
        public Blazorise.ThemeColorShade _400 { get; }
        public Blazorise.ThemeColorShade _50 { get; }
        public Blazorise.ThemeColorShade _500 { get; }
        public Blazorise.ThemeColorShade _600 { get; }
        public Blazorise.ThemeColorShade _700 { get; }
        public Blazorise.ThemeColorShade _800 { get; }
        public Blazorise.ThemeColorShade _900 { get; }
    }
    public class ThemeColorGray : Blazorise.ThemeColor, System.IEquatable<Blazorise.ThemeColorGray>
    {
        public ThemeColorGray() { }
        public Blazorise.ThemeColorShade _100 { get; }
        public Blazorise.ThemeColorShade _200 { get; }
        public Blazorise.ThemeColorShade _300 { get; }
        public Blazorise.ThemeColorShade _400 { get; }
        public Blazorise.ThemeColorShade _50 { get; }
        public Blazorise.ThemeColorShade _500 { get; }
        public Blazorise.ThemeColorShade _600 { get; }
        public Blazorise.ThemeColorShade _700 { get; }
        public Blazorise.ThemeColorShade _800 { get; }
        public Blazorise.ThemeColorShade _900 { get; }
    }
    public class ThemeColorGreen : Blazorise.ThemeColor, System.IEquatable<Blazorise.ThemeColorGreen>
    {
        public ThemeColorGreen() { }
        public Blazorise.ThemeColorShade A100 { get; }
        public Blazorise.ThemeColorShade A200 { get; }
        public Blazorise.ThemeColorShade A400 { get; }
        public Blazorise.ThemeColorShade A700 { get; }
        public Blazorise.ThemeColorShade _100 { get; }
        public Blazorise.ThemeColorShade _200 { get; }
        public Blazorise.ThemeColorShade _300 { get; }
        public Blazorise.ThemeColorShade _400 { get; }
        public Blazorise.ThemeColorShade _50 { get; }
        public Blazorise.ThemeColorShade _500 { get; }
        public Blazorise.ThemeColorShade _600 { get; }
        public Blazorise.ThemeColorShade _700 { get; }
        public Blazorise.ThemeColorShade _800 { get; }
        public Blazorise.ThemeColorShade _900 { get; }
    }
    public class ThemeColorIndigo : Blazorise.ThemeColor, System.IEquatable<Blazorise.ThemeColorIndigo>
    {
        public ThemeColorIndigo() { }
        public Blazorise.ThemeColorShade A100 { get; }
        public Blazorise.ThemeColorShade A200 { get; }
        public Blazorise.ThemeColorShade A400 { get; }
        public Blazorise.ThemeColorShade A700 { get; }
        public Blazorise.ThemeColorShade _100 { get; }
        public Blazorise.ThemeColorShade _200 { get; }
        public Blazorise.ThemeColorShade _300 { get; }
        public Blazorise.ThemeColorShade _400 { get; }
        public Blazorise.ThemeColorShade _50 { get; }
        public Blazorise.ThemeColorShade _500 { get; }
        public Blazorise.ThemeColorShade _600 { get; }
        public Blazorise.ThemeColorShade _700 { get; }
        public Blazorise.ThemeColorShade _800 { get; }
        public Blazorise.ThemeColorShade _900 { get; }
    }
    public class ThemeColorLightBlue : Blazorise.ThemeColor, System.IEquatable<Blazorise.ThemeColorLightBlue>
    {
        public ThemeColorLightBlue() { }
        public Blazorise.ThemeColorShade A100 { get; }
        public Blazorise.ThemeColorShade A200 { get; }
        public Blazorise.ThemeColorShade A400 { get; }
        public Blazorise.ThemeColorShade A700 { get; }
        public Blazorise.ThemeColorShade _100 { get; }
        public Blazorise.ThemeColorShade _200 { get; }
        public Blazorise.ThemeColorShade _300 { get; }
        public Blazorise.ThemeColorShade _400 { get; }
        public Blazorise.ThemeColorShade _50 { get; }
        public Blazorise.ThemeColorShade _500 { get; }
        public Blazorise.ThemeColorShade _600 { get; }
        public Blazorise.ThemeColorShade _700 { get; }
        public Blazorise.ThemeColorShade _800 { get; }
        public Blazorise.ThemeColorShade _900 { get; }
    }
    public class ThemeColorLightGreen : Blazorise.ThemeColor, System.IEquatable<Blazorise.ThemeColorLightGreen>
    {
        public ThemeColorLightGreen() { }
        public Blazorise.ThemeColorShade A100 { get; }
        public Blazorise.ThemeColorShade A200 { get; }
        public Blazorise.ThemeColorShade A400 { get; }
        public Blazorise.ThemeColorShade A700 { get; }
        public Blazorise.ThemeColorShade _100 { get; }
        public Blazorise.ThemeColorShade _200 { get; }
        public Blazorise.ThemeColorShade _300 { get; }
        public Blazorise.ThemeColorShade _400 { get; }
        public Blazorise.ThemeColorShade _50 { get; }
        public Blazorise.ThemeColorShade _500 { get; }
        public Blazorise.ThemeColorShade _600 { get; }
        public Blazorise.ThemeColorShade _700 { get; }
        public Blazorise.ThemeColorShade _800 { get; }
        public Blazorise.ThemeColorShade _900 { get; }
    }
    public class ThemeColorLime : Blazorise.ThemeColor, System.IEquatable<Blazorise.ThemeColorLime>
    {
        public ThemeColorLime() { }
        public Blazorise.ThemeColorShade A100 { get; }
        public Blazorise.ThemeColorShade A200 { get; }
        public Blazorise.ThemeColorShade A400 { get; }
        public Blazorise.ThemeColorShade A700 { get; }
        public Blazorise.ThemeColorShade _100 { get; }
        public Blazorise.ThemeColorShade _200 { get; }
        public Blazorise.ThemeColorShade _300 { get; }
        public Blazorise.ThemeColorShade _400 { get; }
        public Blazorise.ThemeColorShade _50 { get; }
        public Blazorise.ThemeColorShade _500 { get; }
        public Blazorise.ThemeColorShade _600 { get; }
        public Blazorise.ThemeColorShade _700 { get; }
        public Blazorise.ThemeColorShade _800 { get; }
        public Blazorise.ThemeColorShade _900 { get; }
    }
    public class ThemeColorOptions : System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Func<string>>>, System.Collections.IEnumerable, System.IEquatable<Blazorise.ThemeColorOptions>
    {
        public ThemeColorOptions() { }
        public string Danger { get; set; }
        public string Dark { get; set; }
        public string Info { get; set; }
        public System.Func<string> this[string key] { get; }
        public string Light { get; set; }
        public string Link { get; set; }
        public string Primary { get; set; }
        public string Secondary { get; set; }
        public string Success { get; set; }
        public string Warning { get; set; }
        public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, System.Func<string>>> GetEnumerator() { }
    }
    public class ThemeColorOrange : Blazorise.ThemeColor, System.IEquatable<Blazorise.ThemeColorOrange>
    {
        public ThemeColorOrange() { }
        public Blazorise.ThemeColorShade A100 { get; }
        public Blazorise.ThemeColorShade A200 { get; }
        public Blazorise.ThemeColorShade A400 { get; }
        public Blazorise.ThemeColorShade A700 { get; }
        public Blazorise.ThemeColorShade _100 { get; }
        public Blazorise.ThemeColorShade _200 { get; }
        public Blazorise.ThemeColorShade _300 { get; }
        public Blazorise.ThemeColorShade _400 { get; }
        public Blazorise.ThemeColorShade _50 { get; }
        public Blazorise.ThemeColorShade _500 { get; }
        public Blazorise.ThemeColorShade _600 { get; }
        public Blazorise.ThemeColorShade _700 { get; }
        public Blazorise.ThemeColorShade _800 { get; }
        public Blazorise.ThemeColorShade _900 { get; }
    }
    public class ThemeColorPink : Blazorise.ThemeColor, System.IEquatable<Blazorise.ThemeColorPink>
    {
        public ThemeColorPink() { }
        public Blazorise.ThemeColorShade A100 { get; }
        public Blazorise.ThemeColorShade A200 { get; }
        public Blazorise.ThemeColorShade A400 { get; }
        public Blazorise.ThemeColorShade A700 { get; }
        public Blazorise.ThemeColorShade _100 { get; }
        public Blazorise.ThemeColorShade _200 { get; }
        public Blazorise.ThemeColorShade _300 { get; }
        public Blazorise.ThemeColorShade _400 { get; }
        public Blazorise.ThemeColorShade _50 { get; }
        public Blazorise.ThemeColorShade _500 { get; }
        public Blazorise.ThemeColorShade _600 { get; }
        public Blazorise.ThemeColorShade _700 { get; }
        public Blazorise.ThemeColorShade _800 { get; }
        public Blazorise.ThemeColorShade _900 { get; }
    }
    public class ThemeColorPurple : Blazorise.ThemeColor, System.IEquatable<Blazorise.ThemeColorPurple>
    {
        public ThemeColorPurple() { }
        public Blazorise.ThemeColorShade A100 { get; }
        public Blazorise.ThemeColorShade A200 { get; }
        public Blazorise.ThemeColorShade A400 { get; }
        public Blazorise.ThemeColorShade A700 { get; }
        public Blazorise.ThemeColorShade _100 { get; }
        public Blazorise.ThemeColorShade _200 { get; }
        public Blazorise.ThemeColorShade _300 { get; }
        public Blazorise.ThemeColorShade _400 { get; }
        public Blazorise.ThemeColorShade _50 { get; }
        public Blazorise.ThemeColorShade _500 { get; }
        public Blazorise.ThemeColorShade _600 { get; }
        public Blazorise.ThemeColorShade _700 { get; }
        public Blazorise.ThemeColorShade _800 { get; }
        public Blazorise.ThemeColorShade _900 { get; }
    }
    public class ThemeColorRed : Blazorise.ThemeColor, System.IEquatable<Blazorise.ThemeColorRed>
    {
        public ThemeColorRed() { }
        public Blazorise.ThemeColorShade A100 { get; }
        public Blazorise.ThemeColorShade A200 { get; }
        public Blazorise.ThemeColorShade A400 { get; }
        public Blazorise.ThemeColorShade A700 { get; }
        public Blazorise.ThemeColorShade _100 { get; }
        public Blazorise.ThemeColorShade _200 { get; }
        public Blazorise.ThemeColorShade _300 { get; }
        public Blazorise.ThemeColorShade _400 { get; }
        public Blazorise.ThemeColorShade _50 { get; }
        public Blazorise.ThemeColorShade _500 { get; }
        public Blazorise.ThemeColorShade _600 { get; }
        public Blazorise.ThemeColorShade _700 { get; }
        public Blazorise.ThemeColorShade _800 { get; }
        public Blazorise.ThemeColorShade _900 { get; }
    }
    public class ThemeColorShade : System.IEquatable<Blazorise.ThemeColorShade>
    {
        public ThemeColorShade(string key, string name, string value) { }
        public string Key { get; }
        public string Name { get; }
        public string Value { get; }
    }
    public class ThemeColorTeal : Blazorise.ThemeColor, System.IEquatable<Blazorise.ThemeColorTeal>
    {
        public ThemeColorTeal() { }
        public Blazorise.ThemeColorShade A100 { get; }
        public Blazorise.ThemeColorShade A200 { get; }
        public Blazorise.ThemeColorShade A400 { get; }
        public Blazorise.ThemeColorShade A700 { get; }
        public Blazorise.ThemeColorShade _100 { get; }
        public Blazorise.ThemeColorShade _200 { get; }
        public Blazorise.ThemeColorShade _300 { get; }
        public Blazorise.ThemeColorShade _400 { get; }
        public Blazorise.ThemeColorShade _50 { get; }
        public Blazorise.ThemeColorShade _500 { get; }
        public Blazorise.ThemeColorShade _600 { get; }
        public Blazorise.ThemeColorShade _700 { get; }
        public Blazorise.ThemeColorShade _800 { get; }
        public Blazorise.ThemeColorShade _900 { get; }
    }
    public class ThemeColorYellow : Blazorise.ThemeColor, System.IEquatable<Blazorise.ThemeColorYellow>
    {
        public ThemeColorYellow() { }
        public Blazorise.ThemeColorShade A100 { get; }
        public Blazorise.ThemeColorShade A200 { get; }
        public Blazorise.ThemeColorShade A400 { get; }
        public Blazorise.ThemeColorShade A700 { get; }
        public Blazorise.ThemeColorShade _100 { get; }
        public Blazorise.ThemeColorShade _200 { get; }
        public Blazorise.ThemeColorShade _300 { get; }
        public Blazorise.ThemeColorShade _400 { get; }
        public Blazorise.ThemeColorShade _50 { get; }
        public Blazorise.ThemeColorShade _500 { get; }
        public Blazorise.ThemeColorShade _600 { get; }
        public Blazorise.ThemeColorShade _700 { get; }
        public Blazorise.ThemeColorShade _800 { get; }
        public Blazorise.ThemeColorShade _900 { get; }
    }
    public static class ThemeColors
    {
        public static Blazorise.ThemeColorAmber Amber { get; }
        public static Blazorise.ThemeColorBlue Blue { get; }
        public static Blazorise.ThemeColorBlueGray BlueGray { get; }
        public static Blazorise.ThemeColorBrown Brown { get; }
        public static Blazorise.ThemeColorCyan Cyan { get; }
        public static Blazorise.ThemeColorDeepOrange DeepOrange { get; }
        public static Blazorise.ThemeColorDeepPurple DeepPurple { get; }
        public static Blazorise.ThemeColorGray Gray { get; }
        public static Blazorise.ThemeColorGreen Green { get; }
        public static Blazorise.ThemeColorIndigo Indigo { get; }
        public static Blazorise.ThemeColorLightBlue LightBlue { get; }
        public static Blazorise.ThemeColorLightGreen LightGreen { get; }
        public static Blazorise.ThemeColorLime Lime { get; }
        public static Blazorise.ThemeColorOrange Orange { get; }
        public static Blazorise.ThemeColorPink Pink { get; }
        public static Blazorise.ThemeColorPurple Purple { get; }
        public static Blazorise.ThemeColorRed Red { get; }
        public static Blazorise.ThemeColorTeal Teal { get; }
        public static Blazorise.ThemeColorYellow Yellow { get; }
        public static System.Collections.Generic.Dictionary<string, Blazorise.ThemeColor> Items { get; set; }
    }
    public class ThemeContainerMaxWidthOptions : System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Func<string>>>, System.Collections.IEnumerable, System.IEquatable<Blazorise.ThemeContainerMaxWidthOptions>
    {
        public ThemeContainerMaxWidthOptions() { }
        public string Desktop { get; set; }
        public string FullHD { get; set; }
        public System.Func<string> this[string key] { get; }
        public string Mobile { get; set; }
        public string Tablet { get; set; }
        public string Widescreen { get; set; }
        public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, System.Func<string>>> GetEnumerator() { }
    }
    public enum ThemeContrast
    {
        None = 0,
        Light = 1,
        Dark = 2,
    }
    public class ThemeDividerOptions : System.IEquatable<Blazorise.ThemeDividerOptions>
    {
        public ThemeDividerOptions() { }
        public string Color { get; set; }
        public Blazorise.DividerType? DividerType { get; set; }
        public string TextSize { get; set; }
        public string Thickness { get; set; }
    }
    public class ThemeDropdownOptions : Blazorise.ThemeBasicOptions, System.IEquatable<Blazorise.ThemeDropdownOptions>
    {
        public ThemeDropdownOptions() { }
        public float? GradientBlendPercentage { get; set; }
        public Blazorise.Size? Size { get; set; }
        public bool? ToggleIconVisible { get; set; }
    }
    public class ThemeFontOptions : System.IEquatable<Blazorise.ThemeFontOptions>
    {
        public ThemeFontOptions() { }
        public string Family { get; set; }
        public string Size { get; set; }
        public string Style { get; set; }
        public string Weight { get; set; }
    }
    public abstract class ThemeGenerator : Blazorise.IThemeGenerator
    {
        protected readonly System.Collections.Generic.Dictionary<string, string> Variables;
        protected static System.Text.RegularExpressions.Regex IsHexDigit;
        public ThemeGenerator(Blazorise.IThemeCache themeCache) { }
        protected Blazorise.IThemeCache ThemeCache { get; }
        protected virtual void AddColorVariable(string name, string hexColor, bool addRgbParts = false) { }
        protected abstract void GenerateAlertStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, Blazorise.ThemeAlertOptions options);
        protected abstract void GenerateAlertVariantStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, string variant, string inBackgroundColor, string inBorderColor, string inColor, Blazorise.ThemeAlertOptions options);
        protected virtual void GenerateBackgroundStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, string variant, string color) { }
        protected virtual void GenerateBackgroundVariables(Blazorise.Theme theme, string variant, string inColor) { }
        protected abstract void GenerateBackgroundVariantStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, string variant);
        protected abstract void GenerateBadgeStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, Blazorise.ThemeBadgeOptions options);
        protected abstract void GenerateBadgeVariantStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, string variant, string inBackgroundColor);
        protected abstract void GenerateBarStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, Blazorise.ThemeBarOptions options);
        protected virtual void GenerateBarVariables(Blazorise.Theme theme, Blazorise.ThemeBarOptions barOptions) { }
        protected virtual void GenerateBodyStyles(System.Text.StringBuilder sb, Blazorise.Theme theme) { }
        protected virtual void GenerateBodyVariables(Blazorise.Theme theme) { }
        protected abstract void GenerateBorderVariantStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, string variant);
        protected abstract void GenerateBreadcrumbStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, Blazorise.ThemeBreadcrumbOptions options);
        protected virtual void GenerateBreadcrumbVariables(Blazorise.Theme theme, Blazorise.ThemeBreadcrumbOptions breadcrumbOptions) { }
        protected virtual void GenerateBreakpointStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, string breakpoint, string value) { }
        protected virtual void GenerateBreakpointVariables(Blazorise.Theme theme, string name, string size) { }
        protected virtual void GenerateButtonColorVariables(Blazorise.Theme theme, string variant, string inBackgroundColor, string inBorderColor, Blazorise.ThemeButtonOptions options) { }
        protected abstract void GenerateButtonOutlineVariantStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, string variant, Blazorise.ThemeButtonOptions options);
        protected abstract void GenerateButtonStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, Blazorise.ThemeButtonOptions options);
        protected abstract void GenerateButtonVariantStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, string variant, Blazorise.ThemeButtonOptions options);
        protected abstract void GenerateCardStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, Blazorise.ThemeCardOptions options);
        protected virtual void GenerateColorStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, string variant, string color) { }
        protected virtual void GenerateColorVariables(Blazorise.Theme theme, string variant, string value) { }
        protected virtual void GenerateDividerVariables(Blazorise.Theme theme, Blazorise.ThemeDividerOptions dividerOptions) { }
        protected abstract void GenerateDropdownStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, Blazorise.ThemeDropdownOptions options);
        protected abstract void GenerateInputStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, Blazorise.ThemeInputOptions options);
        protected abstract void GenerateInputVariantStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, string variant, string color);
        protected abstract void GenerateListGroupItemStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, Blazorise.ThemeListGroupItemOptions options);
        protected abstract void GenerateListGroupItemVariantStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, string variant, string inBackgroundColor, string inColor, Blazorise.ThemeListGroupItemOptions options);
        protected abstract void GenerateModalStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, Blazorise.ThemeModalOptions options);
        protected virtual void GenerateOutlineButtonColorVariables(Blazorise.Theme theme, string variant, string inBorderColor, Blazorise.ThemeButtonOptions options) { }
        protected abstract void GeneratePaginationStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, Blazorise.ThemePaginationOptions options);
        protected abstract void GenerateParagraphVariantStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, string variant, string color);
        protected virtual void GenerateProgressColorVariables(Blazorise.Theme theme, string variant, string inColor, Blazorise.ThemeProgressOptions options) { }
        protected virtual void GenerateProgressStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, Blazorise.ThemeProgressOptions options) { }
        protected virtual void GenerateProgressVariantStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, string variant, string inBackgroundColor, Blazorise.ThemeProgressOptions progressOptions) { }
        protected virtual void GenerateRatingColorVariables(Blazorise.Theme theme, string variant, string inColor, Blazorise.ThemeRatingOptions options) { }
        protected abstract void GenerateRatingStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, Blazorise.ThemeRatingOptions options);
        protected abstract void GenerateRatingVariantStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, string variant, string inBackgroundColor, Blazorise.ThemeRatingOptions ratingOptions);
        protected virtual void GenerateSidebarVariables(Blazorise.Theme theme, Blazorise.ThemeSidebarOptions sidebarOptions) { }
        protected virtual void GenerateSnackbarColorVariables(Blazorise.Theme theme, string variant, string inColor, Blazorise.ThemeSnackbarOptions options) { }
        protected virtual void GenerateSnackbarVariables(Blazorise.Theme theme, Blazorise.ThemeSnackbarOptions snackbarOptions) { }
        protected abstract void GenerateSpacingStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, Blazorise.ThemeSpacingOptions options);
        protected virtual void GenerateSpinKitVariables(Blazorise.Theme theme, Blazorise.ThemeSpinKitOptions spinKitOptions) { }
        protected virtual void GenerateStepsColorVariables(Blazorise.Theme theme, string variant, string inColor, Blazorise.ThemeStepsOptions options) { }
        protected abstract void GenerateStepsStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, Blazorise.ThemeStepsOptions options);
        protected virtual void GenerateStepsVariables(Blazorise.Theme theme, Blazorise.ThemeStepsOptions stepsOptions) { }
        protected abstract void GenerateStepsVariantStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, string variant, string inBackgroundColor, Blazorise.ThemeStepsOptions stepsOptions);
        public virtual string GenerateStyles(Blazorise.Theme theme) { }
        protected abstract void GenerateSwitchVariantStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, string variant, string inBackgroundColor, Blazorise.ThemeSwitchOptions switchOptions);
        protected abstract void GenerateTableVariantStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, string variant, string inBackgroundColor, string inBorderColor);
        protected abstract void GenerateTabsStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, Blazorise.ThemeTabsOptions options);
        protected virtual void GenerateTextColorVariables(Blazorise.Theme theme, string variant, string inColor) { }
        protected virtual void GenerateTooltipVariables(Blazorise.Theme theme, Blazorise.ThemeTooltipOptions tooltipOptions) { }
        protected virtual void GenerateTypographyVariantStyles(System.Text.StringBuilder sb, Blazorise.Theme theme, string variant, string color) { }
        public virtual string GenerateVariables(Blazorise.Theme theme) { }
        protected virtual string GetGradientBg(Blazorise.Theme theme, string color, float? percentage, bool important = false) { }
        protected virtual string GetGradientBgValue(Blazorise.Theme theme, string color, float? percentage, bool important = false) { }
        protected System.Drawing.Color ThemeColorLevel(Blazorise.Theme theme, System.Drawing.Color color, int level) { }
        protected System.Drawing.Color ThemeColorLevel(Blazorise.Theme theme, string inColor, int level) { }
        protected string ThemeColorLevelHex(Blazorise.Theme theme, string inColor, int level) { }
        protected string Var(string name, string defaultValue = null) { }
        protected static System.Drawing.Color Blend(System.Drawing.Color color, System.Drawing.Color color2, float percentage) { }
        protected static System.Drawing.Color ChangeColorBrightness(System.Drawing.Color color, float correctionFactor) { }
        protected static System.Drawing.Color Contrast(Blazorise.Theme theme, string hexColor) { }
        protected static System.Drawing.Color Contrast(Blazorise.Theme theme, System.Drawing.Color color, byte? luminanceThreshold = default) { }
        protected static System.Drawing.Color CssRgbaFunctionToColor(string cssColor) { }
        protected static System.Drawing.Color Darken(System.Drawing.Color color, float percentage) { }
        protected static System.Drawing.Color Darken(string hexColor, float percentage) { }
        protected static string ExtractHexDigits(string input) { }
        protected static string FirstNonEmptyString(params string[] values) { }
        protected static bool FirstNotEmpty(out string first, params string[] values) { }
        protected static string GetBorderRadius(Blazorise.Theme theme, string borderRadius, string fallbackRadius) { }
        protected static System.Drawing.Color HexStringToColor(string hexColor) { }
        protected static Blazorise.HslColor HexStringToHslColor(string hexColor) { }
        protected static System.Drawing.Color Invert(System.Drawing.Color color) { }
        protected static System.Drawing.Color Lighten(System.Drawing.Color color, float percentage) { }
        protected static System.Drawing.Color Lighten(string hexColor, float percentage) { }
        protected static double LuminanceFromColor(System.Drawing.Color color) { }
        protected static double LuminanceFromColor(string hexColor) { }
        protected static string MediaBreakpointUp(string size, string content) { }
        protected static System.Drawing.Color ParseColor(string value) { }
        protected static System.Drawing.Color Rgba2Rgb(System.Drawing.Color background, System.Drawing.Color color, float? customAlpha = default) { }
        protected static string ToHex(Blazorise.HslColor hslColor) { }
        protected static string ToHex(System.Drawing.Color color) { }
        protected static string ToHexRGBA(System.Drawing.Color color) { }
        protected static System.Drawing.Color Transparency(System.Drawing.Color color, int alpha) { }
        protected static System.Drawing.Color Transparency(string hexColor, int alpha) { }
    }
    public class ThemeInputOptions : Blazorise.ThemeBasicOptions, System.IEquatable<Blazorise.ThemeInputOptions>
    {
        public ThemeInputOptions() { }
        public string CheckColor { get; set; }
        public string Color { get; set; }
        public Blazorise.Size? Size { get; set; }
        public string SliderColor { get; set; }
        public override bool HasOptions() { }
    }
    public class ThemeJumbotronOptions : Blazorise.ThemeBasicOptions, System.IEquatable<Blazorise.ThemeJumbotronOptions>
    {
        public ThemeJumbotronOptions() { }
    }
    public class ThemeListGroupItemOptions : System.IEquatable<Blazorise.ThemeListGroupItemOptions>
    {
        public ThemeListGroupItemOptions() { }
        public int? BackgroundLevel { get; set; }
        public int? ColorLevel { get; set; }
        public float? GradientBlendPercentage { get; set; }
    }
    public class ThemeModalOptions : Blazorise.ThemeBasicOptions, System.IEquatable<Blazorise.ThemeModalOptions>
    {
        public ThemeModalOptions() { }
    }
    public class ThemePaginationOptions : Blazorise.ThemeBasicOptions, System.IEquatable<Blazorise.ThemePaginationOptions>
    {
        public ThemePaginationOptions() { }
        public string LargeBorderRadius { get; set; }
        public Blazorise.Size? Size { get; set; }
    }
    public class ThemeParagraphOptions : System.IEquatable<Blazorise.ThemeParagraphOptions>
    {
        public ThemeParagraphOptions() { }
    }
    public class ThemeProgressOptions : Blazorise.ThemeBasicOptions, System.IEquatable<Blazorise.ThemeProgressOptions>
    {
        public ThemeProgressOptions() { }
        public string PageProgressDefaultColor { get; set; }
        public Blazorise.Size? Size { get; set; }
    }
    public class ThemeProvider : Microsoft.AspNetCore.Components.ComponentBase, System.IDisposable
    {
        public ThemeProvider() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.Theme Theme { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.IThemeGenerator ThemeGenerator { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool WriteVariables { get; set; }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        public void Dispose() { }
        public string GetStylesTag() { }
        public string GetVariablesTag() { }
    }
    public class ThemeRatingOptions : Blazorise.ThemeBasicOptions, System.IEquatable<Blazorise.ThemeRatingOptions>
    {
        public ThemeRatingOptions() { }
        public float? HoverOpacity { get; set; }
    }
    public class ThemeSidebarOptions : System.IEquatable<Blazorise.ThemeSidebarOptions>
    {
        public ThemeSidebarOptions() { }
        public string BackgroundColor { get; set; }
        public string Color { get; set; }
        public string Width { get; set; }
    }
    public class ThemeSnackbarOptions : System.IEquatable<Blazorise.ThemeSnackbarOptions>
    {
        public ThemeSnackbarOptions() { }
        public string BackgroundColor { get; set; }
        public string ButtonColor { get; set; }
        public string ButtonHoverColor { get; set; }
        public string TextColor { get; set; }
        public int? VariantBackgroundColorLevel { get; set; }
    }
    public class ThemeSpacingOptions : System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Func<string>>>, System.Collections.IEnumerable, System.IEquatable<Blazorise.ThemeSpacingOptions>
    {
        public ThemeSpacingOptions() { }
        public string Is0 { get; set; }
        public string Is1 { get; set; }
        public string Is2 { get; set; }
        public string Is3 { get; set; }
        public string Is4 { get; set; }
        public string Is5 { get; set; }
        public System.Func<string> this[string key] { get; }
        public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, System.Func<string>>> GetEnumerator() { }
    }
    public class ThemeSpinKitOptions : System.IEquatable<Blazorise.ThemeSpinKitOptions>
    {
        public ThemeSpinKitOptions() { }
        public string Color { get; set; }
        public string Size { get; set; }
    }
    public class ThemeStepsOptions : System.IEquatable<Blazorise.ThemeStepsOptions>
    {
        public ThemeStepsOptions() { }
        public string StepsItemIconActive { get; set; }
        public string StepsItemIconActiveYiq { get; set; }
        public string StepsItemIconColor { get; set; }
        public string StepsItemIconCompleted { get; set; }
        public string StepsItemIconCompletedYiq { get; set; }
        public string StepsItemTextActive { get; set; }
        public string StepsItemTextColor { get; set; }
        public string StepsItemTextCompleted { get; set; }
    }
    public class ThemeSwatch
    {
        public ThemeSwatch() { }
        public string HexColor { get; set; }
        public double Hue { get; set; }
        public double HueScale { get; set; }
        public double Key { get; set; }
        public double Lightness { get; set; }
        public double Saturation { get; set; }
        public double SaturationScale { get; set; }
    }
    public class ThemeSwatchOptions
    {
        public ThemeSwatchOptions() { }
        public string HexColor { get; set; }
        public double? Hue { get; set; }
        public double? LightnessMax { get; set; }
        public double? LightnessMin { get; set; }
        public double? Saturation { get; set; }
        public bool? UseLightness { get; set; }
    }
    public class ThemeSwitchOptions : Blazorise.ThemeBasicOptions, System.IEquatable<Blazorise.ThemeSwitchOptions>
    {
        public ThemeSwitchOptions() { }
        public float? BoxShadowLightenColor { get; set; }
        public float? DisabledLightenColor { get; set; }
    }
    public class ThemeTableOptions : Blazorise.ThemeBasicOptions, System.IEquatable<Blazorise.ThemeTableOptions>
    {
        public ThemeTableOptions() { }
        public int? BackgroundLevel { get; set; }
        public int? BorderLevel { get; set; }
    }
    public class ThemeTabsOptions : Blazorise.ThemeBasicOptions, System.IEquatable<Blazorise.ThemeTabsOptions>
    {
        public ThemeTabsOptions() { }
    }
    public class ThemeTextColorOptions : System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Func<string>>>, System.Collections.IEnumerable, System.IEquatable<Blazorise.ThemeTextColorOptions>
    {
        public ThemeTextColorOptions() { }
        public string Black50 { get; set; }
        public string Body { get; set; }
        public string Danger { get; set; }
        public string Dark { get; set; }
        public string Info { get; set; }
        public System.Func<string> this[string key] { get; }
        public string Light { get; set; }
        public string Muted { get; set; }
        public string Primary { get; set; }
        public string Secondary { get; set; }
        public string Success { get; set; }
        public string Warning { get; set; }
        public string White { get; set; }
        public string White50 { get; set; }
        public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, System.Func<string>>> GetEnumerator() { }
    }
    public class ThemeTooltipOptions : Blazorise.ThemeBasicOptions, System.IEquatable<Blazorise.ThemeTooltipOptions>
    {
        public ThemeTooltipOptions() { }
        public string BackgroundColor { get; set; }
        public string Color { get; set; }
        public string FadeTime { get; set; }
        public string FontSize { get; set; }
        public string MaxWidth { get; set; }
        public string Padding { get; set; }
        public string ZIndex { get; set; }
    }
    public static class ThemeVariables
    {
        public const string BarBrandDarkBackground = "--b-bar-brand-dark-background";
        public const string BarBrandLightBackground = "--b-bar-brand-light-background";
        public const string BarDarkBackground = "--b-bar-dark-background";
        public const string BarDarkColor = "--b-bar-dark-color";
        public const string BarDropdownDarkBackground = "--b-bar-dropdown-dark-background";
        public const string BarDropdownLightBackground = "--b-bar-dropdown-light-background";
        public const string BarItemDarkActiveBackground = "--b-bar-item-dark-active-background";
        public const string BarItemDarkActiveColor = "--b-bar-item-dark-active-color";
        public const string BarItemDarkHoverBackground = "--b-bar-item-dark-hover-background";
        public const string BarItemDarkHoverColor = "--b-bar-item-dark-hover-color";
        public const string BarItemLightActiveBackground = "--b-bar-item-light-active-background";
        public const string BarItemLightActiveColor = "--b-bar-item-light-active-color";
        public const string BarItemLightHoverBackground = "--b-bar-item-light-hover-background";
        public const string BarItemLightHoverColor = "--b-bar-item-light-hover-color";
        public const string BarLightBackground = "--b-bar-light-background";
        public const string BarLightColor = "--b-bar-light-color";
        public const string Black = "--b-theme-black";
        public const string BodyBackgroundColor = "--b-theme-body-background-color";
        public const string BodyFontFamily = "--b-theme-body-font-family";
        public const string BodyFontSize = "--b-theme-body-font-size";
        public const string BodyFontStyle = "--b-theme-body-font-style";
        public const string BodyFontWeight = "--b-theme-body-font-weight";
        public const string BodyTextColor = "--b-theme-body-text-color";
        public const string BorderRadius = "--b-border-radius";
        public const string BorderRadiusLarge = "--b-border-radius-lg";
        public const string BorderRadiusSmall = "--b-border-radius-sm";
        public const string BreadcrumbColor = "--b-breadcrumb-color";
        public const string DividerColor = "--b-divider-color";
        public const string DividerTextSize = "--b-divider-font-size";
        public const string DividerThickness = "--b-divider-thickness";
        public const string HorizontalBarHeight = "--b-bar-horizontal-height";
        public const string LayoutFooterHeight = "--b-layout-footer-height";
        public const string LayoutHeaderHeight = "--b-layout-header-height";
        public const string SidebarBackground = "--b-sidebar-background";
        public const string SidebarColor = "--b-sidebar-color";
        public const string SidebarWidth = "--b-sidebar-width";
        public const string SnackbarBackground = "--b-snackbar-background";
        public const string SnackbarButtonColor = "--b-snackbar-button";
        public const string SnackbarButtonHoverColor = "--b-snackbar-button-hover";
        public const string SnackbarTextColor = "--b-snackbar-text";
        public const string TooltipBackgroundColorB = "--b-tooltip-background-color-b";
        public const string TooltipBackgroundColorG = "--b-tooltip-background-color-g";
        public const string TooltipBackgroundColorR = "--b-tooltip-background-color-r";
        public const string TooltipBackgroundOpacity = "--b-tooltip-background-opacity";
        public const string TooltipBorderRadius = "--b-tooltip-border-radius";
        public const string TooltipColor = "--b-tooltip-color";
        public const string TooltipFadeTime = "--b-tooltip-fade-time";
        public const string TooltipFontSize = "--b-tooltip-font-size";
        public const string TooltipMaxWidth = "--b-tooltip-maxwidth";
        public const string TooltipPadding = "--b-tooltip-padding";
        public const string TooltipZIndex = "--b-tooltip-z-index";
        public const string VerticalBarBrandHeight = "--b-vertical-bar-brand-height";
        public const string VerticalBarSmallWidth = "--b-vertical-bar-small-width";
        public const string VerticalBarWidth = "--b-vertical-bar-width";
        public const string VerticalPopoutMenuWidth = "--b-vertical-bar-popout-menu-width";
        public const string White = "--b-theme-white";
        public static string SpinKitColor { get; }
        public static string SpinKitSize { get; }
        public static string StepsItemIcon { get; }
        public static string StepsItemIconActive { get; }
        public static string StepsItemIconActiveYiq { get; }
        public static string StepsItemIconCompleted { get; }
        public static string StepsItemIconCompletedYiq { get; }
        public static string StepsItemText { get; }
        public static string StepsItemTextActive { get; }
        public static string StepsItemTextCompleted { get; }
        public static string BackgroundColor(string variant) { }
        public static string BackgroundYiqColor(string variant) { }
        public static string Breakpoint(string name) { }
        public static string ButtonActiveBackground(string variant) { }
        public static string ButtonActiveBorder(string variant) { }
        public static string ButtonBackground(string variant) { }
        public static string ButtonBorder(string variant) { }
        public static string ButtonBoxShadow(string variant) { }
        public static string ButtonHoverBackground(string variant) { }
        public static string ButtonHoverBorder(string variant) { }
        public static string ButtonYiqActiveBackground(string variant) { }
        public static string ButtonYiqBackground(string variant) { }
        public static string ButtonYiqHoverBackground(string variant) { }
        public static string Color(string variant) { }
        public static string OutlineButtonActiveColor(string variant) { }
        public static string OutlineButtonBoxShadowColor(string variant) { }
        public static string OutlineButtonColor(string variant) { }
        public static string OutlineButtonHoverColor(string variant) { }
        public static string OutlineButtonYiqColor(string variant) { }
        public static string TextColor(string variant) { }
        public static string VariantPageProgressIndicator(string variant) { }
        public static string VariantRatingColor(string variant) { }
        public static string VariantStepsItemIcon(string variant) { }
        public static string VariantStepsItemIconYiq(string variant) { }
        public static string VariantStepsItemText(string variant) { }
    }
    public class TimeEdit<TValue> : Blazorise.BaseTextInput<TValue>
    {
        public TimeEdit() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.TimeSpan? Max { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.TimeSpan? Min { get; set; }
        protected override bool ShouldAutoGenerateId { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int? Step { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public TValue Time { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<TValue> TimeChanged { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Linq.Expressions.Expression<System.Func<TValue>> TimeExpression { get; set; }
        protected override TValue InternalValue { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override string FormatValueAsString(TValue value) { }
        protected override string GetFormatedValueExpression() { }
        protected override System.Threading.Tasks.Task OnBlurHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs) { }
        protected override System.Threading.Tasks.Task OnChangeHandler(Microsoft.AspNetCore.Components.ChangeEventArgs e) { }
        protected override System.Threading.Tasks.Task OnInternalValueChanged(TValue value) { }
        protected override System.Threading.Tasks.Task OnKeyPressHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs) { }
        protected override System.Threading.Tasks.Task<Blazorise.ParseValue<TValue>> ParseValueFromStringAsync(string value) { }
        public override System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) { }
        public System.Threading.Tasks.Task ShowPicker() { }
    }
    public class TimePicker<TValue> : Blazorise.BaseTextInput<TValue>, System.IAsyncDisposable
    {
        public TimePicker() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public string DisplayFormat { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.Vendors.IFlatPickrDateTimeDisplayFormatConverter DisplayFormatConverter { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Inline { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        public Blazorise.Modules.IJSTimePickerModule JSModule { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.Localization.ITextLocalizer<Blazorise.TimePicker<TValue>> Localizer { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.Localization.ITextLocalizerService LocalizerService { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.TimeSpan? Max { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.TimeSpan? Min { get; set; }
        protected override bool ShouldAutoGenerateId { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool StaticPicker { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public TValue Time { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool TimeAs24hr { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<TValue> TimeChanged { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Linq.Expressions.Expression<System.Func<TValue>> TimeExpression { get; set; }
        protected override TValue InternalValue { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        public System.Threading.Tasks.ValueTask CloseAsync() { }
        protected override System.Threading.Tasks.ValueTask DisposeAsync(bool disposing) { }
        public override System.Threading.Tasks.Task Focus(bool scrollToElement = true) { }
        protected override string FormatValueAsString(TValue value) { }
        protected override string GetFormatedValueExpression() { }
        protected override System.Threading.Tasks.Task OnBlurHandler(Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs) { }
        protected override System.Threading.Tasks.Task OnChangeHandler(Microsoft.AspNetCore.Components.ChangeEventArgs e) { }
        protected System.Threading.Tasks.Task OnClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs e) { }
        protected override System.Threading.Tasks.Task OnFirstAfterRenderAsync() { }
        protected override void OnInitialized() { }
        protected override System.Threading.Tasks.Task OnInternalValueChanged(TValue value) { }
        protected override System.Threading.Tasks.Task OnKeyPressHandler(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs) { }
        public System.Threading.Tasks.ValueTask OpenAsync() { }
        protected override System.Threading.Tasks.Task<Blazorise.ParseValue<TValue>> ParseValueFromStringAsync(string value) { }
        public override System.Threading.Tasks.Task Select(bool focus = true) { }
        public override System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) { }
        public System.Threading.Tasks.ValueTask ToggleAsync() { }
    }
    public class Toast : Blazorise.BaseComponent, Blazorise.IAnimatedComponent, Blazorise.IHideableComponent, System.IDisposable
    {
        public Toast() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Animated { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int AnimationDuration { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Autohide { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public double AutohideDelay { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback Closed { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Func<Blazorise.ToastClosingEventArgs, System.Threading.Tasks.Task> Closing { get; set; }
        protected bool HasToastBody { get; }
        protected bool HasToastHeader { get; }
        protected bool IsVisible { get; }
        [Microsoft.AspNetCore.Components.Inject]
        public Blazorise.Modules.IJSClosableModule JSClosableModule { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback Opened { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Func<Blazorise.ToastOpeningEventArgs, System.Threading.Tasks.Task> Opening { get; set; }
        protected Blazorise.States.ToastState State { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Visible { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<bool> VisibleChanged { get; set; }
        public System.Threading.Tasks.Task BeginAnimation(bool visible) { }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void BuildStyles(Blazorise.Utilities.StyleBuilder builder) { }
        public System.Threading.Tasks.Task Close(Blazorise.CloseReason closeReason) { }
        protected override void Dispose(bool disposing) { }
        public System.Threading.Tasks.Task EndAnimation(bool visible) { }
        protected virtual System.Threading.Tasks.Task HandleVisibilityStyles(bool visible) { }
        public System.Threading.Tasks.Task Hide() { }
        protected System.Threading.Tasks.Task Hide(Blazorise.CloseReason closeReason) { }
        protected override void OnInitialized() { }
        protected virtual System.Threading.Tasks.Task RaiseEvents(bool visible) { }
        public override System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) { }
        protected virtual System.Threading.Tasks.Task SetVisibleState(bool visible) { }
        public System.Threading.Tasks.Task Show() { }
    }
    public class ToastBody : Blazorise.BaseComponent
    {
        public ToastBody() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class ToastClosingEventArgs : System.ComponentModel.CancelEventArgs
    {
        public ToastClosingEventArgs(bool cancel, Blazorise.CloseReason closeReason) { }
        public Blazorise.CloseReason CloseReason { get; }
    }
    public class ToastEventArgs : System.EventArgs
    {
        public ToastEventArgs(Blazorise.ToastIntent intent, Microsoft.AspNetCore.Components.MarkupString message, string title, Blazorise.ToastInstanceOptions options) { }
        public ToastEventArgs(Blazorise.ToastIntent intent, string message, string title, Blazorise.ToastInstanceOptions options) { }
        public Blazorise.ToastIntent Intent { get; }
        public Microsoft.AspNetCore.Components.MarkupString Message { get; }
        public Blazorise.ToastInstanceOptions Options { get; }
        public string Title { get; }
    }
    public class ToastHeader : Blazorise.BaseComponent
    {
        public ToastHeader() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class ToastInstance
    {
        public ToastInstance(Blazorise.ToastProvider toastProvider, string toastId, string title, Microsoft.AspNetCore.Components.MarkupString message, Blazorise.ToastIntent intent, Blazorise.ToastInstanceOptions toastInstanceOptions) { }
        public bool Animated { get; }
        public int AnimationDuration { get; }
        public bool Autohide { get; }
        public double AutohideDelay { get; }
        public Microsoft.AspNetCore.Components.EventCallback Closed { get; }
        public Blazorise.ToastIntent Intent { get; set; }
        public Microsoft.AspNetCore.Components.MarkupString Message { get; set; }
        public Microsoft.AspNetCore.Components.EventCallback Opened { get; }
        public string Title { get; set; }
        public string ToastId { get; set; }
        public Blazorise.ToastInstanceOptions ToastInstanceOptions { get; }
        public Blazorise.ToastProvider ToastProvider { get; }
        public Blazorise.Toast ToastRef { get; set; }
        public bool Visible { get; set; }
    }
    public class ToastInstanceOptions
    {
        public ToastInstanceOptions() { }
        public bool? Animated { get; set; }
        public int? AnimationDuration { get; set; }
        public bool? Autohide { get; set; }
        public double? AutohideDelay { get; set; }
        public Microsoft.AspNetCore.Components.EventCallback? Closed { get; set; }
        public Microsoft.AspNetCore.Components.EventCallback? Opened { get; set; }
        public static Blazorise.ToastInstanceOptions Default { get; }
    }
    public enum ToastIntent
    {
        Default = 0,
        Info = 1,
        Success = 2,
        Warning = 3,
        Error = 4,
    }
    public class ToastOpeningEventArgs : System.ComponentModel.CancelEventArgs
    {
        public ToastOpeningEventArgs(bool cancel) { }
    }
    public enum ToastPlacement
    {
        Top = 0,
        TopStart = 1,
        TopEnd = 2,
        Bottom = 3,
        BottomStart = 4,
        BottomEnd = 5,
    }
    public class ToastProvider : Blazorise.BaseComponent, System.IDisposable
    {
        public ToastProvider() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Animated { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int AnimationDuration { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Autohide { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public double AutohideDelay { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback Closed { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback Opened { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.ToasterPlacement Placement { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.ToasterPlacementStrategy PlacementStrategy { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ShowCloseButton { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ShowIntentIcon { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.IToastService ToastService { get; set; }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void Dispose(bool disposing) { }
        protected override void OnInitialized() { }
        protected System.Threading.Tasks.Task OnToastClosed(Blazorise.ToastInstance toastInstance) { }
        public System.Threading.Tasks.Task Show(string title, string message, Blazorise.ToastIntent intent = 0) { }
        public System.Threading.Tasks.Task Show(string title, Microsoft.AspNetCore.Components.MarkupString message, Blazorise.ToastIntent intent, Blazorise.ToastInstanceOptions options) { }
    }
    public class Toaster : Blazorise.BaseComponent
    {
        public Toaster() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.ToasterPlacement Placement { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.ToasterPlacementStrategy PlacementStrategy { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public enum ToasterPlacement
    {
        Top = 0,
        TopStart = 1,
        TopEnd = 2,
        Bottom = 3,
        BottomStart = 4,
        BottomEnd = 5,
    }
    public enum ToasterPlacementStrategy
    {
        Fixed = 0,
        Absolute = 1,
    }
    public class Tooltip : Blazorise.BaseComponent, System.IAsyncDisposable
    {
        public Tooltip() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool AlwaysActive { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string AppendTo { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Fade { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int FadeDuration { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Inline { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Interactive { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        public Blazorise.Modules.IJSTooltipModule JSModule { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Multiline { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.TooltipPlacement Placement { get; set; }
        protected override bool ShouldAutoGenerateId { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ShowArrow { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Text { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        public Blazorise.Theme Theme { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.TooltipTrigger Trigger { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string TriggerTargetId { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int? ZIndex { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override System.Threading.Tasks.ValueTask DisposeAsync(bool disposing) { }
        protected override void OnInitialized() { }
        public override System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView parameters) { }
    }
    public enum TooltipPlacement
    {
        Top = 0,
        TopStart = 1,
        TopEnd = 2,
        Bottom = 3,
        BottomStart = 4,
        BottomEnd = 5,
        Left = 6,
        LeftStart = 7,
        LeftEnd = 8,
        Right = 9,
        RightStart = 10,
        RightEnd = 11,
    }
    public enum TooltipTrigger
    {
        MouseEnterFocus = 0,
        Click = 1,
        Focus = 2,
        MouseEnterClick = 3,
    }
    public class UnorderedList : Blazorise.BaseTypographyComponent
    {
        public UnorderedList() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public string ListStyleImage { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Unstyled { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void BuildStyles(Blazorise.Utilities.StyleBuilder builder) { }
    }
    public class UnorderedListItem : Blazorise.BaseTypographyComponent
    {
        public UnorderedListItem() { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class Validation : Microsoft.AspNetCore.Components.ComponentBase, Blazorise.IValidation, System.IDisposable
    {
        public Validation() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Func<Blazorise.ValidatorEventArgs, System.Threading.CancellationToken, System.Threading.Tasks.Task> AsyncValidator { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        public Microsoft.AspNetCore.Components.Forms.EditContext EditContext { get; set; }
        public Microsoft.AspNetCore.Components.Forms.FieldIdentifier FieldIdentifier { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Type HandlerType { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Func<string, System.Collections.Generic.IEnumerable<string>, string> MessageLocalizer { get; set; }
        public System.Collections.Generic.IEnumerable<string> Messages { get; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        public Blazorise.Validations ParentValidations { get; set; }
        public System.Text.RegularExpressions.Regex Pattern { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.ValidationStatus Status { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Blazorise.ValidationStatus> StatusChanged { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool UsePattern { get; set; }
        [Microsoft.AspNetCore.Components.Inject]
        protected Blazorise.IValidationHandlerFactory ValidationHandlerFactory { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Action<Blazorise.ValidatorEventArgs> Validator { get; set; }
        public event Blazorise.ValidationStartedEventHandler ValidationStarted;
        public event System.EventHandler<Blazorise.ValidationStatusChangedEventArgs> ValidationStatusChanged;
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        public void Clear() { }
        protected virtual System.Type DetermineHandlerType() { }
        public void Dispose() { }
        public System.Threading.Tasks.Task InitializeInput(Blazorise.IValidationInput inputComponent) { }
        public System.Threading.Tasks.Task InitializeInputExpression<T>(System.Linq.Expressions.Expression<System.Func<T>> expression) { }
        public System.Threading.Tasks.Task InitializeInputPattern<T>(string patternString, T value) { }
        public System.Threading.Tasks.Task NotifyInputChanged<T>(T newExpressionValue, bool overrideNewValue = false) { }
        public void NotifyValidationStarted() { }
        public void NotifyValidationStatusChanged(Blazorise.ValidationStatus status, System.Collections.Generic.IEnumerable<string> messages = null) { }
        protected override System.Threading.Tasks.Task OnInitializedAsync() { }
        public Blazorise.ValidationStatus Validate() { }
        public Blazorise.ValidationStatus Validate(object newValidationValue) { }
        public System.Threading.Tasks.Task<Blazorise.ValidationStatus> ValidateAsync() { }
        public System.Threading.Tasks.Task<Blazorise.ValidationStatus> ValidateAsync(object newValidationValue) { }
    }
    public class ValidationError : Blazorise.BaseValidationResult
    {
        public ValidationError() { }
        protected string[] ErrorMessages { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Multiline { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Tooltip { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void OnInitialized() { }
        protected override void OnValidationStatusChanged(object sender, Blazorise.ValidationStatusChangedEventArgs eventArgs) { }
    }
    public class ValidationHandlerFactory : Blazorise.IValidationHandlerFactory
    {
        public ValidationHandlerFactory(System.IServiceProvider serviceProvider) { }
        public Blazorise.IValidationHandler Create(System.Type handlerType) { }
        protected virtual Blazorise.IValidationHandler CreateImpl(System.Type handlerType) { }
    }
    public static class ValidationHandlerType
    {
        public static System.Type DataAnnotation { get; }
        public static System.Type Pattern { get; }
        public static System.Type Validator { get; }
    }
    public enum ValidationMode
    {
        Auto = 0,
        Manual = 1,
    }
    public class ValidationNone : Blazorise.BaseValidationResult
    {
        public ValidationNone() { }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public static class ValidationRule
    {
        public static void AreDatesSelected<TValue>(Blazorise.ValidatorEventArgs e) { }
        public static void IsAlpha(Blazorise.ValidatorEventArgs e) { }
        public static bool IsAlpha(string value) { }
        public static void IsAlphanumeric(Blazorise.ValidatorEventArgs e) { }
        public static bool IsAlphanumeric(string value) { }
        public static void IsAlphanumericWithUnderscore(Blazorise.ValidatorEventArgs e) { }
        public static bool IsAlphanumericWithUnderscore(string value) { }
        public static void IsChecked(Blazorise.ValidatorEventArgs e) { }
        public static void IsDateSelected<TValue>(Blazorise.ValidatorEventArgs e) { }
        public static void IsEmail(Blazorise.ValidatorEventArgs e) { }
        public static bool IsEmail(string value) { }
        public static void IsEmpty(Blazorise.ValidatorEventArgs e) { }
        public static bool IsEmpty(string value) { }
        public static bool IsEqual(string value, string compare) { }
        public static void IsFileSelected(Blazorise.ValidatorEventArgs e) { }
        public static bool IsLength(string value, int min, int max) { }
        public static void IsLowercase(Blazorise.ValidatorEventArgs e) { }
        public static bool IsLowercase(string value) { }
        public static void IsNotEmpty(Blazorise.ValidatorEventArgs e) { }
        public static bool IsNotEmpty(string value) { }
        public static void IsSelected(Blazorise.ValidatorEventArgs e) { }
        public static void IsUppercase(Blazorise.ValidatorEventArgs e) { }
        public static bool IsUppercase(string value) { }
        public static void None(Blazorise.ValidatorEventArgs e) { }
    }
    public delegate void ValidationStartedEventHandler();
    public enum ValidationStatus
    {
        None = 0,
        Success = 1,
        Error = 2,
    }
    public class ValidationStatusChangedEventArgs : System.EventArgs
    {
        public static readonly Blazorise.ValidationStatusChangedEventArgs Empty;
        public ValidationStatusChangedEventArgs(Blazorise.ValidationStatus status, System.Collections.Generic.IEnumerable<string> messages = null) { }
        public System.Collections.Generic.IEnumerable<string> Messages { get; }
        public Blazorise.ValidationStatus Status { get; set; }
    }
    public class ValidationSuccess : Blazorise.BaseValidationResult
    {
        public ValidationSuccess() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Tooltip { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class ValidationSummary : Blazorise.BaseComponent, System.IDisposable
    {
        public ValidationSummary() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        protected Blazorise.Utilities.ClassBuilder ErrorClassBuilder { get; }
        protected string ErrorClassNames { get; }
        protected System.Collections.Generic.IEnumerable<string> ErrorMessages { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string[] Errors { get; set; }
        protected bool HasErrorMessages { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string Label { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Validations ParentValidations { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void Dispose(bool disposing) { }
        protected override void OnParametersSet() { }
    }
    public class Validations : Microsoft.AspNetCore.Components.ComponentBase
    {
        public Validations() { }
        public bool AllValidationsSuccessful { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.Forms.EditContext EditContext { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Type HandlerType { get; set; }
        public bool HasFailedValidations { get; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string MissingFieldsErrorMessage { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Blazorise.ValidationMode Mode { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public object Model { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback<Blazorise.ValidationsStatusChangedEventArgs> StatusChanged { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool ValidateOnLoad { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.EventCallback ValidatedAll { get; set; }
        public event Blazorise.ClearAllValidationsEventHandler ClearingAll;
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        public System.Threading.Tasks.Task ClearAll() { }
        public void NotifyValidationInitialized(Blazorise.IValidation validation) { }
        public void NotifyValidationRemoved(Blazorise.IValidation validation) { }
        public void NotifyValidationStatusChanged(Blazorise.IValidation validation) { }
        protected override void OnParametersSet() { }
        public System.Threading.Tasks.Task<bool> ValidateAll() { }
    }
    public class ValidationsStatusChangedEventArgs : System.EventArgs
    {
        public static readonly Blazorise.ValidationsStatusChangedEventArgs Empty;
        public ValidationsStatusChangedEventArgs(Blazorise.ValidationStatus status, System.Collections.Generic.IReadOnlyCollection<string> messages, Blazorise.IValidation validation) { }
        public System.Collections.Generic.IReadOnlyCollection<string> Messages { get; }
        public Blazorise.ValidationStatus Status { get; set; }
        public Blazorise.IValidation Validation { get; }
    }
    public delegate void ValidationsStatusChangedEventHandler(Blazorise.ValidationsStatusChangedEventArgs eventArgs);
    public class ValidatorEventArgs : System.EventArgs
    {
        public ValidatorEventArgs(object value) { }
        public string ErrorText { get; set; }
        public System.Collections.Generic.IEnumerable<string> MemberNames { get; set; }
        public Blazorise.ValidationStatus Status { get; set; }
        public object Value { get; }
    }
    public class ValidatorValidationHandler : Blazorise.IValidationHandler
    {
        public ValidatorValidationHandler() { }
        public void Validate(Blazorise.IValidation validation, object newValidationValue) { }
        public System.Threading.Tasks.Task ValidateAsync(Blazorise.IValidation validation, object newValidationValue, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public enum VerticalAlignment
    {
        Default = 0,
        Baseline = 1,
        Top = 2,
        Middle = 3,
        Bottom = 4,
        TextTop = 5,
        TextBottom = 6,
    }
    public enum Visibility
    {
        Default = 0,
        Visible = 1,
        Invisible = 2,
    }
    public static class Width
    {
        public static Blazorise.IFluentSizingMinMaxViewportOnBreakpoint Auto { get; }
        public static Blazorise.IFluentSizingMinMaxViewportOnBreakpoint Is100 { get; }
        public static Blazorise.IFluentSizingMinMaxViewportOnBreakpoint Is25 { get; }
        public static Blazorise.IFluentSizingMinMaxViewportOnBreakpoint Is33 { get; }
        public static Blazorise.IFluentSizingMinMaxViewportOnBreakpoint Is50 { get; }
        public static Blazorise.IFluentSizingMinMaxViewportOnBreakpoint Is66 { get; }
        public static Blazorise.IFluentSizingMinMaxViewportOnBreakpoint Is75 { get; }
        public static Blazorise.IFluentSizingWithSizeOnBreakpoint Max100 { get; }
        public static Blazorise.IFluentSizing Ch(double size) { }
        public static Blazorise.IFluentSizing Em(double size) { }
        public static Blazorise.IFluentSizing Px(double size) { }
        public static Blazorise.IFluentSizing Rem(double size) { }
    }
    public class _Draggable<TItem> : Blazorise.BaseComponent
    {
        public _Draggable() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public Microsoft.AspNetCore.Components.RenderFragment ChildContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Disabled { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string DisabledClass { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Func<TItem, System.Threading.Tasks.Task> DragEnded { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public System.Func<System.Threading.Tasks.Task> DragStarted { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string DraggingClass { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool HideContent { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int Index { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public TItem Item { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.DropContainer<TItem> ParentContainer { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public string ZoneName { get; set; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class _FilePickerConfirmModal : Microsoft.AspNetCore.Components.ComponentBase
    {
        protected Blazorise.Modal modalRef;
        public _FilePickerConfirmModal() { }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        public Blazorise.FilePicker ParentFilePicker { get; set; }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected System.Threading.Tasks.Task OnCloseModalClicked() { }
        public System.Threading.Tasks.Task OpenModal(Blazorise._FilePickerConfirmModal.ConfirmOperation confirmOperation, System.Func<System.Threading.Tasks.Task> confirmed) { }
        public enum ConfirmOperation
        {
            RemoveFile = 0,
            Clear = 1,
            CancelUpload = 2,
        }
    }
    public class _Imports : Microsoft.AspNetCore.Components.ComponentBase
    {
        public _Imports() { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
    }
    public class _ModalBackdrop : Blazorise.BaseComponent
    {
        public _ModalBackdrop() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Animated { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int AnimationDuration { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Modal ParentModal { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.States.ModalState ParentModalState { get; set; }
        protected override bool ShouldAutoGenerateId { get; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void BuildStyles(Blazorise.Utilities.StyleBuilder builder) { }
        protected override void OnInitialized() { }
    }
    public class _OffcanvasBackdrop : Blazorise.BaseComponent
    {
        public _OffcanvasBackdrop() { }
        [Microsoft.AspNetCore.Components.Parameter]
        public bool Animated { get; set; }
        [Microsoft.AspNetCore.Components.Parameter]
        public int AnimationDuration { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.Offcanvas ParentOffcanvas { get; set; }
        [Microsoft.AspNetCore.Components.CascadingParameter]
        protected Blazorise.States.OffcanvasState ParentOffcanvasState { get; set; }
        protected override bool ShouldAutoGenerateId { get; }
        protected override void BuildClasses(Blazorise.Utilities.ClassBuilder builder) { }
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder @__builder) { }
        protected override void BuildStyles(Blazorise.Utilities.StyleBuilder builder) { }
        protected override void OnInitialized() { }
    }
}
namespace Blazorise.Components.Progress
{
    public class PageProgressProvider : Blazorise.PageProgressAlert
    {
        public PageProgressProvider() { }
    }
}
namespace Blazorise.DeepCloner
{
    public static class DeepClonerExtensions
    {
        public static T DeepClone<T>(this T obj) { }
        public static TTo DeepCloneTo<TFrom, TTo>(this TFrom objFrom, TTo objTo)
            where TTo :  class, TFrom { }
        public static T ShallowClone<T>(this T obj) { }
        public static TTo ShallowCloneTo<TFrom, TTo>(this TFrom objFrom, TTo objTo)
            where TTo :  class, TFrom { }
    }
}
namespace Blazorise.DeepCloner.Helpers
{
    public abstract class ShallowObjectCloner
    {
        protected ShallowObjectCloner() { }
        protected abstract object DoCloneObject(object obj);
        public static object CloneObject(object obj) { }
    }
}
namespace Blazorise.Extensions
{
    public static class ArrayExtensions
    {
        public static bool AreEqual<T>(this System.Collections.Generic.IEnumerable<T> array1, System.Collections.Generic.IEnumerable<T> array2) { }
        public static bool AreEqualOrdered<T>(this System.Collections.Generic.IEnumerable<T> array1, System.Collections.Generic.IEnumerable<T> array2) { }
        public static int Index<T>(this System.Collections.Generic.IEnumerable<T> collection, System.Func<T, bool> predicate) { }
        public static bool IsNullOrEmpty<T>(this System.Collections.Generic.IEnumerable<T> collection) { }
    }
    public static class ColorExtensions
    {
        public static bool IsNotNullOrDefault(this Blazorise.Background background) { }
        public static bool IsNotNullOrDefault(this Blazorise.Color color) { }
        public static bool IsNullOrDefault(this Blazorise.Background background) { }
        public static bool IsNullOrDefault(this Blazorise.Color color) { }
    }
    public static class EnumExtensions
    {
        public static bool IsNullOrDefault(this Blazorise.Size? size) { }
        public static string ToButtonTagName(this Blazorise.ButtonType buttonType) { }
        public static string ToButtonTypeString(this Blazorise.ButtonType buttonType) { }
        public static string ToCurrencySymbolPlacement(this Blazorise.CurrencySymbolPlacement currencySymbolPlacement) { }
        public static string ToDateInputMode(this Blazorise.DateInputMode dateInputMode) { }
        public static string ToDateInputSelectionMode(this Blazorise.DateInputSelectionMode dateInputSelectionMode) { }
        public static string ToInputMaskCaretPosition(this Blazorise.InputMaskCaretPosition inputMaskCaretPosition) { }
        public static string ToMaskTypeString(this Blazorise.MaskType maskType) { }
        public static object ToNumericDecimalPadding(this Blazorise.NumericAllowDecimalPadding numericAllowDecimalPadding) { }
        public static object ToNumericMinMaxLimitsOverride(this Blazorise.NumericMinMaxLimitsOverride numericMinMaxLimitsOverride) { }
        public static string ToNumericRoundingMethod(this Blazorise.NumericRoundingMethod numericRoundingMethod) { }
        public static object ToNumericWheelOn(this Blazorise.NumericWheelOn numericWheelOn) { }
        public static string ToTargetString(this Blazorise.Target target) { }
        public static string ToTextInputMode(this Blazorise.TextInputMode textInputMode) { }
        public static string ToTextRoleString(this Blazorise.TextRole textRole) { }
    }
    public static class EventArgsExtensions
    {
        public static bool IsModifierKey(this Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs) { }
        public static bool IsTextKey(this Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs) { }
    }
    public static class ModuleExtensions
    {
        public static System.Threading.Tasks.Task SafeDestroy(this Blazorise.Modules.IJSDestroyableModule module, Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
    }
    public static class ObjectExtensions
    {
        public static bool IsEqual<T>(this T x, T y) { }
        public static System.Threading.Tasks.Task SafeDisposeAsync(this System.IAsyncDisposable disposable) { }
        public static string ToCultureInvariantString<T>(this T value) { }
    }
    public static class RenderTreeBuilderExtensions
    {
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder Aria(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, string name, object value, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0) { }
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder AriaDisabled(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, object value, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0) { }
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder AriaExpanded(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, object value, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0) { }
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder AriaHidden(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, object value, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0) { }
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder AriaLabel(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, object value, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0) { }
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder AriaPressed(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, object value, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0) { }
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder Attribute(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, string name, object value, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0) { }
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder Attributes(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, System.Collections.Generic.Dictionary<string, object> attributes, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0) { }
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder Class(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, string value, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0) { }
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder ComponentReferenceCapture(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, System.Action<object> action, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0) { }
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder Content(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, Microsoft.AspNetCore.Components.RenderFragment fragment, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0) { }
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder Data(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, string name, object value, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0) { }
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder Disabled(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, bool value, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0) { }
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder ElementReferenceCapture(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, System.Action<Microsoft.AspNetCore.Components.ElementReference> action, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0) { }
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder Fill(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, string value, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0) { }
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder Height(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, string value, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0) { }
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder Href(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, string value, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0) { }
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder Id(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, object value, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0) { }
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder OnClick<T>(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, object receiver, Microsoft.AspNetCore.Components.EventCallback<T> callback, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0) { }
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder OnClickPreventDefault(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, bool preventDefault, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0) { }
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder OpenComponent(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, System.Type componentType, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0) { }
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder OpenComponent<TComponent>(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0)
            where TComponent : Microsoft.AspNetCore.Components.IComponent { }
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder OpenElement(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, string name, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0) { }
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder Readonly(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, bool value, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0) { }
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder Role(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, string value, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0) { }
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder Style(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, string value, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0) { }
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder TabIndex(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, int? value, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0) { }
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder Target(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, Blazorise.Target target, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0) { }
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder Type(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, string value, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0) { }
        public static Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder Width(this Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, string value, [System.Runtime.CompilerServices.CallerLineNumber] int line = 0) { }
    }
    public static class StringExtensions
    {
        public static string EmptyToNull(this string value) { }
        public static string ToCamelcase(this string value) { }
    }
}
namespace Blazorise.Infrastructure
{
    public class EventCallbackSubscribable<T>
    {
        public EventCallbackSubscribable() { }
        public System.Threading.Tasks.Task InvokeCallbackAsync(T eventArgs) { }
        public void Subscribe(Blazorise.Infrastructure.EventCallbackSubscriber<T> owner, Microsoft.AspNetCore.Components.EventCallback<T> callback) { }
        public void Unsubscribe(Blazorise.Infrastructure.EventCallbackSubscriber<T> owner) { }
    }
    public class EventCallbackSubscriber<T> : System.IDisposable
    {
        public EventCallbackSubscriber(Microsoft.AspNetCore.Components.EventCallback<T> handler) { }
        public void Dispose() { }
        public void SubscribeOrMove(Blazorise.Infrastructure.EventCallbackSubscribable<T> subscribable) { }
    }
}
namespace Blazorise.Licensing
{
    public sealed class BlazoriseLicenseChecker
    {
        public BlazoriseLicenseChecker(Blazorise.Licensing.BlazoriseLicenseProvider blazoriseLicenseProvider) { }
        public int? GetAutocompleteRowsLimit() { }
        public int? GetChartsRowsLimit() { }
        public int? GetDataGridRowsLimit() { }
        public int? GetListViewRowsLimit() { }
        public int? GetTreeViewRowsLimit() { }
    }
    public static class BlazoriseLicenseLimitsHelper
    {
        public static int? GetAutocompleteRowsLimit(Blazorise.Licensing.BlazoriseLicenseChecker blazoriseLicenseChecker) { }
        public static int? GetChartsRowsLimit(Blazorise.Licensing.BlazoriseLicenseChecker blazoriseLicenseChecker) { }
        public static int? GetDataGridRowsLimit(Blazorise.Licensing.BlazoriseLicenseChecker blazoriseLicenseChecker) { }
        public static int? GetListViewRowsLimit(Blazorise.Licensing.BlazoriseLicenseChecker blazoriseLicenseChecker) { }
        public static int? GetTreeViewRowsLimit(Blazorise.Licensing.BlazoriseLicenseChecker blazoriseLicenseChecker) { }
    }
    public enum BlazoriseLicensePrintResult
    {
        None = 0,
        Community = 1,
        CommunityExpired = 2,
        Licensed = 3,
        LicensedExpired = 4,
        Trial = 5,
        InvalidProductToken = 6,
    }
    public sealed class BlazoriseLicenseProvider
    {
        public BlazoriseLicenseProvider(Blazorise.BlazoriseOptions options, Microsoft.JSInterop.IJSRuntime jsRuntime, Blazorise.IVersionProvider versionProvider) { }
    }
    public enum BlazoriseLicenseResult
    {
        Initializing = 0,
        Unlicensed = 1,
        Community = 2,
        Licensed = 3,
        Trial = 4,
    }
    public enum BlazoriseLicenseType
    {
        Regular = 0,
        Trial = 1,
        Community = 2,
    }
}
namespace Blazorise.Localization
{
    public interface ITextLocalizer
    {
        string this[string name] { get; }
        string this[string name, object[] arguments] { get; }
        void AddLanguageResource(Blazorise.Localization.TextLocalizationResource localizationResource);
        string GetString(string name, params object[] arguments);
        System.Collections.Generic.IReadOnlyDictionary<string, string> GetStrings(params object[] arguments);
    }
    public interface ITextLocalizerService
    {
        System.Collections.Generic.IEnumerable<System.Globalization.CultureInfo> AvailableCultures { get; }
        System.Globalization.CultureInfo SelectedCulture { get; }
        event System.EventHandler LocalizationChanged;
        void AddLanguageResource(string cultureName);
        void ChangeLanguage(string cultureName, bool changeThreadCulture = true);
    }
    public interface ITextLocalizer<out T> : Blazorise.Localization.ITextLocalizer { }
    public class TextLocalizationResource
    {
        public TextLocalizationResource() { }
        public string Culture { get; set; }
        public System.Collections.Generic.IReadOnlyDictionary<string, string> Translations { get; set; }
    }
    public delegate string TextLocalizerHandler(string name, params object[] arguments);
    public class TextLocalizerService : Blazorise.Localization.ITextLocalizerService
    {
        public TextLocalizerService() { }
        public System.Collections.Generic.IEnumerable<System.Globalization.CultureInfo> AvailableCultures { get; }
        public System.Globalization.CultureInfo SelectedCulture { get; }
        public event System.EventHandler LocalizationChanged;
        public void AddLanguageResource(string cultureName) { }
        public void ChangeLanguage(string cultureName, bool changeThreadCulture = true) { }
        protected virtual string[] GetLocalizationResourceNames(System.Reflection.Assembly assembly) { }
        public void ReadResource() { }
    }
    public class TextLocalizer<T> : Blazorise.Localization.ITextLocalizer, Blazorise.Localization.ITextLocalizer<T>
    {
        public TextLocalizer(Blazorise.Localization.ITextLocalizerService localizerService) { }
        public string this[string name] { get; }
        public string this[string name, object[] arguments] { get; }
        public void AddLanguageResource(Blazorise.Localization.TextLocalizationResource localizationResource) { }
        protected virtual Blazorise.Localization.TextLocalizationResource DeserializeResourceAsJson(System.Reflection.Assembly assembly, string resourceName) { }
        protected virtual string[] GetLocalizationResourceNames(System.Reflection.Assembly assembly, string resourceName) { }
        protected virtual string GetResourceName(System.Type resourceType) { }
        public virtual string GetString(string name, params object[] arguments) { }
        public virtual System.Collections.Generic.IReadOnlyDictionary<string, string> GetStrings(params object[] arguments) { }
        protected virtual System.Collections.Generic.IReadOnlyDictionary<string, string> GetTranslations() { }
        protected virtual string ReadResourceAsString(System.Reflection.Assembly assembly, string resourceName) { }
        public void ReadResources(System.Type resourceType) { }
    }
}
namespace Blazorise.Modules
{
    public abstract class BaseJSModule : Blazorise.Modules.IBaseJSModule, System.IAsyncDisposable
    {
        public BaseJSModule(Microsoft.JSInterop.IJSRuntime jsRuntime, Blazorise.IVersionProvider versionProvider, Blazorise.BlazoriseOptions options) { }
        protected bool AsyncDisposed { get; }
        protected bool IsUnsafe { get; }
        public Microsoft.JSInterop.IJSRuntime JSRuntime { get; }
        public System.Threading.Tasks.Task<Microsoft.JSInterop.IJSObjectReference> Module { get; }
        public abstract string ModuleFileName { get; }
        protected Blazorise.IVersionProvider VersionProvider { get; }
        public System.Threading.Tasks.ValueTask DisposeAsync() { }
        protected virtual System.Threading.Tasks.ValueTask DisposeAsync(bool disposing) { }
        protected System.Threading.Tasks.ValueTask<TValue> InvokeAsync<TValue>(string identifier, params object[] args) { }
        protected virtual System.Threading.Tasks.ValueTask<TValue> InvokeSafeAsync<TValue>(string identifier, params object[] args) { }
        protected virtual System.Threading.Tasks.ValueTask InvokeSafeVoidAsync(string identifier, params object[] args) { }
        protected System.Threading.Tasks.ValueTask InvokeVoidAsync(string identifier, params object[] args) { }
        protected virtual System.Threading.Tasks.ValueTask OnModuleLoaded(Microsoft.JSInterop.IJSObjectReference jsObjectReference) { }
    }
    public interface IBaseJSModule
    {
        System.Threading.Tasks.Task<Microsoft.JSInterop.IJSObjectReference> Module { get; }
        string ModuleFileName { get; }
    }
    public interface IJSBreakpointModule : Blazorise.Modules.IBaseJSModule
    {
        System.Threading.Tasks.ValueTask<string> GetBreakpoint();
        System.Threading.Tasks.ValueTask RegisterBreakpoint(Microsoft.JSInterop.DotNetObjectReference<Blazorise.BreakpointActivatorAdapter> dotNetObjectRef, string elementId);
        System.Threading.Tasks.ValueTask UnregisterBreakpoint(Blazorise.IBreakpointActivator component);
    }
    public interface IJSButtonModule : Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSDestroyableModule
    {
        System.Threading.Tasks.ValueTask Initialize(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options);
    }
    public interface IJSClosableModule : Blazorise.Modules.IBaseJSModule
    {
        System.Threading.Tasks.ValueTask Register(Microsoft.JSInterop.DotNetObjectReference<Blazorise.CloseActivatorAdapter> dotNetObjectRef, Microsoft.AspNetCore.Components.ElementReference elementRef);
        System.Threading.Tasks.ValueTask RegisterLight(Microsoft.AspNetCore.Components.ElementReference elementRef);
        System.Threading.Tasks.ValueTask Unregister(Blazorise.ICloseActivator component);
        System.Threading.Tasks.ValueTask UnregisterLight(Microsoft.AspNetCore.Components.ElementReference elementRef);
    }
    public interface IJSColorPickerModule : Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSDestroyableModule
    {
        System.Threading.Tasks.ValueTask Focus(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, bool scrollToElement);
        System.Threading.Tasks.ValueTask Initialize(Microsoft.JSInterop.DotNetObjectReference<Blazorise.ColorPicker> dotNetObjectRef, Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options);
        System.Threading.Tasks.ValueTask Select(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, bool focus);
        System.Threading.Tasks.ValueTask UpdateLocalization(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object localization);
        System.Threading.Tasks.ValueTask UpdateOptions(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options);
        System.Threading.Tasks.ValueTask UpdateValue(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object value);
    }
    public interface IJSDatePickerModule : Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSDestroyableModule
    {
        System.Threading.Tasks.ValueTask Activate(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options);
        System.Threading.Tasks.ValueTask Close(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId);
        System.Threading.Tasks.ValueTask Focus(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, bool scrollToElement);
        System.Threading.Tasks.ValueTask Initialize(Microsoft.JSInterop.DotNetObjectReference<Blazorise.DatePickerAdapter> dotNetObjectReference, Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options);
        System.Threading.Tasks.ValueTask Open(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId);
        System.Threading.Tasks.ValueTask Select(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, bool focus);
        System.Threading.Tasks.ValueTask Toggle(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId);
        System.Threading.Tasks.ValueTask UpdateLocalization(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object localization);
        System.Threading.Tasks.ValueTask UpdateOptions(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options);
        System.Threading.Tasks.ValueTask UpdateValue(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object value);
    }
    public interface IJSDestroyableModule
    {
        System.Threading.Tasks.ValueTask Destroy(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId);
    }
    public interface IJSDragDropModule : Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSDestroyableModule
    {
        System.Threading.Tasks.ValueTask DestroyThrottledDragEvents(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId);
        System.Threading.Tasks.ValueTask Initialize(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId);
        System.Threading.Tasks.ValueTask InitializeThrottledDragEvents<T>(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, Microsoft.JSInterop.DotNetObjectReference<T> dotNetObjectReference)
            where T :  class;
    }
    public interface IJSDropdownModule : Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSDestroyableModule
    {
        System.Threading.Tasks.ValueTask Hide(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId);
        System.Threading.Tasks.ValueTask Initialize(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, string targetElementId, string menuElementId, object options);
        System.Threading.Tasks.ValueTask Show(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId);
    }
    public interface IJSFileEditModule : Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSDestroyableModule
    {
        System.Threading.Tasks.ValueTask Initialize(Microsoft.JSInterop.DotNetObjectReference<Blazorise.FileEditAdapter> dotNetObjectRef, Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId);
        System.Threading.Tasks.ValueTask OpenFileDialog(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId);
        System.Threading.Tasks.ValueTask RemoveFile(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, int fileId);
        System.Threading.Tasks.ValueTask Reset(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId);
    }
    public interface IJSFileModule : Blazorise.Modules.IBaseJSModule
    {
        System.Threading.Tasks.ValueTask<Microsoft.JSInterop.IJSStreamReference> ReadDataAsync(Microsoft.AspNetCore.Components.ElementReference elementRef, int fileEntryId, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.ValueTask<byte[]> ReadDataAsync(Microsoft.AspNetCore.Components.ElementReference elementRef, int fileEntryId, long position, long length, System.Threading.CancellationToken cancellationToken = default);
    }
    public interface IJSFilePickerModule : Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSDestroyableModule
    {
        System.Threading.Tasks.ValueTask Initialize(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId);
    }
    public interface IJSInputMaskModule : Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSDestroyableModule
    {
        System.Threading.Tasks.ValueTask ExtendAliases(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object aliasOptions);
        System.Threading.Tasks.ValueTask Initialize(Microsoft.JSInterop.DotNetObjectReference<Blazorise.InputMask> dotNetObjectRef, Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options);
    }
    public interface IJSMemoEditModule : Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSDestroyableModule
    {
        System.Threading.Tasks.ValueTask Initialize(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options);
        System.Threading.Tasks.ValueTask RecalculateAutoHeight(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId);
        System.Threading.Tasks.ValueTask UpdateOptions(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options);
    }
    public interface IJSModalModule : Blazorise.Modules.IBaseJSModule
    {
        System.Threading.Tasks.ValueTask CloseModal(Microsoft.AspNetCore.Components.ElementReference elementRef);
        System.Threading.Tasks.ValueTask OpenModal(Microsoft.AspNetCore.Components.ElementReference elementRef, bool scrollToTop);
    }
    public interface IJSNumericPickerModule : Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSDestroyableModule
    {
        System.Threading.Tasks.ValueTask Initialize(Microsoft.JSInterop.DotNetObjectReference<Blazorise.NumericPickerAdapter> dotNetObjectRef, Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options);
        System.Threading.Tasks.ValueTask UpdateOptions(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options);
        System.Threading.Tasks.ValueTask UpdateValue<TValue>(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, TValue value);
    }
    public interface IJSTableModule : Blazorise.Modules.IBaseJSModule
    {
        System.Threading.Tasks.ValueTask DestroyFixedHeader(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId);
        System.Threading.Tasks.ValueTask DestroyResizable(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId);
        System.Threading.Tasks.ValueTask InitializeFixedHeader(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId);
        System.Threading.Tasks.ValueTask InitializeResizable(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, Blazorise.TableResizeMode resizeMode);
        System.Threading.Tasks.ValueTask ScrollTableToPixels(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, int pixels);
        System.Threading.Tasks.ValueTask ScrollTableToRow(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, int row);
    }
    public interface IJSTextEditModule : Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSDestroyableModule
    {
        System.Threading.Tasks.ValueTask Initialize(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, string maskType, string editMask);
    }
    public interface IJSTimePickerModule : Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSDestroyableModule
    {
        System.Threading.Tasks.ValueTask Activate(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options);
        System.Threading.Tasks.ValueTask Close(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId);
        System.Threading.Tasks.ValueTask Focus(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, bool scrollToElement);
        System.Threading.Tasks.ValueTask Initialize(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options);
        System.Threading.Tasks.ValueTask Open(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId);
        System.Threading.Tasks.ValueTask Select(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, bool focus);
        System.Threading.Tasks.ValueTask Toggle(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId);
        System.Threading.Tasks.ValueTask UpdateLocalization(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object localization);
        System.Threading.Tasks.ValueTask UpdateOptions(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options);
        System.Threading.Tasks.ValueTask UpdateValue(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object value);
    }
    public interface IJSTooltipModule : Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSDestroyableModule
    {
        System.Threading.Tasks.ValueTask Initialize(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options);
        System.Threading.Tasks.ValueTask UpdateContent(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, string content);
    }
    public interface IJSUtilitiesModule : Blazorise.Modules.IBaseJSModule
    {
        System.Threading.Tasks.ValueTask AddClass(Microsoft.AspNetCore.Components.ElementReference elementRef, string classname);
        System.Threading.Tasks.ValueTask AddClassToBody(string classname);
        System.Threading.Tasks.ValueTask CopyToClipboard(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId);
        System.Threading.Tasks.ValueTask Focus(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, bool scrollToElement);
        System.Threading.Tasks.ValueTask<int> GetCaret(Microsoft.AspNetCore.Components.ElementReference elementRef);
        System.Threading.Tasks.ValueTask<Blazorise.DomElement> GetElementInfo(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId);
        System.Threading.Tasks.ValueTask<string> GetUserAgent();
        System.Threading.Tasks.ValueTask Log(string message, params string[] args);
        System.Threading.Tasks.ValueTask<bool> ParentHasClass(Microsoft.AspNetCore.Components.ElementReference elementRef, string classname);
        System.Threading.Tasks.ValueTask RemoveClass(Microsoft.AspNetCore.Components.ElementReference elementRef, string classname);
        System.Threading.Tasks.ValueTask RemoveClassFromBody(string classname);
        System.Threading.Tasks.ValueTask ScrollAnchorIntoView(string anchorTarget);
        System.Threading.Tasks.ValueTask ScrollElementIntoView(string elementId, bool smooth = true);
        System.Threading.Tasks.ValueTask Select(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, bool focus);
        System.Threading.Tasks.ValueTask SetCaret(Microsoft.AspNetCore.Components.ElementReference elementRef, int caret);
        System.Threading.Tasks.ValueTask SetProperty(Microsoft.AspNetCore.Components.ElementReference elementRef, string property, object value);
        System.Threading.Tasks.ValueTask SetTextValue(Microsoft.AspNetCore.Components.ElementReference elementRef, object value);
        System.Threading.Tasks.ValueTask ShowPicker(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId);
        System.Threading.Tasks.ValueTask ToggleClass(Microsoft.AspNetCore.Components.ElementReference elementRef, string classname);
    }
    public class JSBreakpointModule : Blazorise.Modules.BaseJSModule, Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSBreakpointModule
    {
        public JSBreakpointModule(Microsoft.JSInterop.IJSRuntime jsRuntime, Blazorise.IVersionProvider versionProvider, Blazorise.BlazoriseOptions options) { }
        public override string ModuleFileName { get; }
        public virtual System.Threading.Tasks.ValueTask<string> GetBreakpoint() { }
        public virtual System.Threading.Tasks.ValueTask RegisterBreakpoint(Microsoft.JSInterop.DotNetObjectReference<Blazorise.BreakpointActivatorAdapter> dotNetObjectRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask UnregisterBreakpoint(Blazorise.IBreakpointActivator component) { }
    }
    public class JSButtonModule : Blazorise.Modules.BaseJSModule, Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSButtonModule, Blazorise.Modules.IJSDestroyableModule
    {
        public JSButtonModule(Microsoft.JSInterop.IJSRuntime jsRuntime, Blazorise.IVersionProvider versionProvider, Blazorise.BlazoriseOptions options) { }
        public override string ModuleFileName { get; }
        public virtual System.Threading.Tasks.ValueTask Destroy(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask Initialize(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options) { }
    }
    public class JSClosableModule : Blazorise.Modules.BaseJSModule, Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSClosableModule
    {
        public JSClosableModule(Microsoft.JSInterop.IJSRuntime jsRuntime, Blazorise.IVersionProvider versionProvider, Blazorise.BlazoriseOptions options) { }
        public override string ModuleFileName { get; }
        public virtual System.Threading.Tasks.ValueTask Register(Microsoft.JSInterop.DotNetObjectReference<Blazorise.CloseActivatorAdapter> dotNetObjectRef, Microsoft.AspNetCore.Components.ElementReference elementRef) { }
        public virtual System.Threading.Tasks.ValueTask RegisterLight(Microsoft.AspNetCore.Components.ElementReference elementRef) { }
        public virtual System.Threading.Tasks.ValueTask Unregister(Blazorise.ICloseActivator component) { }
        public virtual System.Threading.Tasks.ValueTask UnregisterLight(Microsoft.AspNetCore.Components.ElementReference elementRef) { }
    }
    public class JSColorPickerModule : Blazorise.Modules.BaseJSModule, Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSColorPickerModule, Blazorise.Modules.IJSDestroyableModule
    {
        public JSColorPickerModule(Microsoft.JSInterop.IJSRuntime jsRuntime, Blazorise.IVersionProvider versionProvider, Blazorise.BlazoriseOptions options) { }
        public override string ModuleFileName { get; }
        public virtual System.Threading.Tasks.ValueTask Activate(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options) { }
        public virtual System.Threading.Tasks.ValueTask Destroy(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask Focus(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, bool scrollToElement) { }
        public virtual System.Threading.Tasks.ValueTask Initialize(Microsoft.JSInterop.DotNetObjectReference<Blazorise.ColorPicker> dotNetObjectRef, Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options) { }
        public virtual System.Threading.Tasks.ValueTask Select(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, bool focus) { }
        public virtual System.Threading.Tasks.ValueTask UpdateLocalization(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object localization) { }
        public virtual System.Threading.Tasks.ValueTask UpdateOptions(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options) { }
        public virtual System.Threading.Tasks.ValueTask UpdateValue(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object value) { }
    }
    public class JSDatePickerModule : Blazorise.Modules.BaseJSModule, Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSDatePickerModule, Blazorise.Modules.IJSDestroyableModule
    {
        public JSDatePickerModule(Microsoft.JSInterop.IJSRuntime jsRuntime, Blazorise.IVersionProvider versionProvider, Blazorise.BlazoriseOptions options) { }
        public override string ModuleFileName { get; }
        public virtual System.Threading.Tasks.ValueTask Activate(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options) { }
        public virtual System.Threading.Tasks.ValueTask Close(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask Destroy(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask Focus(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, bool scrollToElement) { }
        public virtual System.Threading.Tasks.ValueTask Initialize(Microsoft.JSInterop.DotNetObjectReference<Blazorise.DatePickerAdapter> dotNetObjectReference, Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options) { }
        public virtual System.Threading.Tasks.ValueTask Open(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask Select(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, bool focus) { }
        public virtual System.Threading.Tasks.ValueTask Toggle(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask UpdateLocalization(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object localization) { }
        public virtual System.Threading.Tasks.ValueTask UpdateOptions(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options) { }
        public virtual System.Threading.Tasks.ValueTask UpdateValue(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object value) { }
    }
    public class JSDragDropModule : Blazorise.Modules.BaseJSModule, Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSDestroyableModule, Blazorise.Modules.IJSDragDropModule
    {
        public JSDragDropModule(Microsoft.JSInterop.IJSRuntime jsRuntime, Blazorise.IVersionProvider versionProvider, Blazorise.BlazoriseOptions options) { }
        public override string ModuleFileName { get; }
        public virtual System.Threading.Tasks.ValueTask Destroy(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask DestroyThrottledDragEvents(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask Initialize(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask InitializeThrottledDragEvents<T>(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, Microsoft.JSInterop.DotNetObjectReference<T> dotNetObjectReference)
            where T :  class { }
    }
    public class JSDropdownModule : Blazorise.Modules.BaseJSModule, Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSDestroyableModule, Blazorise.Modules.IJSDropdownModule
    {
        public JSDropdownModule(Microsoft.JSInterop.IJSRuntime jsRuntime, Blazorise.IVersionProvider versionProvider, Blazorise.BlazoriseOptions options) { }
        public override string ModuleFileName { get; }
        public virtual System.Threading.Tasks.ValueTask Destroy(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask Hide(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask Initialize(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, string targetElementId, string menuElementId, object options) { }
        public virtual System.Threading.Tasks.ValueTask Show(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
    }
    public class JSFileEditModule : Blazorise.Modules.BaseJSModule, Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSDestroyableModule, Blazorise.Modules.IJSFileEditModule
    {
        public JSFileEditModule(Microsoft.JSInterop.IJSRuntime jsRuntime, Blazorise.IVersionProvider versionProvider, Blazorise.BlazoriseOptions options) { }
        public override string ModuleFileName { get; }
        public virtual System.Threading.Tasks.ValueTask Destroy(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask Initialize(Microsoft.JSInterop.DotNetObjectReference<Blazorise.FileEditAdapter> dotNetObjectRef, Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask OpenFileDialog(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask RemoveFile(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, int fileId) { }
        public virtual System.Threading.Tasks.ValueTask Reset(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
    }
    public class JSFileModule : Blazorise.Modules.BaseJSModule, Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSFileModule
    {
        public JSFileModule(Microsoft.JSInterop.IJSRuntime jsRuntime, Blazorise.IVersionProvider versionProvider, Blazorise.BlazoriseOptions options) { }
        public override string ModuleFileName { get; }
        public virtual System.Threading.Tasks.ValueTask<Microsoft.JSInterop.IJSStreamReference> ReadDataAsync(Microsoft.AspNetCore.Components.ElementReference elementRef, int fileEntryId, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.ValueTask<byte[]> ReadDataAsync(Microsoft.AspNetCore.Components.ElementReference elementRef, int fileEntryId, long position, long length, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public class JSFilePickerModule : Blazorise.Modules.BaseJSModule, Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSDestroyableModule, Blazorise.Modules.IJSFilePickerModule
    {
        public JSFilePickerModule(Microsoft.JSInterop.IJSRuntime jsRuntime, Blazorise.IVersionProvider versionProvider, Blazorise.BlazoriseOptions options) { }
        public override string ModuleFileName { get; }
        public virtual System.Threading.Tasks.ValueTask Destroy(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask Initialize(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
    }
    public class JSInputMaskModule : Blazorise.Modules.BaseJSModule, Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSDestroyableModule, Blazorise.Modules.IJSInputMaskModule
    {
        public JSInputMaskModule(Microsoft.JSInterop.IJSRuntime jsRuntime, Blazorise.IVersionProvider versionProvider, Blazorise.BlazoriseOptions options) { }
        public override string ModuleFileName { get; }
        public virtual System.Threading.Tasks.ValueTask Destroy(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask ExtendAliases(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object aliasOptions) { }
        public virtual System.Threading.Tasks.ValueTask Initialize(Microsoft.JSInterop.DotNetObjectReference<Blazorise.InputMask> dotNetObjectRef, Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options) { }
    }
    public class JSMemoEditModule : Blazorise.Modules.BaseJSModule, Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSDestroyableModule, Blazorise.Modules.IJSMemoEditModule
    {
        public JSMemoEditModule(Microsoft.JSInterop.IJSRuntime jsRuntime, Blazorise.IVersionProvider versionProvider, Blazorise.BlazoriseOptions options) { }
        public override string ModuleFileName { get; }
        public virtual System.Threading.Tasks.ValueTask Destroy(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask Initialize(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options) { }
        public virtual System.Threading.Tasks.ValueTask RecalculateAutoHeight(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask UpdateOptions(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options) { }
    }
    public abstract class JSModalModule : Blazorise.Modules.BaseJSModule, Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSModalModule
    {
        public JSModalModule(Microsoft.JSInterop.IJSRuntime jsRuntime, Blazorise.IVersionProvider versionProvider, Blazorise.BlazoriseOptions options) { }
        public virtual System.Threading.Tasks.ValueTask CloseModal(Microsoft.AspNetCore.Components.ElementReference elementRef) { }
        public virtual System.Threading.Tasks.ValueTask OpenModal(Microsoft.AspNetCore.Components.ElementReference elementRef, bool scrollToTop) { }
    }
    public class JSNumericPickerModule : Blazorise.Modules.BaseJSModule, Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSDestroyableModule, Blazorise.Modules.IJSNumericPickerModule
    {
        public JSNumericPickerModule(Microsoft.JSInterop.IJSRuntime jsRuntime, Blazorise.IVersionProvider versionProvider, Blazorise.BlazoriseOptions options) { }
        public override string ModuleFileName { get; }
        public virtual System.Threading.Tasks.ValueTask Destroy(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask Initialize(Microsoft.JSInterop.DotNetObjectReference<Blazorise.NumericPickerAdapter> dotNetObjectRef, Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options) { }
        public virtual System.Threading.Tasks.ValueTask UpdateOptions(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options) { }
        public virtual System.Threading.Tasks.ValueTask UpdateValue<TValue>(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, TValue value) { }
    }
    public class JSTableModule : Blazorise.Modules.BaseJSModule, Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSTableModule
    {
        public JSTableModule(Microsoft.JSInterop.IJSRuntime jsRuntime, Blazorise.IVersionProvider versionProvider, Blazorise.BlazoriseOptions options) { }
        public override string ModuleFileName { get; }
        public virtual System.Threading.Tasks.ValueTask DestroyFixedHeader(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask DestroyResizable(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask InitializeFixedHeader(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask InitializeResizable(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, Blazorise.TableResizeMode resizeMode) { }
        public virtual System.Threading.Tasks.ValueTask ScrollTableToPixels(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, int pixels) { }
        public virtual System.Threading.Tasks.ValueTask ScrollTableToRow(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, int row) { }
    }
    public class JSTextEditModule : Blazorise.Modules.BaseJSModule, Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSDestroyableModule, Blazorise.Modules.IJSTextEditModule
    {
        public JSTextEditModule(Microsoft.JSInterop.IJSRuntime jsRuntime, Blazorise.IVersionProvider versionProvider, Blazorise.BlazoriseOptions options) { }
        public override string ModuleFileName { get; }
        public virtual System.Threading.Tasks.ValueTask Destroy(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask Initialize(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, string maskType, string editMask) { }
    }
    public class JSTimePickerModule : Blazorise.Modules.BaseJSModule, Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSDestroyableModule, Blazorise.Modules.IJSTimePickerModule
    {
        public JSTimePickerModule(Microsoft.JSInterop.IJSRuntime jsRuntime, Blazorise.IVersionProvider versionProvider, Blazorise.BlazoriseOptions options) { }
        public override string ModuleFileName { get; }
        public virtual System.Threading.Tasks.ValueTask Activate(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options) { }
        public virtual System.Threading.Tasks.ValueTask Close(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask Destroy(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask Focus(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, bool scrollToElement) { }
        public virtual System.Threading.Tasks.ValueTask Initialize(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options) { }
        public virtual System.Threading.Tasks.ValueTask Open(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask Select(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, bool focus) { }
        public virtual System.Threading.Tasks.ValueTask Toggle(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask UpdateLocalization(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object localization) { }
        public virtual System.Threading.Tasks.ValueTask UpdateOptions(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options) { }
        public virtual System.Threading.Tasks.ValueTask UpdateValue(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object value) { }
    }
    public abstract class JSTooltipModule : Blazorise.Modules.BaseJSModule, Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSDestroyableModule, Blazorise.Modules.IJSTooltipModule
    {
        public JSTooltipModule(Microsoft.JSInterop.IJSRuntime jsRuntime, Blazorise.IVersionProvider versionProvider, Blazorise.BlazoriseOptions options) { }
        public virtual System.Threading.Tasks.ValueTask Destroy(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask Initialize(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, object options) { }
        public virtual System.Threading.Tasks.ValueTask UpdateContent(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, string content) { }
    }
    public class JSUtilitiesModule : Blazorise.Modules.BaseJSModule, Blazorise.Modules.IBaseJSModule, Blazorise.Modules.IJSUtilitiesModule
    {
        public JSUtilitiesModule(Microsoft.JSInterop.IJSRuntime jsRuntime, Blazorise.IVersionProvider versionProvider, Blazorise.BlazoriseOptions options) { }
        public override string ModuleFileName { get; }
        public virtual System.Threading.Tasks.ValueTask AddClass(Microsoft.AspNetCore.Components.ElementReference elementRef, string classname) { }
        public virtual System.Threading.Tasks.ValueTask AddClassToBody(string classname) { }
        public System.Threading.Tasks.ValueTask CopyToClipboard(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask Focus(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, bool scrollToElement) { }
        public virtual System.Threading.Tasks.ValueTask<int> GetCaret(Microsoft.AspNetCore.Components.ElementReference elementRef) { }
        public virtual System.Threading.Tasks.ValueTask<Blazorise.DomElement> GetElementInfo(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask<string> GetUserAgent() { }
        public System.Threading.Tasks.ValueTask Log(string message, params string[] args) { }
        public virtual System.Threading.Tasks.ValueTask<bool> ParentHasClass(Microsoft.AspNetCore.Components.ElementReference elementRef, string classname) { }
        public virtual System.Threading.Tasks.ValueTask RemoveClass(Microsoft.AspNetCore.Components.ElementReference elementRef, string classname) { }
        public virtual System.Threading.Tasks.ValueTask RemoveClassFromBody(string classname) { }
        public virtual System.Threading.Tasks.ValueTask ScrollAnchorIntoView(string anchorTarget) { }
        public virtual System.Threading.Tasks.ValueTask ScrollElementIntoView(string elementId, bool smooth = true) { }
        public virtual System.Threading.Tasks.ValueTask Select(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId, bool focus) { }
        public virtual System.Threading.Tasks.ValueTask SetCaret(Microsoft.AspNetCore.Components.ElementReference elementRef, int caret) { }
        public virtual System.Threading.Tasks.ValueTask SetProperty(Microsoft.AspNetCore.Components.ElementReference elementRef, string property, object value) { }
        public virtual System.Threading.Tasks.ValueTask SetTextValue(Microsoft.AspNetCore.Components.ElementReference elementRef, object value) { }
        public virtual System.Threading.Tasks.ValueTask ShowPicker(Microsoft.AspNetCore.Components.ElementReference elementRef, string elementId) { }
        public virtual System.Threading.Tasks.ValueTask ToggleClass(Microsoft.AspNetCore.Components.ElementReference elementRef, string classname) { }
    }
}
namespace Blazorise.Providers
{
    public abstract class BaseIconProvider : Blazorise.IIconProvider
    {
        protected BaseIconProvider() { }
        public abstract bool IconNameAsContent { get; }
        protected abstract bool ContainsStyleName(string iconName);
        public string GetIconName(string customName) { }
        public abstract string GetIconName(Blazorise.IconName name, Blazorise.IconStyle style);
        public abstract string GetStyleName(Blazorise.IconStyle iconStyle);
        public virtual string Icon(object name, Blazorise.IconStyle style) { }
        public abstract string IconSize(Blazorise.IconSize iconSize);
        public abstract void SetIconName(Blazorise.IconName name, string newName);
    }
}
namespace Blazorise.States
{
    public class AlertState : System.IEquatable<Blazorise.States.AlertState>
    {
        public AlertState() { }
        public Blazorise.Color Color { get; init; }
        public bool Dismisable { get; init; }
        public bool Visible { get; init; }
    }
    public class BarDropdownState : System.IEquatable<Blazorise.States.BarDropdownState>
    {
        public BarDropdownState() { }
        public bool IsInlineDisplay { get; }
        public bool BarVisible { get; init; }
        public Blazorise.BarMode Mode { get; init; }
        public int NestedIndex { get; init; }
        public bool RightAligned { get; init; }
        public bool Visible { get; init; }
    }
    public class BarItemState : System.IEquatable<Blazorise.States.BarItemState>
    {
        public BarItemState() { }
        public bool Active { get; init; }
        public bool BarVisible { get; init; }
        public bool Disabled { get; init; }
        public Blazorise.BarMode Mode { get; init; }
    }
    public class BarState : System.IEquatable<Blazorise.States.BarState>
    {
        public BarState() { }
        public Blazorise.States.BarTogglerState BarTogglerState { get; set; }
        public Blazorise.Alignment Alignment { get; init; }
        public Blazorise.Breakpoint Breakpoint { get; init; }
        public Blazorise.BarCollapseMode CollapseMode { get; init; }
        public Blazorise.BarMode Mode { get; init; }
        public Blazorise.Breakpoint NavigationBreakpoint { get; init; }
        public Blazorise.ThemeContrast ThemeContrast { get; init; }
        public bool Visible { get; init; }
    }
    public class BarTogglerState : System.IEquatable<Blazorise.States.BarTogglerState>
    {
        public BarTogglerState() { }
        public Blazorise.Bar Bar { get; set; }
        public Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs> Clicked { get; set; }
        public Blazorise.BarTogglerMode Mode { get; set; }
    }
    public class CarouselState : System.IEquatable<Blazorise.States.CarouselState>
    {
        public CarouselState() { }
        public bool AutoRepeat { get; init; }
        public bool Autoplay { get; init; }
        public bool Crossfade { get; init; }
        public string PreviouslySelectedSlide { get; init; }
        public string SelectedSlide { get; init; }
    }
    public class DropdownState : System.IEquatable<Blazorise.States.DropdownState>
    {
        public DropdownState() { }
        public Blazorise.Direction Direction { get; init; }
        public bool Disabled { get; init; }
        public bool RightAligned { get; init; }
        public bool Visible { get; init; }
    }
    public class ListGroupState : System.IEquatable<Blazorise.States.ListGroupState>
    {
        public ListGroupState() { }
        public bool Flush { get; init; }
        public Blazorise.ListGroupMode Mode { get; init; }
        public bool Scrollable { get; init; }
        public string SelectedItem { get; init; }
        public System.Collections.Generic.List<string> SelectedItems { get; init; }
        public Blazorise.ListGroupSelectionMode SelectionMode { get; init; }
    }
    public class ModalState : System.IEquatable<Blazorise.States.ModalState>
    {
        public ModalState() { }
        public bool Hiding { get; init; }
        public int OpenIndex { get; init; }
        public bool Showing { get; init; }
        public bool Visible { get; init; }
    }
    public class OffcanvasState : System.IEquatable<Blazorise.States.OffcanvasState>
    {
        public OffcanvasState() { }
        public bool Hiding { get; init; }
        public bool Showing { get; init; }
        public bool Visible { get; init; }
    }
    public class PaginationItemState : System.IEquatable<Blazorise.States.PaginationItemState>
    {
        public PaginationItemState() { }
        public bool Active { get; init; }
        public bool Disabled { get; init; }
    }
    public class ProgressState : System.IEquatable<Blazorise.States.ProgressState>
    {
        public ProgressState() { }
        public bool Animated { get; init; }
        public Blazorise.Color Color { get; init; }
        public bool Indeterminate { get; init; }
        public int Max { get; init; }
        public int Min { get; init; }
        public Blazorise.Size? Size { get; init; }
        public bool Striped { get; init; }
        public int? Value { get; init; }
    }
    public class StepsContentState : System.IEquatable<Blazorise.States.StepsContentState>
    {
        public StepsContentState() { }
        public string SelectedPanel { get; init; }
    }
    public class StepsState : System.IEquatable<Blazorise.States.StepsState>
    {
        public StepsState() { }
        public string SelectedStep { get; init; }
    }
    public class TabsContentState : System.IEquatable<Blazorise.States.TabsContentState>
    {
        public TabsContentState() { }
        public Blazorise.TabsRenderMode RenderMode { get; init; }
        public string SelectedPanel { get; init; }
    }
    public class TabsState : System.IEquatable<Blazorise.States.TabsState>
    {
        public TabsState() { }
        public bool FullWidth { get; init; }
        public bool Justified { get; init; }
        public bool Pills { get; init; }
        public Blazorise.TabsRenderMode RenderMode { get; init; }
        public string SelectedTab { get; init; }
        public Blazorise.TabPosition TabPosition { get; init; }
    }
    public class ToastState : System.IEquatable<Blazorise.States.ToastState>
    {
        public ToastState() { }
        public bool Hiding { get; init; }
        public bool Showing { get; init; }
        public bool Visible { get; init; }
    }
}
namespace Blazorise.Themes
{
    public class ThemeCache : Blazorise.IThemeCache
    {
        public ThemeCache(Blazorise.BlazoriseOptions options) { }
        public void CacheStyles(Blazorise.Theme theme, string styles) { }
        public void CacheVariables(Blazorise.Theme theme, string variables) { }
        public bool TryGetStylesFromCache(Blazorise.Theme theme, out string styles) { }
        public bool TryGetVariablesFromCache(Blazorise.Theme theme, out string variables) { }
    }
}
namespace Blazorise.Utilities
{
    public class AsyncCountdownTimer : System.IDisposable
    {
        public AsyncCountdownTimer(double timeout, System.Threading.CancellationToken cancellationToken = default) { }
        public void Dispose() { }
        protected virtual void Dispose(bool disposing) { }
        public Blazorise.Utilities.AsyncCountdownTimer Elapsed(System.Func<System.Threading.Tasks.Task> elapsedDelegate) { }
        protected override void Finalize() { }
        public void Pause() { }
        public System.Threading.Tasks.Task Resume(double extendedTimeout = 0) { }
        public System.Threading.Tasks.Task Start() { }
        public Blazorise.Utilities.AsyncCountdownTimer Ticked(System.Func<double, System.Threading.Tasks.Task> updateProgressDelegate) { }
    }
    public sealed class AsyncDisposable : System.IAsyncDisposable
    {
        public System.Threading.Tasks.ValueTask DisposeAsync() { }
        public static System.IAsyncDisposable Create(System.Func<System.Threading.Tasks.ValueTask> action) { }
    }
    public class ClassBuilder
    {
        public ClassBuilder(System.Action<Blazorise.Utilities.ClassBuilder> buildClasses) { }
        public string Class { get; }
        public void Append(System.Collections.Generic.IEnumerable<string> values) { }
        public void Append(string value) { }
        public void Append(string value, bool condition) { }
        public void Dirty() { }
    }
    public sealed class CompositeDisposable : System.Collections.ObjectModel.Collection<System.IDisposable>, System.IDisposable
    {
        public CompositeDisposable() { }
        public void Dispose() { }
    }
    public static class CompositeDisposableEx
    {
        public static T DisposeWith<T>(this T disposable, Blazorise.Utilities.CompositeDisposable cleanup)
            where T : System.IDisposable { }
    }
    public static class Converters
    {
        public static TValue ChangeType<TValue>(object value) { }
        public static bool EnumTryParse<TValue>(string input, System.Type conversionType, out TValue theEnum) { }
        public static string FormatValue(byte value, System.Globalization.CultureInfo culture = null) { }
        public static string FormatValue(System.DateOnly value, System.Globalization.CultureInfo culture = null) { }
        public static string FormatValue(System.DateOnly? value, System.Globalization.CultureInfo culture = null) { }
        public static string FormatValue(System.DateTime value, System.Globalization.CultureInfo culture = null) { }
        public static string FormatValue(System.DateTime? value, System.Globalization.CultureInfo culture = null) { }
        public static string FormatValue(System.DateTimeOffset value, System.Globalization.CultureInfo culture = null) { }
        public static string FormatValue(System.DateTimeOffset? value, System.Globalization.CultureInfo culture = null) { }
        public static string FormatValue(short value, System.Globalization.CultureInfo culture = null) { }
        public static string FormatValue(int value, System.Globalization.CultureInfo culture = null) { }
        public static string FormatValue(long value, System.Globalization.CultureInfo culture = null) { }
        public static string FormatValue(sbyte value, System.Globalization.CultureInfo culture = null) { }
        public static string FormatValue(ushort value, System.Globalization.CultureInfo culture = null) { }
        public static string FormatValue(uint value, System.Globalization.CultureInfo culture = null) { }
        public static string FormatValue(ulong value, System.Globalization.CultureInfo culture = null) { }
        public static string FormatValue(byte? value, System.Globalization.CultureInfo culture = null) { }
        public static string FormatValue(decimal? value, System.Globalization.CultureInfo culture = null) { }
        public static string FormatValue(int? value, System.Globalization.CultureInfo culture = null) { }
        public static string FormatValue(long? value, System.Globalization.CultureInfo culture = null) { }
        public static string FormatValue(sbyte? value, System.Globalization.CultureInfo culture = null) { }
        public static string FormatValue(short? value, System.Globalization.CultureInfo culture = null) { }
        public static string FormatValue(uint? value, System.Globalization.CultureInfo culture = null) { }
        public static string FormatValue(ulong? value, System.Globalization.CultureInfo culture = null) { }
        public static string FormatValue(ushort? value, System.Globalization.CultureInfo culture = null) { }
        public static string FormatValue(decimal value, System.Globalization.CultureInfo culture = null, int? decimals = default) { }
        public static string FormatValue(double value, System.Globalization.CultureInfo culture = null, int? decimals = default) { }
        public static string FormatValue(float value, System.Globalization.CultureInfo culture = null, int? decimals = default) { }
        public static string FormatValue(decimal? value, System.Globalization.CultureInfo culture = null, int? decimals = default) { }
        public static string FormatValue(double? value, System.Globalization.CultureInfo culture = null, int? decimals = default) { }
        public static string FormatValue(float? value, System.Globalization.CultureInfo culture = null, int? decimals = default) { }
        public static System.ValueTuple<object, object> GetMinMaxValueOfType<TValue>() { }
        public static System.Collections.Generic.IDictionary<string, object> ToDictionary(object source, bool addEmptyObjects = true, bool forceCamelCase = true) { }
        public static bool TryChangeType(object value, System.Type conversionType, out object result, System.Globalization.CultureInfo cultureInfo = null) { }
        public static bool TryChangeType<TValue>(object value, out TValue result, System.Globalization.CultureInfo cultureInfo = null) { }
        public static bool TryParseAndLimitLargeNumber<TValue>(string value, out TValue result, System.Globalization.CultureInfo cultureInfo = null) { }
    }
    public class CountdownTimer : System.IDisposable
    {
        public CountdownTimer(double interval) { }
        protected bool Disposed { get; }
        public event System.EventHandler Elapsed;
        public void Delay(double interval) { }
        public void Dispose() { }
        protected virtual void Dispose(bool disposing) { }
        public void Start() { }
    }
    public sealed class Disposable : System.IDisposable
    {
        public void Dispose() { }
        public static System.IDisposable Create(System.Action action) { }
    }
    public static class EventUtil
    {
        public static System.Action AsNonRenderingEventHandler(System.Action callback) { }
        public static System.Func<System.Threading.Tasks.Task> AsNonRenderingEventHandler(System.Func<System.Threading.Tasks.Task> callback) { }
        public static System.Action<TValue> AsNonRenderingEventHandler<TValue>(System.Action<TValue> callback) { }
        public static System.Func<TValue, System.Threading.Tasks.Task> AsNonRenderingEventHandler<TValue>(System.Func<TValue, System.Threading.Tasks.Task> callback) { }
    }
    public static class ExpressionConverter
    {
        public static string ToTemplatedStringLiteral(System.Linq.Expressions.LambdaExpression expression) { }
    }
    public static class ExpressionFormatter
    {
        public static void ClearCache() { }
        public static string FormatLambda(System.Linq.Expressions.LambdaExpression expression) { }
        public static string FormatLambda(System.Linq.Expressions.LambdaExpression expression, string? prefix = null) { }
    }
    public static class Formaters
    {
        public static string FormatDateValueAsString<TValue>(TValue value, string dateFormat) { }
        public static string GetBytesReadable(long bytes) { }
        public static string PascalCaseToFriendlyName(string input) { }
        public static string ToFileSize(long source) { }
    }
    public static class HtmlColorCodeParser
    {
        public static bool TryParse(string code, out byte red, out byte green, out byte blue) { }
    }
    public class HtmlFieldPrefix
    {
        public HtmlFieldPrefix(System.Linq.Expressions.LambdaExpression initial) { }
        public HtmlFieldPrefix(System.Linq.Expressions.LambdaExpression expression, params System.Linq.Expressions.LambdaExpression[] rest) { }
        public System.Linq.Expressions.LambdaExpression Initial { get; }
        public Blazorise.Utilities.HtmlFieldPrefix Combine(System.Linq.Expressions.LambdaExpression other) { }
        public string GetFieldName(System.Linq.Expressions.LambdaExpression expression) { }
    }
    public interface IValidationMessageLocalizerAttributeFinder
    {
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "Index",
                "Argument"})]
        System.Collections.Generic.IEnumerable<System.ValueTuple<string, string>> FindAll(string first, string second);
    }
    public sealed class IdGenerator : Blazorise.IIdGenerator
    {
        public IdGenerator() { }
        public string Generate { get; }
    }
    public static class MathUtils
    {
        public static TValue Clamp<TValue>(TValue value, TValue min, TValue max) { }
        public static object GetPercent(object value, object min, object max) { }
        public static double Round(double value, int precision = 0) { }
    }
    public static class MathUtils<T>
    {
        public static T Add(T a, T b) { }
        public static T Subtract(T a, T b) { }
    }
    public static class Parsers
    {
        public const string ExternalDateFormat = "dd.MM.yyyy";
        public const string ExternalDateTimeFormat = "dd.MM.yyyy HH:mm";
        public const string ExternalMonthFormat = "MM.yyyy";
        public const string InternalDateFormat = "yyyy-MM-dd";
        public const string InternalDateTimeFormat = "yyyy-MM-ddTHH:mm";
        public const string InternalMonthFormat = "yyyy-MM";
        public const string InternalTimeFormat = "HH\\:mm\\:ss";
        public static readonly string[] SupportedParseDateFormats;
        public static readonly string[] SupportedParseDateTimeFormats;
        public static readonly string[] SupportedParseDateTimeTimeFormats;
        public static readonly string[] SupportedParseMonthFormats;
        public static readonly string[] SupportedParseTimeOnlyTimeFormats;
        public static readonly string[] SupportedParseTimeSpanTimeFormats;
        public static string GetInternalDateFormat(Blazorise.DateInputMode inputMode) { }
        public static bool TryParseDate<TValue>(string value, Blazorise.DateInputMode inputMode, out TValue result) { }
        public static bool TryParseTime<TValue>(string value, out TValue result) { }
    }
    public static class ReflectionHelper
    {
        public static System.Reflection.MethodInfo GetMethod(System.Type type, string methodName) { }
        public static System.Reflection.MethodInfo GetMethod<T>(string methodName) { }
        public static System.Reflection.PropertyInfo[] GetPublicProperties<T>() { }
        public static System.Reflection.MethodInfo GetStaticMethod(System.Type type, string methodName) { }
        public static System.Reflection.MethodInfo GetStaticMethod<T>(string methodName) { }
        public static string ResolveCaption(System.Reflection.PropertyInfo propertyInfo) { }
        public static Blazorise.DateAttribute ResolveDateAttribute(System.Reflection.PropertyInfo propertyInfo) { }
        public static int ResolveDisplayOrder(System.Reflection.PropertyInfo propertyInfo) { }
        public static int? ResolveEditOrder(System.Reflection.PropertyInfo propertyInfo) { }
        public static bool ResolveIsIgnore(System.Reflection.PropertyInfo propertyInfo) { }
        public static Blazorise.NumericAttribute ResolveNumericAttribute(System.Reflection.PropertyInfo propertyInfo) { }
        public static Blazorise.SelectAttribute ResolveSelectAttribute(System.Reflection.PropertyInfo propertyInfo) { }
    }
    public class SingleValueOrArray<TValue> : System.Collections.Generic.ICollection<TValue>, System.Collections.Generic.IEnumerable<TValue>, System.Collections.Generic.IList<TValue>, System.Collections.IEnumerable
    {
        public SingleValueOrArray(System.Collections.Generic.IEnumerable<TValue> values) { }
        public SingleValueOrArray(TValue value) { }
        public int Count { get; }
        public bool IsReadOnly { get; }
        public TValue this[int index] { get; set; }
        public System.Collections.Generic.IList<TValue> Values { get; }
        public void Add(TValue item) { }
        public void Clear() { }
        public bool Contains(TValue item) { }
        public void CopyTo(TValue[] array, int arrayIndex) { }
        public System.Collections.Generic.IEnumerator<TValue> GetEnumerator() { }
        public int IndexOf(TValue item) { }
        public void Insert(int index, TValue item) { }
        public bool Remove(TValue item) { }
        public void RemoveAt(int index) { }
        public static Blazorise.Utilities.SingleValueOrArray<TValue> op_Implicit(System.Collections.Generic.List<TValue> values) { }
        public static Blazorise.Utilities.SingleValueOrArray<TValue> op_Implicit(TValue value) { }
        public static Blazorise.Utilities.SingleValueOrArray<TValue> op_Implicit(TValue[] values) { }
    }
    public class StyleBuilder
    {
        public StyleBuilder(System.Action<Blazorise.Utilities.StyleBuilder> buildStyles) { }
        public string Styles { get; }
        public void Append(string value) { }
        public void Append(string value, bool condition) { }
        public void Dirty() { }
    }
    public static class TypeHelper
    {
        public static bool IsBoolean(this System.Type type) { }
        public static bool IsDate(this System.Type type) { }
        public static bool IsInteger(this System.Type type) { }
        public static bool IsNumeric(this System.Type type) { }
        public static bool IsTime(this System.Type type) { }
    }
    public static class ValidationAttributeHelper
    {
        public const string PlaceholderPrefix = "{";
        public const string PlaceholderSuffix = "}";
        public const string TempPlaceholderPrefix = "[[[";
        public const string TempPlaceholderSuffix = "]]]";
        public static readonly System.Reflection.PropertyInfo ValidationAttributeCustomErrorMessageSetProperty;
        public static readonly System.Reflection.PropertyInfo ValidationAttributeErrorMessageStringProperty;
        public static System.ComponentModel.DataAnnotations.ValidationAttribute[] GetValidationAttributes(System.Reflection.PropertyInfo propertyInfo) { }
        public static string RevertErrorMessagePlaceholders(string errorMessage) { }
        public static void SetDefaultErrorMessage(System.ComponentModel.DataAnnotations.ValidationAttribute validationAttribute) { }
        public static string SetErrorMessagePlaceholders(string errorMessage) { }
    }
    public class ValidationMessageLocalizerAttributeFinder : Blazorise.Utilities.IValidationMessageLocalizerAttributeFinder
    {
        public ValidationMessageLocalizerAttributeFinder() { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "Index",
                "Argument"})]
        public virtual System.Collections.Generic.IEnumerable<System.ValueTuple<string, string>> FindAll(string first, string second) { }
    }
    public struct ValidationMessageResult
    {
        public ValidationMessageResult(string message, string[] messageArguments, string[] memberNames) { }
        public string[] MemberNames { get; }
        public string Message { get; }
        public string[] MessageArguments { get; }
    }
    public class ValidationMessageResultStore
    {
        public ValidationMessageResultStore() { }
        public System.Collections.Generic.IEnumerable<Blazorise.Utilities.ValidationMessageResult> this[Microsoft.AspNetCore.Components.Forms.FieldIdentifier fieldIdentifier] { get; }
        public void Add(Microsoft.AspNetCore.Components.Forms.FieldIdentifier fieldIdentifier, Blazorise.Utilities.ValidationMessageResult message) { }
        public void Add(Microsoft.AspNetCore.Components.Forms.FieldIdentifier fieldIdentifier, System.Collections.Generic.IEnumerable<Blazorise.Utilities.ValidationMessageResult> messages) { }
        public void Clear(Microsoft.AspNetCore.Components.Forms.FieldIdentifier fieldIdentifier) { }
    }
    public class ValueDebouncer : System.IDisposable
    {
        public ValueDebouncer(int interval) { }
        public bool Running { get; }
        public event System.EventHandler<string> Debounce;
        public void Dispose() { }
        public void Flush() { }
        public void Update(string value) { }
    }
}
namespace Blazorise.Utilities.JsonConverters
{
    public class CamelCaseEnumJsonConverter : System.Text.Json.Serialization.JsonStringEnumConverter
    {
        public CamelCaseEnumJsonConverter() { }
    }
    public class SingleValueOrArrayJsonConverter<TItem> : System.Text.Json.Serialization.JsonConverter<Blazorise.Utilities.SingleValueOrArray<TItem>>
    {
        public SingleValueOrArrayJsonConverter() { }
        public bool CanWrite { get; }
        public override Blazorise.Utilities.SingleValueOrArray<TItem> Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options) { }
        public override void Write(System.Text.Json.Utf8JsonWriter writer, Blazorise.Utilities.SingleValueOrArray<TItem> value, System.Text.Json.JsonSerializerOptions options) { }
    }
}
namespace Blazorise.Utilities.Vendors
{
    public abstract class BaseDateTimeFormatConverter
    {
        protected BaseDateTimeFormatConverter() { }
        protected abstract System.Collections.Generic.Dictionary<string, string> FormatTokens { get; }
        public string Convert(string format) { }
    }
    public class FlatPickrDateTimeDisplayFormatConverter : Blazorise.Utilities.Vendors.BaseDateTimeFormatConverter, Blazorise.Vendors.IFlatPickrDateTimeDisplayFormatConverter
    {
        public FlatPickrDateTimeDisplayFormatConverter() { }
        protected override System.Collections.Generic.Dictionary<string, string> FormatTokens { get; }
    }
    public class InputMaskDateTimeInputFormatConverter : Blazorise.Utilities.Vendors.BaseDateTimeFormatConverter, Blazorise.Vendors.IInputMaskDateTimeInputFormatConverter
    {
        public InputMaskDateTimeInputFormatConverter() { }
        protected override System.Collections.Generic.Dictionary<string, string> FormatTokens { get; }
    }
}
namespace Blazorise.Vendors
{
    public interface IFlatPickrDateTimeDisplayFormatConverter
    {
        string Convert(string format);
    }
    public interface IInputMaskDateTimeInputFormatConverter
    {
        string Convert(string format);
    }
}