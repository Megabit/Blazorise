@page "/tests/datagrid"
<Row>
    <Column>
        <Card Margin="Margin.Is4.OnY">
            <CardHeader>
                <CardTitle>Data Grid</CardTitle>
                <CardSubtitle>Combine diferent datagrid options</CardSubtitle>
            </CardHeader>
            <CardBody>
                <Fields>
                    <Field>
                        <FieldLabel>
                        </FieldLabel>
                        <FieldBody>
                            <CheckEdit @bind-Checked="@allowEdit">Allow Edit</CheckEdit>
                        </FieldBody>
                    </Field>
                    <Field>
                        <FieldLabel>
                        </FieldLabel>
                        <FieldBody>
                            <CheckEdit @bind-Checked="@allowSort">Allow Sort</CheckEdit>
                        </FieldBody>
                    </Field>
                    <Field>
                        <FieldLabel>
                        </FieldLabel>
                        <FieldBody>
                            <CheckEdit @bind-Checked="@allowFilter">Allow Filter</CheckEdit>
                        </FieldBody>
                    </Field>
                    <Field>
                        <FieldLabel>
                        </FieldLabel>
                        <FieldBody>
                            <CheckEdit @bind-Checked="@showPager">Show Pager</CheckEdit>
                        </FieldBody>
                    </Field>
                    <Field>
                        <FieldLabel>
                            Edit Mode
                        </FieldLabel>
                        <FieldBody>
                            <SelectEdit @bind-SelectedValue="@editMode">
                                <SelectItem Value="DataGridEditMode.Form">Form</SelectItem>
                                <SelectItem Value="DataGridEditMode.Inline">Inline</SelectItem>
                                <SelectItem Value="DataGridEditMode.Popup">Popup</SelectItem>
                            </SelectEdit>
                        </FieldBody>
                    </Field>
                </Fields>
            </CardBody>
            <CardBody>
                <DataGrid TItem="Employee"
                          Data="@dataModels"
                          EditMode="@editMode"
                          AllowEdit="@allowEdit"
                          AllowSort="@allowSort"
                          AllowFilter="@allowFilter"
                          ShowPager="@showPager"
                          RowInserted="@OnRowInserted"
                          RowUpdated="@OnRowUpdated"
                          RowRemoved="@OnRowRemoved"
                          UseInternalEditing="true"
                          @bind-SelectedRow="@selectedEmployee"
                          DetailRowTrigger="@((item)=>item.Salaries?.Count > 0 && item.Id == selectedEmployee?.Id)"
                          IsStriped="true"
                          IsBordered="true"
                          IsHoverable="true">
                    <ChildContent>
                        <DataGridCommandColumn TItem="Employee">
                            <NewCommandTemplate>
                                <Button Color="Color.Success" Clicked="@context.Clicked">New</Button>
                            </NewCommandTemplate>
                            <EditCommandTemplate>
                                <Button Color="Color.Primary" Clicked="@context.Clicked">Edit</Button>
                            </EditCommandTemplate>
                            <SaveCommandTemplate>
                                <Button Color="Color.Primary" Clicked="@context.Clicked">Save</Button>
                            </SaveCommandTemplate>
                            <DeleteCommandTemplate>
                                <Button Color="Color.Danger" Clicked="@context.Clicked">Delete</Button>
                            </DeleteCommandTemplate>
                            <CancelCommandTemplate>
                                <Button Color="Color.Secondary" Clicked="@context.Clicked">Cancel</Button>
                            </CancelCommandTemplate>
                            <ClearFilterCommandTemplate>
                                <Button Color="Color.Warning" Clicked="@context.Clicked">Clear Filter</Button>
                            </ClearFilterCommandTemplate>
                        </DataGridCommandColumn>
                        <DataGridColumn TItem="Employee" Field="@nameof( Employee.Id )" Caption="#" AllowSort="false" />
                        <DataGridColumn TItem="Employee" Field="@nameof( Employee.FirstName )" Caption="First Name" AllowEdit="true" />
                        <DataGridColumn TItem="Employee" Field="@nameof( Employee.LastName )" Caption="Last Name" AllowEdit="true" />
                        <DataGridColumn TItem="Employee" Field="@nameof( Employee.EMail )" Caption="EMail" AllowEdit="true" />
                        <DataGridColumn TItem="Employee" Field="@nameof( Employee.City )" Caption="City" AllowEdit="true" />
                        <DataGridColumn TItem="Employee" Field="@nameof( Employee.Zip )" Caption="Zip" AllowEdit="true" />
                        <DataGridNumericColumn TItem="Employee" Field="@nameof( Employee.DateOfBirth )" Caption="Date Of Birth" AllowEdit="true">
                            <DisplayTemplate>
                                @{
                                    var date = ( context as Employee )?.DateOfBirth;

                                    if ( date != null )
                                    {
                                        @($"{date.Value.ToShortDateString()}, age: {( DateTime.Now.Year - date.Value.Year )}")
                                    }
                                }
                            </DisplayTemplate>
                        </DataGridNumericColumn>
                        <DataGridNumericColumn TItem="Employee" Field="@nameof( Employee.Childrens )" Caption="Childrens" AllowEdit="true" />
                        <DataGridSelectColumn TItem="Employee" Field="@nameof( Employee.Gender )" Caption="Gender" AllowEdit="true">
                            <DisplayTemplate>
                                @{
                                    var gender = ( context as Employee )?.Gender;

                                    @if ( gender == "M" )
                                    {
                                        @("Male")
                                    }
                                    else if ( gender == "F" )
                                    {
                                        @("Female")
                                    }
                                }
                            </DisplayTemplate>
                            <EditTemplate>
                                <SelectEdit TValue="string" SelectedValue="@((string)( ( (CellEditContext)context ).CellValue ))" SelectedValueChanged="@(( v ) => ( (CellEditContext)context ).CellValue = v)">
                                    <SelectItem TValue="string" Value="null"></SelectItem>
                                    <SelectItem TValue="string" Value="@("M")">Male</SelectItem>
                                    <SelectItem TValue="string" Value="@("F")">Female</SelectItem>
                                </SelectEdit>
                            </EditTemplate>
                        </DataGridSelectColumn>
                        <DataGridColumn TItem="Employee" Field="@nameof( Employee.Salary )" Caption="Salary" AllowEdit="true">
                            <DisplayTemplate>
                                @($"{( context as Employee )?.Salary} €")
                            </DisplayTemplate>
                            <EditTemplate>
                                <NumericEdit TValue="decimal" Value="@((decimal)( ( (CellEditContext)context ).CellValue ))" ValueChanged="@(v => ( (CellEditContext)context ).CellValue = v)" />
                            </EditTemplate>
                        </DataGridColumn>
                        @*<DataGridCheckColumn TItem="Employee" Field="@nameof(Employee.IsActive)" Caption="Active" AllowEdit="true" AllowFilter="false">
                                <DisplayTemplate>
                                    @(( context as Employee )?.IsActive == true ? "active" : "not active")
                                </DisplayTemplate>
                            </DataGridCheckColumn>*@
                    </ChildContent>
                    <DetailRowTemplate>
                        @{
                            var salaries = ( context as Employee ).Salaries;

                            <DataGrid TItem="Salary"
                                      Data="salaries"
                                      AllowSort="false"
                                      ShowCaptions="false">
                                <DataGridCommandColumn TItem="Salary" />
                                <DataGridDateColumn TItem="Salary" Field="@nameof(Salary.Date)" Caption="Date" />
                                <DataGridNumericColumn TItem="Salary" Field="@nameof(Salary.Total)" Caption="Total" />
                            </DataGrid>
                        }
                    </DetailRowTemplate>
                </DataGrid>
            </CardBody>
        </Card>
    </Column>
</Row>
<Row>
    <Column>
        <Card>
            <CardHeader>
                <CardTitle>Selected Employee</CardTitle>
                <CardSubtitle></CardSubtitle>
            </CardHeader>
            <CardBody>
                <Fields>
                    <Field>
                        <FieldLabel>First Name</FieldLabel>
                        <FieldBody>
                            <TextEdit IsReadonly="true" Text="@selectedEmployee?.FirstName"></TextEdit>
                        </FieldBody>
                    </Field>
                    <Field>
                        <FieldLabel>Last Name</FieldLabel>
                        <TextEdit IsReadonly="true" Text="@selectedEmployee?.LastName"></TextEdit>
                    </Field>
                </Fields>
                <Fields>
                    <Field>
                        <FieldLabel>Email</FieldLabel>
                        <FieldBody>
                            <TextEdit IsReadonly="true" Text="@selectedEmployee?.EMail"></TextEdit>
                        </FieldBody>
                    </Field>
                    <Field>
                        <FieldLabel>City</FieldLabel>
                        <TextEdit IsReadonly="true" Text="@selectedEmployee?.City"></TextEdit>
                    </Field>
                </Fields>
            </CardBody>
        </Card>
    </Column>
</Row>
@code{
    DataGridEditMode editMode = DataGridEditMode.Form;
    bool allowEdit = true;
    bool allowSort = true;
    bool allowFilter = true;
    bool showPager = true;

    Employee selectedEmployee;

    public class Employee
    {
        public int Id { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string EMail { get; set; }
        public string City { get; set; }
        public string Zip { get; set; }
        public DateTime? DateOfBirth { get; set; }
        public int? Childrens { get; set; }
        public string Gender { get; set; }
        public decimal Salary { get; set; }
        public bool IsActive { get; set; }

        public List<Salary> Salaries { get; set; } = new List<Salary>();
    }

    public class Salary
    {
        public DateTime Date { get; set; }
        public decimal Total { get; set; }
    }

    // generated with https://mockaroo.com/
    List<Employee> dataModels = new List<Employee> {
        new Employee {Id = 1,FirstName = "Caro",LastName = "Nizard",EMail = "cnizard0@hc360.com",City = "Faīẕābād",Zip = null,Salary = 51724.19m,
            Salaries = new List<Salary> {
                new Salary { Date = new DateTime(2019,1,6), Total = 6000 },
                new Salary { Date = new DateTime(2019,2,7), Total = 5005 },
                new Salary { Date = new DateTime(2019,3,5), Total = 3000 }
            }},
        new Employee {Id = 2,FirstName = "Matthew",LastName = "Labb",EMail = "mlabb1@ca.gov",City = "Xinxi",Zip = null,Salary = 65176.6m, Childrens=2},
        new Employee {Id = 3,FirstName = "Enos",LastName = "Clendennen",EMail = "eclendennen2@shareasale.com",City = "Listvyanskiy",Zip = "633224",Salary = 75602.48m, Childrens=1,
            Salaries = new List<Salary> {
                new Salary { Date = new DateTime(2019,2,7), Total = 4005 },
                new Salary { Date = new DateTime(2019,3,5), Total = 8000 }
            }},
        new Employee {Id = 4,FirstName = "Cirilo",LastName = "Douch",EMail = "cdouch3@thetimes.co.uk",City = "Wiset Chaichan",Zip = "84280",Salary = 88511.38m },
        new Employee {Id = 5,FirstName = "Bibbie",LastName = "Prahm",EMail = "bprahm4@dropbox.com",City = "Nkandla",Zip = "3859",Salary = 41665.0m },
        new Employee {Id = 6,FirstName = "Ferd",LastName = "Bizzey",EMail = "fbizzey5@vimeo.com",City = "Arroyo Seco",Zip = "5196",Salary = 58632.74m },
        new Employee {Id = 7,FirstName = "Annalee",LastName = "Mathie",EMail = "amathie6@qq.com",City = "Qi’an",Zip = null,Salary = 38622.71m },
        new Employee {Id = 8,FirstName = "Sarajane",LastName = "Sarney",EMail = "ssarney7@phoca.cz",City = "Wagini",Zip = null,Salary = 67163.94m },
        new Employee {Id = 9,FirstName = "Lissa",LastName = "Clemenzi",EMail = "lclemenzi8@si.edu",City = "Lijiang",Zip = null,Salary = 67078.77m },
        new Employee {Id = 10,FirstName = "Taber",LastName = "Kowal",EMail = "tkowal9@ustream.tv",City = "Muhos",Zip = "91501",Salary = 70385.0m },
        new Employee {Id = 11,FirstName = "Christyna",LastName = "Blaylock",EMail = "cblaylocka@gov.uk",City = "Kruševo",Zip = "34320",Salary = 20626.15m, Childrens=4 },
        new Employee {Id = 12,FirstName = "Honoria",LastName = "Stirtle",EMail = "hstirtleb@ox.ac.uk",City = "Muang Phôn-Hông",Zip = null,Salary = 48999.42m, Childrens=1 },
        new Employee {Id = 13,FirstName = "Gregory",LastName = "Sinden",EMail = "gsindenc@go.com",City = "Kampunglistrik",Zip = null,Salary = 38097.16m, Childrens=2 },
        new Employee {Id = 14,FirstName = "Obediah",LastName = "Stroban",EMail = "ostroband@nbcnews.com",City = "Almoínhas Velhas",Zip = "2755-163",Salary = 83997.47m },
        new Employee {Id = 15,FirstName = "Kellen",LastName = "Zanotti",EMail = "kzanottie@123-reg.co.uk",City = "Türkmenabat",Zip = null,Salary = 37339.0m },
        new Employee {Id = 16,FirstName = "Luelle",LastName = "Mowles",EMail = "lmowlesf@wikimedia.org",City = "Durham",Zip = "27717",Salary = 89879.64m },
        new Employee {Id = 17,FirstName = "Venita",LastName = "Petkovic",EMail = "vpetkovicg@twitpic.com",City = "Radoboj",Zip = "49232",Salary = 22979.32m },
        new Employee {Id = 18,FirstName = "Gates",LastName = "Neat",EMail = "gneath@youtu.be",City = "Solna",Zip = "170 77",Salary = 75811.63m },
        new Employee {Id = 19,FirstName = "Roland",LastName = "Frangleton",EMail = "rfrangletoni@umich.edu",City = "Tío Pujio",Zip = "5936",Salary = 58971.76m, Childrens=3 },
        new Employee {Id = 20,FirstName = "Ferdinande",LastName = "Pidcock",EMail = "fpidcockj@independent.co.uk",City = "Paris 11",Zip = "75547 CEDEX 11",Salary = 82223.65m },
        new Employee {Id = 21,FirstName = "Clarie",LastName = "Crippin",EMail = "ccrippink@lycos.com",City = "Gostyń",Zip = "63-816",Salary = 79390.13m },
        new Employee {Id = 22,FirstName = "Israel",LastName = "Carlin",EMail = "icarlinl@washingtonpost.com",City = "Poitiers",Zip = "86042 CEDEX 9",Salary = 36875.18m },
        new Employee {Id = 23,FirstName = "Christoper",LastName = "Moorton",EMail = "cmoortonm@gizmodo.com",City = "Jambangan",Zip = null,Salary = 76787.57m },
        new Employee {Id = 24,FirstName = "Trina",LastName = "Seamen",EMail = "tseamenn@foxnews.com",City = "Song",Zip = "54120",Salary = 43598.06m },
        new Employee {Id = 25,FirstName = "Douglass",LastName = "Amor",EMail = "damoro@house.gov",City = "Castillos",Zip = null,Salary = 49865.8m, Childrens=2 },
        new Employee {Id = 26,FirstName = "Reeta",LastName = "Acom",EMail = "racomp@fc2.com",City = "Baoping",Zip = null,Salary = 61296.4m },
        new Employee {Id = 27,FirstName = "Chandler",LastName = "Franzonetti",EMail = "cfranzonettiq@archive.org",City = "Emin",Zip = null,Salary = 67458.07m, Childrens=1 }
    };

    void OnRowInserted( SavedRowItem<Employee, Dictionary<string, object>> e )
    {
        //var employee = e.Item;

        //employee.Id = dataModels?.Max( x => x.Id ) + 1 ?? 1;

        //dataModels.Add( employee );
    }

    void OnRowUpdated( SavedRowItem<Employee, Dictionary<string, object>> e )
    {
        //var employee = e.Item;

        //employee.FirstName = (string)e.Values["FirstName"];
        //employee.LastName = (string)e.Values["LastName"];
        //employee.EMail = (string)e.Values["EMail"];
        //employee.City = (string)e.Values["City"];
        //employee.Zip = (string)e.Values["Zip"];
        //employee.DateOfBirth = (DateTime?)e.Values["DateOfBirth"];
        //employee.Childrens = (int?)e.Values["Childrens"];
        //employee.Gender = (string)e.Values["Gender"];
        //employee.Salary = (decimal)e.Values["Salary"];
    }

    void OnRowRemoved( Employee model )
    {
        //if ( dataModels.Contains( model ) )
        //{
        //    dataModels.Remove( model );
        //}
    }
}
