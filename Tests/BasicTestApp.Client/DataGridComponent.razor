<DataGrid TItem="Employee"
          Data="@Data"
          ShowPager
          ShowPageSizes
          Sortable
          SortMode="@SortMode"
          SortChanged="SortChanged"
          Editable
          EditMode="@DataGridEditMode"
          UseInternalEditing="UseInternalEditing"
          RowInserting="RowInserting"
          RowUpdating="RowUpdating"
          RowRemoving="RowRemoving"
          RowInserted="RowInserted"
          RowUpdated="RowUpdated"
          RowRemoved="RowRemoved">
    <DataGridColumns>
        <DataGridCommandColumn TItem="Employee">
            <NewCommandTemplate>
                <Button ElementId="btnNew" Color="Color.Success" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </NewCommandTemplate>
            <EditCommandTemplate>
                <Button ElementId="btnEdit" Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </EditCommandTemplate>
            <SaveCommandTemplate>
                <Button ElementId="btnSave" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </SaveCommandTemplate>
            <DeleteCommandTemplate>
                <Button ElementId="btnDelete" Color="Color.Danger" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </DeleteCommandTemplate>
            <CancelCommandTemplate>
                <Button ElementId="btnCancel" Color="Color.Secondary" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </CancelCommandTemplate>
            <ClearFilterCommandTemplate>
                <Button ElementId="btnClearFilter" Color="Color.Warning" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </ClearFilterCommandTemplate>
            </DataGridCommandColumn>
            <DataGridColumn TextAlignment="TextAlignment.Center"
                        TItem="Employee"
                        Field="@nameof( Employee.Fraction )"
                        Caption="Fraction"
                        SortField="@nameof( Employee.FractionValue )"
                        SortDirection="SortDirection.Ascending"
                        Editable="false" />
            <DataGridColumn TItem="Employee"
                        Field="@nameof( Employee.Name )"
                        Caption="Name"
                                Editable />
    </DataGridColumns>
    <EmptyTemplate>
        No Records...
    </EmptyTemplate>
</DataGrid>

@code {

    [Parameter] public EventCallback<CancellableRowChange<Employee, Dictionary<string, object>>> RowInserting { get; set; }
    [Parameter] public EventCallback<CancellableRowChange<Employee, Dictionary<string, object>>> RowUpdating { get; set; }
    [Parameter] public EventCallback<CancellableRowChange<Employee>> RowRemoving { get; set; }
    [Parameter] public EventCallback<SavedRowItem<Employee, Dictionary<string, object>>> RowInserted { get; set; }
    [Parameter] public EventCallback<SavedRowItem<Employee, Dictionary<string, object>>> RowUpdated { get; set; }
    [Parameter] public EventCallback<Employee> RowRemoved { get; set; }

    [Parameter] public bool UseInternalEditing { get; set; } = true;

    [Parameter]
    public DataGridEditMode DataGridEditMode { get; set; }

    [Parameter]
    public IEnumerable<Employee> Data { get; set; } = new List<Employee>()
        {
            new() { Name = "John", Fraction = "1/2" },
            new() { Name = "Sarah", Fraction = "1/4" },
            new() { Name = "Paul", Fraction = "1/8" },
            new() { Name = "Ana", Fraction = "3/4" },
            new() { Name = "John", Fraction = "1/3" }
        };

    [Parameter]
    public EventCallback<DataGridSortChangedEventArgs> SortChanged { get; set; }

    [Parameter]
    public DataGridSortMode SortMode { get; set; } = DataGridSortMode.Multiple;

    public class Employee
    {
        public string Name { get; set; }

        public string Fraction { get; set; }

        public decimal FractionValue
        {
            get
            {
                if ( !string.IsNullOrWhiteSpace( Fraction ) )
                {
                    var split = Fraction.Split( "/" );
                    if ( split.Length == 2 )
                    {
                        return decimal.Parse( split[0] ) / decimal.Parse( split[1] );
                    }
                }

                return 0;

            }
        }

    }
}